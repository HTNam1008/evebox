// // Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// // versions:
// //   protoc-gen-ts_proto  v2.6.1
// //   protoc               v5.29.3
// // source: auth.proto

// /* eslint-disable */
// import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
// import { Observable } from "rxjs";
// import { Empty } from "./google/protobuf/empty.pb";

// export const protobufPackage = "auth";

// /** Register */
// export interface RegisterRequest {
//   name: string;
//   email: string;
//   password: string;
//   rePassword: string;
//   phone: string;
//   role: number;
//   provinceId: number[];
// }

// export interface RegisterResponse {
//   statusCode: number;
//   message: string;
//   data: RegisterData | undefined;
// }

// export interface RegisterData {
//   requestToken: string;
//   remainingAttempts: number;
//   resendAllowedIn: number;
// }

// /** Login */
// export interface LoginRequest {
//   email: string;
//   password: string;
// }

// export interface LoginResponse {
//   /** Trường này sẽ được chuyển thành "statusCode" trong JSON */
//   statusCode: number;
//   /** Giữ nguyên tên "message" trong JSON */
//   message: string;
//   /** Đối tượng con, tên "data" trong JSON */
//   data: LoginData | undefined;
// }

// export interface LoginData {
//   /** Đảm bảo tên JSON là "access_token" */
//   accessToken: string;
//   /** Đảm bảo tên JSON là "refresh_token" */
//   refreshToken: string;
// }

// /** verify otp */
// export interface VerifyOtpRequest {
//   email: string;
//   otp: string;
//   /** "register" or "login" */
//   type: string;
//   requestToken: string;
// }

// export interface VerifyOtpResponse {
//   statusCode: number;
//   error: string[];
//   userId: number;
// }

// /** resend otp */
// export interface ResendOtpRequest {
//   email: string;
//   /** "register" or "login" */
//   type: string;
//   requestToken: string;
// }

// export interface ResendOtpResponse {
//   statusCode: number;
//   message: string;
//   data: ResendOtpData | undefined;
// }

// export interface ResendOtpData {
//   remainingAttempts: number;
//   resendAllowedIn: number;
// }

// /** Reset Password */
// export interface ResetPasswordRequest {
//   resetToken: string;
//   newPassword: string;
//   confirmPassword: string;
// }

// export interface ResetPasswordResponse {
//   statusCode: number;
//   message: string;
// }

// /** Refresh Token */
// export interface RefreshTokenRequest {
//   refreshToken: string;
// }

// export interface RefreshTokenResponse {
//   statusCode: number;
//   message: string;
//   data: RefreshTokenData | undefined;
// }

// export interface RefreshTokenData {
//   accessToken: string;
//   refreshToken: string;
// }

// /** Logout */
// export interface LogoutResponse {
//   statusCode: number;
//   message: string;
// }

// /** Forgot Password */
// export interface ForgotPasswordRequest {
//   email: string;
// }

// export interface ForgotPasswordResponse {
//   statusCode: number;
//   message: string;
//   data: ForgotPasswordData | undefined;
// }

// export interface ForgotPasswordData {
//   requestToken: string;
//   remainingAttempts: number;
//   resendAllowedIn: number;
// }

// export interface ValidateRequest {
//   token: string;
// }

// export interface ValidateResponse {
//   statusCode: number;
//   message: string;
//   userId: number;
// }

// export const AUTH_PACKAGE_NAME = "auth";

// export interface AuthServiceClient {
//   register(request: RegisterRequest): Observable<RegisterResponse>;

//   login(request: LoginRequest): Observable<LoginResponse>;

//   verifyOtp(request: VerifyOtpRequest): Observable<VerifyOtpResponse>;

//   resendOtp(request: ResendOtpRequest): Observable<ResendOtpResponse>;

//   resetPassword(request: ResetPasswordRequest): Observable<ResetPasswordResponse>;

//   refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

//   logout(request: Empty): Observable<LogoutResponse>;

//   forgotPassword(request: ForgotPasswordRequest): Observable<ForgotPasswordResponse>;

//   validate(request: ValidateRequest): Observable<ValidateResponse>;
// }

// export interface AuthServiceController {
//   register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

//   login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

//   verifyOtp(request: VerifyOtpRequest): Promise<VerifyOtpResponse> | Observable<VerifyOtpResponse> | VerifyOtpResponse;

//   resendOtp(request: ResendOtpRequest): Promise<ResendOtpResponse> | Observable<ResendOtpResponse> | ResendOtpResponse;

//   resetPassword(
//     request: ResetPasswordRequest,
//   ): Promise<ResetPasswordResponse> | Observable<ResetPasswordResponse> | ResetPasswordResponse;

//   refreshToken(
//     request: RefreshTokenRequest,
//   ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

//   logout(request: Empty): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

//   forgotPassword(
//     request: ForgotPasswordRequest,
//   ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;

//   validate(request: ValidateRequest): Promise<ValidateResponse> | Observable<ValidateResponse> | ValidateResponse;
// }

// export function AuthServiceControllerMethods() {
//   return function (constructor: Function) {
//     const grpcMethods: string[] = [
//       "register",
//       "login",
//       "verifyOtp",
//       "resendOtp",
//       "resetPassword",
//       "refreshToken",
//       "logout",
//       "forgotPassword",
//       "validate",
//     ];
//     for (const method of grpcMethods) {
//       const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
//       GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
//     }
//     const grpcStreamMethods: string[] = [];
//     for (const method of grpcStreamMethods) {
//       const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
//       GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
//     }
//   };
// }

// export const AUTH_SERVICE_NAME = "AuthService";
