services:
  # postgresql-auth: 
  #   image: postgres:latest
  #   container_name: postgresql-auth
  #   hostname: postgresql-auth
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_AUTH_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_AUTH_DB}
  #     PG_DATA: /var/lib/postgresql/data
  #     TZ: "Asia/Ho_Chi_Minh"
  #   healthcheck:
  #     test: ["CMD-shell", "pg_isready -d ${POSTGRES_AUTH_DB} -U ${POSTGRES_AUTH_USER}"]
  #     interval: 5s
  #     timeout: 30s
  #     retries: 5
  #   volumes:
  #     - ./data/postgresql-auth/data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - evebox-net

  postgresql-auth-exporter:
    image: bitnami/postgres-exporter
    container_name: postgresql-auth-exporter
    hostname: postgresql-auth-exporter
    ports:
      - "9901:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_AUTH_USER}:${POSTGRES_AUTH_PASSWORD}@${POSTGRES_AUTH_HOST}:${POSTGRES_AUTH_PORT}/${POSTGRES_AUTH_DB}?sslmode=disable"
      TZ: "Asia/Ho_Chi_Minh"
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
    networks:
      - evebox-monitoring
  

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - evebox-monitoring


  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SING_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_LOG_MODE=console file
      - GF_LOG_FILTERS=alerting.notifier.slack:debug alermanager:debug ngalert:debug
    volumes:
      - ./grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - evebox-monitoring


volumes:
  prometheus:
  grafana:
  postgresql_auth_exporter:

networks:
  evebox-monitoring:
    driver: bridge
  