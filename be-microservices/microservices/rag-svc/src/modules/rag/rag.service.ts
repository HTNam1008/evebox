// rag.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { VectorStoreCohereService } from 'src/infrastructure/vector/vector_store.cohere';
import { ChatGoogleGenerativeAI } from '@langchain/google-genai';
import { PromptTemplate } from '@langchain/core/prompts';
import { Document } from 'langchain/document';

type RAGState = {
  question: string;
  context?: Document[];
  answer?: string;
  nextPrompt?: string;
};

@Injectable()
export class RAGService {
  private readonly logger = new Logger(RAGService.name);

  constructor(private readonly vectorStore: VectorStoreCohereService) {}

  private async retrieve(state: RAGState): Promise<Partial<RAGState>> {
    this.logger.log(`üì• [Step: Retrieve] Searching for relevant documents...`);
    const store =  await this.vectorStore['getVectorStore']("eveboxEvents");
    const results = await store.similaritySearch(state.nextPrompt || state.question, 10);
    return { context: results };
  }

  private async generate(state: RAGState): Promise<Partial<RAGState>> {
    this.logger.log(`ü§ñ [Step: Generate] Creating answer using Gemini...`);

    const promptTemplate = PromptTemplate.fromTemplate(`
B·∫°n l√† tr·ª£ l√Ω AI. D∆∞·ªõi ƒë√¢y l√† c√°c t√†i li·ªáu c√≥ th·ªÉ li√™n quan ƒë·∫øn c√¢u h·ªèi:

K·∫øt qu·∫£ search similarity: {context}

C√¢u h·ªèi g·ªëc: {question}

C√¢u h·ªèi sau khi x·ª≠ l√Ω qua invoke: {nextPrompt}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch ch√≠nh x√°c v√† r√µ r√†ng nh·∫•t d·ª±a tr√™n c√°c t√†i li·ªáu tr√™n, v√¨ sao l·∫°i chuy·ªÉn ƒë·∫øn trang search, k·∫øt qu·∫£ search c√≥ y·∫øu t·ªë g√¨ ƒë·ªÉ ƒë√°p ·ª©ng ƒë∆∞·ª£c.
    `);

    const prompt = await promptTemplate.format({
      question: state.question,
      context: state.context?.map(doc => doc.pageContent).join('\n\n') || '',
      nextPrompt: state.nextPrompt || '',
    });

    const model = new ChatGoogleGenerativeAI({
      apiKey: 'AIzaSyBFkHW7QIXxiVaiThw3ItS3ruhK2XZSKYc',
      model: 'gemini-1.5-pro',
      maxOutputTokens: 2048,
    });

    const response = await model.invoke(prompt);
    const content =
      typeof response === 'string'
        ? response
        : 'content' in response
          ? Array.isArray(response.content)
            ? response.content.map(part => (typeof part === 'string' ? part : JSON.stringify(part))).join('')
            : response.content
          : JSON.stringify(response);

    return { answer: content };
  }

  async askQuestion(nextPrompt: string, originalQuestion: string): Promise<{
    answer: string;
    context?: Document[];
  }> {
    const state: RAGState = { question: originalQuestion, nextPrompt };

    try {
      const retrieved = await this.retrieve(state);
      const generated = await this.generate({ ...state, ...retrieved });

      const answer = generated.answer ?? '‚ùå No answer generated.';
      this.logger.log(`‚úÖ Final answer generated.`);
      return {
        answer,
        context: retrieved.context,
      };
    } catch (error) {
      this.logger.error(`‚ùå RAG flow failed: ${error.message}`);
      throw error;
    }
  }
}
