This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-25T14:10:07.813Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.dockerignore
.eslintrc.json
.gitignore
.repomixignore
Dockerfile
next.config.ts
package.json
postcss.config.mjs
public/styles/events/payment.css
public/styles/ticket/TicketManagement.css
README.md
src/app/(authentication)/forgot-password/components/forgotPasswordForm.tsx
src/app/(authentication)/forgot-password/libs/hooks/useForgotPasswordForm.tsx
src/app/(authentication)/forgot-password/page.tsx
src/app/(authentication)/layout.tsx
src/app/(authentication)/login/components/loginForm.tsx
src/app/(authentication)/login/libs/hooks/useLoginForm.ts
src/app/(authentication)/login/page.tsx
src/app/(authentication)/register/components/registerForm.tsx
src/app/(authentication)/register/libs/hooks/useRegisterForm.ts
src/app/(authentication)/register/page.tsx
src/app/(authentication)/reset-password/components/resetPasswordForm.tsx
src/app/(authentication)/reset-password/libs/hooks/useResetPasswordForm.tsx
src/app/(authentication)/reset-password/page.tsx
src/app/(authentication)/verify-otp/components/verifyOtpForm.tsx
src/app/(authentication)/verify-otp/libs/constants/otpConstants.ts
src/app/(authentication)/verify-otp/libs/hooks/useVerifyOtpForm.ts
src/app/(authentication)/verify-otp/page.tsx
src/app/(dashboard)/components/common/footer.tsx
src/app/(dashboard)/components/common/navigationBar.tsx
src/app/(dashboard)/components/common/sidebar.tsx
src/app/(dashboard)/components/dashboard/datePicker.tsx
src/app/(dashboard)/components/dashboard/error.tsx
src/app/(dashboard)/components/dashboard/eventSlider.tsx
src/app/(dashboard)/components/dashboard/imageSlider.tsx
src/app/(dashboard)/components/dashboard/searchControls.tsx
src/app/(dashboard)/layout.tsx
src/app/(dashboard)/libs/functions/mapCategoryName.tsx
src/app/(dashboard)/libs/hooks/useFetchEvents.ts
src/app/(dashboard)/libs/hooks/useFetchRecommendedEvents.tsx
src/app/(dashboard)/libs/interface/dashboard.interface.ts
src/app/(dashboard)/libs/loading.tsx
src/app/(dashboard)/loading.tsx
src/app/(dashboard)/page.tsx
src/app/(dashboard)/search/components/range-slider.tsx
src/app/(dashboard)/search/components/searchClient.tsx
src/app/(dashboard)/search/layout.tsx
src/app/(dashboard)/search/loading.tsx
src/app/(dashboard)/search/page.tsx
src/app/(event)/event/[id]/booking/components/navigation.tsx
src/app/(event)/event/[id]/booking/payment/components/dialogs/paymentInfoDialog.tsx
src/app/(event)/event/[id]/booking/payment/components/dialogs/QRPaymenDialog.tsx
src/app/(event)/event/[id]/booking/payment/components/dialogs/timeOutDialog.tsx
src/app/(event)/event/[id]/booking/payment/components/paymentMethod.tsx
src/app/(event)/event/[id]/booking/payment/components/ticketInfo.tsx
src/app/(event)/event/[id]/booking/payment/page.tsx
src/app/(event)/event/[id]/booking/question-form/components/dialogs/confirmDialog.tsx
src/app/(event)/event/[id]/booking/question-form/components/questionList.tsx
src/app/(event)/event/[id]/booking/question-form/components/ticketInfo.tsx
src/app/(event)/event/[id]/booking/question-form/page.tsx
src/app/(event)/event/[id]/booking/select-ticket/components/selectTicket.tsx
src/app/(event)/event/[id]/booking/select-ticket/components/ticketInfo.tsx
src/app/(event)/event/[id]/booking/select-ticket/page.tsx
src/app/(event)/event/[id]/loading.tsx
src/app/(event)/event/[id]/page.tsx
src/app/(event)/event/components/comment.tsx
src/app/(event)/event/components/description.tsx
src/app/(event)/event/components/eventBox.tsx
src/app/(event)/event/components/eventDetail.tsx
src/app/(event)/event/components/moreInformation.tsx
src/app/(event)/event/components/ticketDetails.tsx
src/app/(event)/layout.tsx
src/app/(temp)/drawSeatmap/components/seatmap.tsx
src/app/(temp)/drawSeatmap/components/seatmapType.ts
src/app/(temp)/drawSeatmap/page.tsx
src/app/(temp)/layout.tsx
src/app/(ticket)/layout.tsx
src/app/(ticket)/loading.tsx
src/app/(ticket)/ticket/page.tsx
src/app/api/auth/[...nextauth]/route.ts
src/app/api/user/forgot-password/route.ts
src/app/api/user/login/route.ts
src/app/api/user/logout/route.ts
src/app/api/user/me/route.ts
src/app/api/user/otps/resend-otp/route.ts
src/app/api/user/otps/verify-otp/route.ts
src/app/api/user/register/route.ts
src/app/api/user/reset-password/route.ts
src/app/error.tsx
src/app/layout.tsx
src/app/middleware.ts
src/app/provider.tsx
src/contexts/auth.context.tsx
src/lib/authOptions.ts
src/services/apiClient.ts
src/styles/admin/pages/BookingQuestionForm.css
src/styles/admin/pages/Dashboard.css
src/styles/admin/pages/Error.css
src/styles/admin/pages/EventDetail.css
src/styles/admin/pages/ForgotPassword.css
src/styles/admin/pages/global.css
src/styles/admin/pages/HomePage.css
src/styles/admin/pages/Login.css
src/styles/admin/pages/Register.css
src/styles/admin/pages/VerifyOTP.css
src/styles/ticket/TicketManagement.css
src/types/BaseApiResponse.ts
src/types/ErrorResponse.ts
src/types/model/userInfo.ts
src/types/next-auth.d.ts
src/utils/helpers.tsx
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .dockerignore
================
node_modules
npm-debug.log
Dockerfile
docker-compose.yml
.dockerignore
.git
.gitignore
.env

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/package-lock*
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .repomixignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/package-lock*
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: Dockerfile
================
# Use official Node.js LTS version as the base image
FROM node:18-alpine AS builder

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the Next.js application
RUN npm run build

# Production image
FROM node:18-alpine 

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install only production dependencies
RUN npm install --production

# Copy the built application from the builder stage
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/next.config.ts ./
COPY --from=builder /app/next-env.d.ts ./
COPY --from=builder /app/tsconfig.json ./
COPY --from=builder /app/src ./src

# Expose the port the app runs on
EXPOSE 3000

# Define the command to run the app
CMD ["npm", "run", "start"]

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  reactStrictMode: true,
  images: {
    domains: ["images.tkbcdn.com", "salt.tkbcdn.com"], // Add all external domains here
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@fontsource/nunito-sans": "^5.1.0",
    "@iconify/react": "^5.0.2",
    "@mui/material": "^6.1.10",
    "@nextui-org/date-picker": "^2.3.7",
    "@nextui-org/react": "^2.6.8",
    "axios": "^1.7.7",
    "bootstrap": "^5.3.3",
    "bootstrap-icons": "^1.11.3",
    "dayjs": "^1.11.13",
    "formik": "^2.4.6",
    "framer-motion": "^12.4.3",
    "install": "^0.13.0",
    "jwt-decode": "^4.0.0",
    "lucide-react": "^0.460.0",
    "next": "15.0.1",
    "next-auth": "^4.24.11",
    "npm": "^10.9.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-tailwindcss-datepicker": "^1.7.2",
    "swiper": "^11.1.15",
    "swr": "^2.2.5",
    "yup": "^1.4.0"
  },
  "devDependencies": {
    "@types/jwt-decode": "^3.1.0",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/styles/events/payment.css
================
.info-dialog {
  width: 35%;
  justify-self: center;
  border-radius: 20px;
}

.close-btn:hover {
  background-color: white;
  color: #0C4762;
  border-radius: 50%;
}

.css-10d30g3-MuiPaper-root-MuiDialog-paper {
  border-radius: 20px !important;
}

================
File: public/styles/ticket/TicketManagement.css
================
.status-tab {
  justify-content: space-between;
}

.status-tab .status-tab__item {
  width: 280px;
  border-radius: 36px;
}

.time-tab {
  justify-content: center;
}

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/(authentication)/forgot-password/components/forgotPasswordForm.tsx
================
"use client";

import { useForgotPasswordForm } from '../libs/hooks/useForgotPasswordForm';
import '@/styles/admin/pages/ForgotPassword.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import { CircularProgress } from '@mui/material';
import Image from 'next/image'

export const ForgotPasswordForm = () => {
  const {
    error,
    // isContinued,
    // timeLeft,
    // isResendAllowed,
    // otp,
    // formatTime,
    // handleChangeOTP,
    // handleResendOtp,
    isLoading,
    emailFormik,
    // otpFormik
  } = useForgotPasswordForm();

  return (
    <div className="row">
      <div className="col-md-7 d-flex align-items-center justify-content-center left-pane">
        <a href="/login" className="back-link">
          &lt; Quay lại Đăng nhập
        </a>
        <div className="w-75">
          <div className="form">
            <div className="container d-flex flex-column align-items-center">
              <Image
                src="/images/logo.png"
                alt="EveBox Logo"
                width={50}
                height={50}
                className="logo"
              />
              <h3 ><strong>Quên mật khẩu?</strong></h3>
              <p className="subheading">Đừng lo, điều này xảy ra với tất cả chúng ta. Nhập email của bạn dưới đây để khôi phục mật khẩu.</p>
            </div>
            <form onSubmit={emailFormik.handleSubmit}>
              <div className="mb-3">
                <label htmlFor="email" className="form-label bold-label">EMAIL</label>
                <input
                  type="email"
                  id="email"
                  className={`form-control ${emailFormik.touched.email && emailFormik.errors.email ? 'is-invalid' : ''}`}
                  placeholder="Nhập email của bạn"
                  onChange={(e) => {
                    emailFormik.setFieldValue('email', e.target.value);
                    emailFormik.setFieldTouched('email', true, false);
                  }}
                  onBlur={emailFormik.handleBlur}
                  value={emailFormik.values.email}
                />
                {emailFormik.touched.email && emailFormik.errors.email && (
                  <div className="invalid-feedback">{emailFormik.errors.email}</div>
                )}
              </div>
              {error && <div className="alert alert-danger">{error}</div>}
              <button
                style={{ marginTop: '50px' }}
                type="submit"
                className="btn btn-primary w-100 mb-3"
                disabled={!emailFormik.isValid || !emailFormik.dirty}
              >
                {isLoading ? <CircularProgress size={24} color="inherit" /> : 'Tiếp tục'}
              </button>

            </form>
          </div>
        </div>
      </div>
      <div className="col-md-5 background">
        <div className="overlay"></div>
      </div>
    </div>
  );
};

================
File: src/app/(authentication)/forgot-password/libs/hooks/useForgotPasswordForm.tsx
================
import { useState } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import axios, { AxiosError } from 'axios';
import { useRouter } from 'next/navigation';
import { ErrorResponse } from '@/types/ErrorResponse';
import { OtpConstants } from '@/app/(authentication)/verify-otp/libs/constants/otpConstants';

export const useForgotPasswordForm = () => {
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const emailFormik = useFormik({
    initialValues: { email: '' },
    validationSchema: Yup.object({
      email: Yup.string()
        .required('Bạn chưa nhập email!')
        .matches(/^[^\s@]+@[^\s@]+\.[^\s@]+$/, 'Email không hợp lệ!')
    }),
    validateOnChange: true,
    validateOnBlur: true,
    validateOnMount: true,
    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        const result = await axios.post('/api/user/forgot-password', values);
        if (result.status === 200) {
          setError('');
          localStorage.setItem('verifyData', JSON.stringify({
            ...values,
            request_token: result.data.data.request_token,
            remaining_attempts: result.data.data.remaining_attempts,
            resend_allowed_in: result.data.data.resend_allowed_in,
            type: OtpConstants.FORGOT_PASSWORD,
          }));
          router.push('/verify-otp');
        }
      } catch (err) {
        if (axios.isAxiosError(err)) {
          const error = err as AxiosError<ErrorResponse>;
          setError(error.response?.data?.message || 'Gửi mã OTP thất bại');
        } else {
          setError('Gửi mã OTP thất bại');
        }
      } finally {
        setIsLoading(false);
      }
    }
  });

  return {
    error,
    isLoading,
    emailFormik,
  };
};

================
File: src/app/(authentication)/forgot-password/page.tsx
================
import { ForgotPasswordForm } from "./components/forgotPasswordForm";

const ForgotPasswordPage = () => {
  return (
    <div className="forgot-password-page">
      <ForgotPasswordForm />
    </div>
  );
};

export default ForgotPasswordPage;

================
File: src/app/(authentication)/layout.tsx
================
export default function RootLayout({
    children,
  }: {
    children: React.ReactNode
  }) {
    return (
      <html lang="en">
        <body>
          <main>{children}</main>
        </body>
      </html>
    )
  }

================
File: src/app/(authentication)/login/components/loginForm.tsx
================
"use client";

import { CircularProgress, IconButton } from '@mui/material';
import { Icon } from '@iconify/react';
import 'bootstrap/dist/css/bootstrap.min.css';
import '@/styles/admin/pages/Login.css';
import { useLoginForm } from '../libs/hooks/useLoginForm';
import Link from 'next/link';
import Image from 'next/image'

export const LoginForm = () => {
  const {
    showPassword,
    setShowPassword,
    error,
    setError,
    isLoading,
    handleGoogleLogin,
    formik,
  } = useLoginForm();

  if (error) {
    if (error=="SERVER_DOWN") {
      throw new Error(error);
    }
  }

  return (
    <div>
      <div className="row">
        <div className="col-lg-7 col-md-12 d-flex align-items-center justify-content-center left-pane">
          <div className="w-75">
            <div className="login-form">
              <div className="login-container d-flex flex-column align-items-center">
                <Image
                  src="/images/logo.png"
                  alt="EveBox Logo"
                  width={50}
                  height={50}
                  className="logo"
                />
                <h3 className='mt-3'><strong>Đăng nhập EveBox</strong></h3>
              </div>
              <form onSubmit={formik.handleSubmit}>
                <div className="mb-3 short-input">
                  <label htmlFor="email" className="form-label font-style">Email</label>
                  <input
                    type="email"
                    id="email"
                    name='email'
                    className={`form-control ${formik.touched.email && formik.errors.email ? 'is-invalid' : ''}`}
                    placeholder="Nhập email của bạn"
                    style={{ height: '46px' }}
                    onChange={(e) => {
                      if (error) setError('');
                      formik.handleChange(e);
                    }}
                    onBlur={formik.handleBlur}
                    value={formik.values.email}
                  />
                  {/* Hiển thị thông báo lỗi */}
                  {formik.touched.email && formik.errors.email && (
                    <div className="text-danger" style={{ fontSize: '12px' }}>
                      {formik.errors.email}
                    </div>
                  )}
                </div>
                <div className="mb-3 short-input">
                  <label htmlFor="password" className="form-label font-style">Mật khẩu</label>
                  <div className='position-relative'>
                    <input
                      type={showPassword ? 'text' : 'password'}
                      id="password"
                      name='password'
                      className={`form-control pr-10 ${formik.touched.password && formik.errors.password ? 'is-invalid' : ''}`}
                      placeholder="Nhập mật khẩu"
                      style={{ height: '46px', paddingRight: '50px' }}
                      onChange={(e) => {
                        if (error) setError('');
                        formik.handleChange(e);
                      }}
                      onBlur={formik.handleBlur}
                      value={formik.values.password}
                    />
                    <IconButton
                      className='position-absolute eye-btn'
                      aria-label="Toggle password visibility"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      <Icon icon={showPassword ? "ph:eye-light" : "ph:eye-closed-light"} width="20px" color="#aaaaaa" />
                    </IconButton>
                  </div>
                  {/* Hiển thị thông báo lỗi  */}
                  {formik.touched.password && formik.errors.password && (
                    <div className="text-danger" style={{ fontSize: '12px' }}>
                      {formik.errors.password}
                    </div>
                  )}
                </div>
                <div className="d-flex justify-content-between align-items-center mb-3 short-input">
                  <div className="d-flex align-items-center">
                    <input
                      type="checkbox"
                      id="agree"
                      className="form-check-input me-2"
                      {...formik.getFieldProps('agree')}
                    />
                    <label htmlFor="agree" className="form-check-label m-0">
                      Ghi nhớ đăng nhập
                    </label>
                  </div>
                  <a href="/forgot-password" className="text-decoration-none font-forget">
                    Quên mật khẩu?
                  </a>
                </div>

                <div className="short-input">
                  {error && error !== '' && <div className="alert alert-danger error-msg text-center">{error}</div>}
                  <button type="submit" className="btn btn-login w-100" style={{ marginBottom: '20px', marginTop: '10px' }} >
                    {isLoading ? (
                      <CircularProgress size={24} />
                    ) : (
                      'Đăng nhập'
                    )}
                  </button>
                </div>
                <div className="text-center short-input">
                  <span style={{ color: 'white' }}>Bạn chưa có tài khoản? </span>
                  <Link href="/register" style={{ color: 'white', textDecoration: 'none', fontWeight: 'bold' }}>
                    Đăng ký ngay
                  </Link>
                  <p style={{ color: 'white', marginBottom: '20px', marginTop: '5px' }}>Hoặc</p>
                  <Link style={{ textDecoration: 'none' }} href="#">
                    <button className="google-button" style={{ marginBottom: '20px' }} onClick={handleGoogleLogin} disabled={isLoading}>
                      <Icon icon="flat-color-icons:google" width="20px" color="#fff" />
                      {/* Đăng nhập với Google */}
                      Đăng nhập với Google
                    </button>
                  </Link>
                </div>
              </form>
            </div>
          </div>
        </div>
        <div className="col-lg-5 col-md-12 backdground">
          <div className="overlay"></div>
        </div>
      </div>
    </div>
  );
};

================
File: src/app/(authentication)/login/libs/hooks/useLoginForm.ts
================
import { useState/* , useContext */, useEffect } from 'react';
import axios/* , { AxiosError } */ from 'axios';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useRouter } from 'next/navigation';
// import { AuthContext } from '../../../../../contexts/auth.context';
// import { ErrorResponse } from '../../../../../types/ErrorResponse';
import { signIn } from 'next-auth/react';

export const useLoginForm = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  // const { login } = useContext(AuthContext);

  const handleGoogleLogin = () => {
    try {
      setIsLoading(true);
      const width = 500;
      const height = 600;
      const left = window.screenX + (window.outerWidth - width) / 2;
      const top = window.screenY + (window.outerHeight - height) / 2;

      const popup = window.open(
        `${process.env.NEXT_PUBLIC_API_URL}/api/user/google`,
        'Google Login',
        `width=${width},height=${height},left=${left},top=${top}`
      );

      window.addEventListener('message', (event) => {
        if (event.origin === process.env.NEXT_PUBLIC_API_URL) {
          const { type/* , data */, error } = event.data;

          if (type === 'GOOGLE_LOGIN_SUCCESS') {
            // const { access_token } = data;
            // login(access_token);
            router.push('/');
            popup?.close();
          } else if (type === 'GOOGLE_LOGIN_ERROR') {
            setError(error || 'Login failed');
            popup?.close();
          }
        }
      });
    } catch (err) {
      setError(`Đã xảy ra lỗi khi đăng nhập với Google: ${err}.`);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const code = urlParams.get('code');

    if (code) {
      setIsLoading(true);
      axios
        .get(`${process.env.NEXT_PUBLIC_API_URL}/api/user/google/callback`, {
          params: { code },
          withCredentials: true,
        })
        .then((response) => {
          const { access_token, refresh_token } = response.data.data;

          if (access_token) {
            // login(access_token);
            localStorage.setItem('refresh_token', refresh_token); // Lưu refresh_token vào localStorage
            router.push('/');
          } else {
            setError('Không nhận được access token từ Google.');
          }
        })
        .catch(() => {
          setError('Đăng nhập Google thất bại');
        })
        .finally(() => {
          setIsLoading(false);
        });
    }
  }, [router]);

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema: Yup.object({
      email: Yup.string().email("Email không hợp lệ").required("Yêu cầu nhập email"),
      password: Yup.string().required("Yêu cầu nhập mật khẩu"),
    }),
    onSubmit: async (values) => {
      try {
        setIsLoading(true);
        const res = await signIn("credentials", {
          redirect: false,
          email: values.email,
          password: values.password,
        });

        if (res?.status === 200) {
          router.push('/');
        } else if (res?.status === 401) {
          setError('Email không tồn tại hoặc mật khẩu không chính xác!');
        } else {
          setError('Đăng nhập thất bại: ' + res?.error);
        }
      } catch (error) {
        console.log(error);
        setError("Đăng nhập thất bại, vui lòng thử lại.");
      } finally {
        setIsLoading(false);
      }
    },
  });

  return {
    showPassword,
    setShowPassword,
    error,
    setError,
    isLoading,
    handleGoogleLogin,
    formik,
  };
};

================
File: src/app/(authentication)/login/page.tsx
================
import React from 'react';
import { LoginForm } from './components/loginForm';

const LoginPage = async () => {
  return (
    <div className="login-page">
      <LoginForm />
    </div>
  );
};

export default LoginPage;

================
File: src/app/(authentication)/register/components/registerForm.tsx
================
"use client";

import { IconButton, CircularProgress } from '@mui/material';
import { Icon } from '@iconify/react';
import Link from 'next/link';
import 'bootstrap/dist/css/bootstrap.min.css';
import '@/styles/admin/pages/Register.css';
import { useRegisterForm } from '../libs/hooks/useRegisterForm';
import Image from 'next/image'

export const RegisterForm = () => {
    const {
        showPassword,
        setShowPassword,
        showRePassword,
        setShowRePassword,
        error,
        isLoading,
        formik,
    } = useRegisterForm();

    return (
        <div className='container-fluid vh-100 p-0'>
            <div className='row h-100 m-0'>
                {/* Left pane */}
                <div className={`col-md-5 d-flex align-items-center justify-content-center left-register-pane`}>
                    <div className="text-center">
                        <h2>Chào mừng bạn quay lại!</h2>
                        <p>Để không bỏ lỡ sự kiện nào, hãy cho chúng tôi biết thông tin của bạn</p>
                        <Link href="/login">
                            <button className="btn btn-light login-btn">Đăng nhập</button>
                        </Link>
                    </div>
                </div>

                {/* Right pane - Form content */}
                <div className="col-md-7 d-flex align-items-center justify-content-center right-register-pane">
                    <div className="w-75">
                        <div className="register-form">
                            <div className="register-container d-flex flex-column align-items-center">
                                <Image
                                    src="/images/logo.png"
                                    alt="EveBox Logo"
                                    width={50}
                                    height={50} 
                                    className="mb-3 img-fluid logo"
                                />
                                <h3><strong>Đăng ký ngay với EveBox</strong></h3>
                            </div>
                            <form onSubmit={formik.handleSubmit}>
                                <div className="mb-3">
                                    <label htmlFor="email" className="form-label font-style">Email</label>
                                    <input
                                        type="email"
                                        id="email"
                                        placeholder="Nhập email của bạn"
                                        className={`form-control ${formik.touched.email && formik.errors.email ? 'is-invalid' : ''}`}
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.email}
                                    />
                                    {formik.touched.email && formik.errors.email && (
                                        <div className="text-danger" style={{ fontSize: '12px' }}>
                                            {formik.errors.email}
                                        </div>
                                    )}
                                </div>

                                <div className="d-flex mb-3">
                                    <div className="me-2 w-50">
                                        <label htmlFor="name" className="form-label font-style">Tên</label>
                                        <input
                                            type="text"
                                            id="name"
                                            placeholder="Nhập tên của bạn"
                                            className={`form-control ${formik.touched.name && formik.errors.name ? 'is-invalid' : ''}`}
                                            onChange={formik.handleChange}
                                            onBlur={formik.handleBlur}
                                            value={formik.values.name}
                                        />
                                        {formik.touched.name && formik.errors.name && (
                                            <div className="text-danger" style={{ fontSize: '12px' }}>
                                                {formik.errors.name}
                                            </div>
                                        )}
                                    </div>
                                    <div className="w-50">
                                        <label htmlFor="phone" className="form-label font-style">Số điện thoại</label>
                                        <input
                                            type="text"
                                            id="phone"
                                            placeholder="Nhập số điện thoại của bạn"
                                            className={`form-control ${formik.touched.phone && formik.errors.phone ? 'is-invalid' : ''}`}
                                            onChange={formik.handleChange}
                                            onBlur={formik.handleBlur}
                                            value={formik.values.phone}
                                        />
                                        {formik.touched.phone && formik.errors.phone && (
                                            <div className="text-danger" style={{ fontSize: '12px' }}>
                                                {formik.errors.phone}
                                            </div>
                                        )}
                                    </div>
                                </div>

                                <div className="d-flex mb-3">
                                    <div className="me-2 w-50">
                                        <label htmlFor="password" className="form-label font-style">Mật khẩu</label>
                                        <div className="position-relative">
                                            <input
                                                type={showPassword ? 'text' : 'password'}
                                                id="password"
                                                placeholder="Nhập mật khẩu"
                                                className={`form-control ${formik.touched.password && formik.errors.password ? 'is-invalid' : ''}`}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.password}
                                            />
                                            {!formik.errors.password && (
                                                <IconButton
                                                    className="position-absolute eye-btn"
                                                    aria-label="Toggle password visibility"
                                                    onClick={() => setShowPassword(!showPassword)}
                                                >
                                                    <Icon icon={showPassword ? "ph:eye-light" : "ph:eye-closed-light"} width="20px" color="#aaaaaa" />
                                                </IconButton>
                                            )}
                                        </div>
                                        {formik.touched.password && formik.errors.password && (
                                            <div className="text-danger" style={{ fontSize: '12px' }}>
                                                {formik.errors.password}
                                            </div>
                                        )}
                                    </div>
                                    <div className="w-50">
                                        <label htmlFor="re_password" className="form-label font-style">Nhập lại mật khẩu</label>
                                        <div className="position-relative">
                                            <input
                                                type={showRePassword ? 'text' : 'password'}
                                                id="re_password"
                                                name='re_password'
                                                placeholder="Nhập lại mật khẩu"
                                                className={`form-control ${formik.touched.re_password && formik.errors.re_password ? 'is-invalid' : ''}`}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.re_password}
                                            />
                                            {!formik.errors.re_password && (
                                                <IconButton
                                                    className="position-absolute eye-btn"
                                                    aria-label="Toggle password visibility"
                                                    onClick={() => setShowRePassword(!showRePassword)}
                                                >
                                                    <Icon icon={showRePassword ? "ph:eye-light" : "ph:eye-closed-light"} width="20px" color="#aaaaaa" />
                                                </IconButton>
                                            )}
                                        </div>
                                        {formik.touched.re_password && formik.errors.re_password && (
                                            <div className="text-danger" style={{ fontSize: '12px' }}>
                                                {formik.errors.re_password}
                                            </div>
                                        )}
                                    </div>
                                </div>

                                <div className="form-check mb-3">
                                    <input
                                        type="checkbox"
                                        id="agree"
                                        className="form-check-input"
                                        {...formik.getFieldProps('agree')}
                                    />
                                    <label htmlFor="agree" className="form-check-label">
                                        Tôi đồng ý với tất cả <a href="" style={{ color: 'white', cursor: 'pointer' }}>Các điều khoản</a> và <a href="" style={{ color: 'white', cursor: 'pointer' }}>Chính sách bảo mật</a>
                                    </label>
                                    {formik.touched.agree && formik.errors.agree && (
                                        <div className="text-danger">{formik.errors.agree}</div>
                                    )}
                                </div>
                                {error && error !== '' && <div className="alert alert-danger error-msg text-center">{error}</div>}
                                <button type="submit" className="btn w-100 mb-3">
                                    {/* {isLoading ? <div className="spinner-border text-light" role="status"><span className="visually-hidden">Loading...</span></div> : 'Đăng ký'} */}
                                    {isLoading ? <CircularProgress size={24} color="inherit" /> : 'Đăng ký'}
                                </button>
                                <div className="text-center">
                                    <p style={{ color: 'white' }}>Hoặc</p>
                                    <Link style={{ textDecoration: 'none' }} href="#">
                                        <button className="google-button">
                                            <Icon icon="flat-color-icons:google" width="20px" color="#fff" />
                                            Đăng nhập với Google
                                        </button>
                                    </Link>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

================
File: src/app/(authentication)/register/libs/hooks/useRegisterForm.ts
================
'use client'

import { useState } from 'react';
import axios, { AxiosError } from 'axios';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useRouter } from 'next/navigation';
import { OtpConstants } from '@/app/(authentication)/verify-otp/libs/constants/otpConstants';
import { ErrorResponse } from '@/types/ErrorResponse';

export const useRegisterForm = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [showRePassword, setShowRePassword] = useState(false);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const formik = useFormik({
    initialValues: {
      name: '',
      phone: '',
      email: '',
      password: '',
      re_password: '',
      role_id: 3,
      province_id: [],
      agree: false
    },
    validationSchema: Yup.object({
      name: Yup.string().required('Yêu cầu nhập tên'),
      phone: Yup.string().min(10, 'Số điện thoại không hợp lệ').required('Yêu cầu nhập số điện thoại'),
      email: Yup.string().email('Email không hợp lệ').required('Yêu cầu nhập email'),
      password: Yup.string().min(6, 'Mật khẩu tối thiểu 6 ký tự').required('Yêu cầu nhập mật khẩu'),
      re_password: Yup.string()
        .oneOf([Yup.ref('password')], 'Mật khẩu không khớp')
        .required('Yêu cầu nhập lại mật khẩu'),
      agree: Yup.boolean().oneOf([true], 'Bạn phải đồng ý với các điều khoản'),
    }),
    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        const result = await axios.post('/api/user/register', values);
        if (result.status === 200) {
          setError('');
          localStorage.setItem('verifyData', JSON.stringify({
            ...values,
            request_token: result.data.data.request_token,
            remaining_attempts: result.data.data.remaining_attempts,
            resend_allowed_in: result.data.data.resend_allowed_in,
            type: OtpConstants.REGISTER,
          }));
          router.push('/verify-otp');
        }
      } catch (err) {
        if (axios.isAxiosError(err)) {
          const error = err as AxiosError<ErrorResponse>;
          setError(error.response?.data?.message || 'Đăng ký thất bại');
        } else {
          setError('Đăng ký thất bại');
        }
      } finally {
        setIsLoading(false);
      }
    },
  });

  return {
    showPassword,
    setShowPassword,
    showRePassword,
    setShowRePassword,
    error,
    isLoading,
    formik,
  };
};

================
File: src/app/(authentication)/register/page.tsx
================
'use client'

import React from 'react';
import { RegisterForm } from './components/registerForm';

const RegisterPage = () => {
  return (
    <div className="register-page">
      <RegisterForm />
    </div>
  );
};

export default RegisterPage;

================
File: src/app/(authentication)/reset-password/components/resetPasswordForm.tsx
================
"use client";

import Link from 'next/link';
import { useResetPasswordForm } from '../libs/hooks/useResetPasswordForm';
import { Icon } from '@iconify/react';
import '@/styles/admin/pages/ForgotPassword.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import { IconButton } from '@mui/material';
import Image from 'next/image';

export const ResetPasswordForm = () => {
    const {
        showPassword,
        setShowPassword,
        showRePassword,
        setShowRePassword,
        error,
        formik,
    } = useResetPasswordForm();

    return (
        <div className="row">
            <div className="col-md-7 d-flex align-items-center justify-content-center left-pane">
                <Link href="/login" className="back-link">&lt; Quay lại Đăng nhập</Link>
                <div className="w-75">
                    <div className="form">
                        <div className="container d-flex flex-column align-items-center">
                            <Image
                                src="/images/logo.png"
                                alt="EveBox Logo"
                                width={50}
                                height={50}
                                className="logo"
                            />
                            <h3 ><strong>Đặt lại mật khẩu</strong></h3>
                            <p className="subheading">Mật khẩu trước của bạn đã được thiết lập lại. Vui lòng đặt mật khẩu mới cho tài khoản của bạn!</p>
                        </div>
                        <form onSubmit={formik.handleSubmit}>
                            <div className="mb-3">
                                <label htmlFor="email" className="form-label bold-label">NHẬP MẬT KHẨU MỚI</label>
                                <div className="position-relative">
                                    <input
                                        type={showPassword ? 'text' : 'password'}
                                        id="pasword"
                                        className={`form-control ${formik.touched.password && formik.errors.password ? 'is-invalid' : ''}`}
                                        placeholder="Nhập mật khẩu"
                                        onChange={(e) => {
                                            formik.setFieldValue('password', e.target.value);
                                            formik.setFieldTouched('password', true, false);
                                        }}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.password}
                                    />
                                    <IconButton
                                        className='position-absolute eye-btn'
                                        aria-label="Toggle password visibility"
                                        onClick={() => setShowPassword(!showPassword)}
                                    >
                                        <Icon icon={showPassword ? "ph:eye-light" : "ph:eye-closed-light"} width="20px" color="#aaaaaa" />
                                    </IconButton>
                                </div>
                                {formik.touched.password && formik.errors.password && (
                                    <div className="invalid-feedback">{formik.errors.password}</div>
                                )}
                            </div>
                            {error && <div className="alert alert-danger">{error}</div>}

                            <div className="mb-3">
                                <label htmlFor="email" className="form-label bold-label">NHẬP LẠI MẬT KHẨU MỚI</label>
                                <div className="position-relative">
                                    <input
                                        type={showRePassword ? 'text' : 'password'}
                                        id="re_password"
                                        className={`form-control ${formik.touched.re_password && formik.errors.re_password ? 'is-invalid' : ''}`}
                                        placeholder="Nhập lại mật khẩu"
                                        onChange={(e) => {
                                            formik.setFieldValue('re_password', e.target.value);
                                            formik.setFieldTouched('re_password', true, false);
                                        }}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.re_password}
                                    />
                                    <IconButton
                                        className='position-absolute eye-btn'
                                        aria-label="Toggle password visibility"
                                        onClick={() => setShowRePassword(!showRePassword)}
                                    >
                                        <Icon icon={showRePassword ? "ph:eye-light" : "ph:eye-closed-light"} width="20px" color="#aaaaaa" />
                                    </IconButton>
                                </div>
                                {formik.touched.re_password && formik.errors.re_password && (
                                    <div className="invalid-feedback">{formik.errors.re_password}</div>
                                )}
                            </div>
                            {error && <div className="alert alert-danger">{error}</div>}

                            <button
                                style={{ marginTop: '50px' }}
                                type="submit"
                                className="btn btn-primary w-100 mb-3"
                                disabled={!formik.isValid || !formik.dirty}
                            >
                                Đặt lại mật khẩu
                            </button>
                        </form>
                    </div>
                </div>
            </div>
            <div className="col-md-5 background">
                <div className="overlay"></div>
            </div>
        </div>
    );
};

================
File: src/app/(authentication)/reset-password/libs/hooks/useResetPasswordForm.tsx
================
import { useState, useEffect } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import axios, { AxiosError } from 'axios';
import { useRouter } from 'next/navigation';
import { ErrorResponse } from '@/types/ErrorResponse';

export const useResetPasswordForm = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [showRePassword, setShowRePassword] = useState(false);
  const [error, setError] = useState('');
  const [resetToken, setResetToken] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    const token = sessionStorage.getItem('reset_token');
    if (token) {
      setResetToken(token);
    } else {
      setError('Không tìm thấy mã yêu cầu thay đổi mật khẩu.');
    }
  }, []);

  const formik = useFormik({
    initialValues: {
      password: '',
      re_password: '',
    },
    validationSchema: Yup.object({
      password: Yup.string().min(6, 'Mật khẩu tối thiểu 6 ký tự').required('Yêu cầu nhập mật khẩu'),
      re_password: Yup.string()
        .oneOf([Yup.ref('password')], 'Mật khẩu không khớp')
        .required('Yêu cầu nhập lại mật khẩu'),
    }),
    onSubmit: async (values) => {
      if (!resetToken) {
        setError('Không tìm thấy mã yêu cầu thay đổi mật khẩu.');
        return;
      }

      try {
        const result = await axios.post('/api/user/reset-password', {
          newPassword: values.password,
          confirmPassword: values.re_password,
          resetToken
        });

        if (result.status === 200) {
          router.push('/login');
        }
      } catch (err) {
        if (axios.isAxiosError(err)) {
          const error = err as AxiosError<ErrorResponse>;
          setError(error.response?.data?.message || 'Đổi mật khẩu thất bại');
        } else {
          setError('Đổi mật khẩu thất bại');
        }
      }
    },
  });

  return {
    showPassword,
    setShowPassword,
    showRePassword,
    setShowRePassword,
    error,
    formik,
  };
};

================
File: src/app/(authentication)/reset-password/page.tsx
================
import { ResetPasswordForm } from "./components/resetPasswordForm";

const ResetPasswordPage = () => {
  return (
    <div className="reset-password-page">
      <ResetPasswordForm />
    </div>
  );
};

export default ResetPasswordPage;

================
File: src/app/(authentication)/verify-otp/components/verifyOtpForm.tsx
================
"use client";

import { Icon } from '@iconify/react';
import { Button, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, CircularProgress } from '@mui/material';
import Link from 'next/link';
import { useVerifyOTPForm } from '../libs/hooks/useVerifyOtpForm';
import 'bootstrap/dist/css/bootstrap.min.css';
import '@/styles/admin/pages/VerifyOTP.css';
import Image from 'next/image';

export const VerifyOTPForm = () => {
  const {
    otp,
    error,
    email,
    timeLeft,
    isResendAllowed,
    isVerified,
    isOpen,
    isLoading,
    formatTime,
    handleKeyDown,
    handleChange,
    handleResendOtp,
    handleCloseDialog,
    formik,
  } = useVerifyOTPForm();

  return (
    <div className='container-fluid vh-100 p-0'>
      <div className='row h-100 m-0'>
        <div className={`col-md-5 d-flex align-items-center justify-content-center left-register-pane`}>
          <div className="text-center">
            <h2>Chào mừng bạn quay lại!</h2>
            <p>Để không bỏ lỡ sự kiện nào, hãy cho chúng tôi biết thông tin của bạn</p>
            <Link href="/login">
              <button className="btn btn-light login-btn">Đăng nhập</button>
            </Link>
          </div>
        </div>
        <div className="col-md-7 d-flex align-items-center justify-content-center right-register-pane">
          <div className="w-75">
            <div className='verify-form'>
              <div className="verify-container d-flex flex-column align-items-center">
                <Image
                  src="/images/logo.png"
                  alt="EveBox Logo"
                  width={50}
                  height={50}
                  className="logo"
                />
                <h3><strong>Xác thực OTP</strong></h3>
                <br></br>
                <h4><strong>Nhập mã OTP gồm 6 chữ số</strong></h4>
                <span className='verify-msg-1'>Chúng tôi đã gửi mã OTP đến email:</span>
                <span className='verify-msg-2'>{email !== '' ? email : ''}</span>
              </div>
              <form onSubmit={formik.handleSubmit}>
                <div className="otp-area d-flex flex-column align-items-center">
                  <label htmlFor="otp" className="form-label font-style text-center">Mã OTP</label>
                  <div className='otp-nums align-items-center'>
                    {otp.map((data, index) => (
                      <input
                        key={index}
                        type="text"
                        maxLength={1}
                        className="otp-input"
                        onKeyDown={(e) => handleKeyDown(e, index)}
                        onChange={(e) => handleChange(e, index)}
                        value={data}
                      />
                    ))}
                  </div>
                  {formik.touched.otp && formik.errors.otp && (
                    <div className="text-danger" style={{ fontSize: '12px' }}>
                      {Array.isArray(formik.errors.otp) ? formik.errors.otp.join(', ') : formik.errors.otp}
                    </div>
                  )}
                </div>
                {error && error !== '' && <div className="alert alert-danger error-msg text-center">{error}</div>}
                <div className="text-center">
                  <span style={{ fontSize: '12px', color: 'white' }}>Lưu ý: Bạn vui lòng kiểm tra tất cả các thư mục của email<br></br>(Hộp thư đến, Quảng cáo, Thư rác,...)</span>
                  <br></br>
                  <p style={{ color: 'white' }}>Bạn không nhận được mã OTP? <strong onClick={handleResendOtp} className={`resend-btn ${isResendAllowed ? '' : 'disabled'}`}>Gửi lại mã</strong></p>
                </div>
                <div className="otp-timer d-flex align-items-center justify-content-center">
                  <span>{formatTime(timeLeft)}</span>
                </div>
                <button type="submit" className="btn w-100 mb-3">
                  {isLoading ? <CircularProgress size={24} color="inherit" /> : 'Xác minh OTP'}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
      <Dialog open={isOpen} className="custom-dialog">
        <DialogTitle>
          <div className="dialog-title">
            {isVerified ? 'Đăng ký thành công' : 'Đăng ký thất bại'}
            <IconButton
              className="close-button"
              onClick={handleCloseDialog}
              aria-label="Close"
            >
              <Icon icon="ph:x" width="24px" />
            </IconButton>
          </div>
        </DialogTitle>
        <DialogContent>
          <div className="dialog-content">
            <Icon icon={isVerified ? 'ph:check-circle-fill' : 'fluent-color:error-circle-24'} width="48px" color="#22C55E" />
            <h3>{isVerified ? 'Thành công' : 'Thất bại'}</h3>
            <br />
            <p className="subtext">Kích hoạt tài khoản {isVerified ? 'thành công' : 'thất bại'}!</p>
          </div>
        </DialogContent>
        <DialogActions style={{ marginBottom: '30px' }} className='d-flex flex-column justify-content-center'>
          <Button
            onClick={handleCloseDialog}
            className="action-button"
          >
            Về trang Đăng nhập
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

================
File: src/app/(authentication)/verify-otp/libs/constants/otpConstants.ts
================
export const OtpConstants = {
    FORGOT_PASSWORD: 'FORGOT_PASSWORD',
    REGISTER: 'REGISTER',
}

================
File: src/app/(authentication)/verify-otp/libs/hooks/useVerifyOtpForm.ts
================
import { useState, useEffect } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import axios, { AxiosError } from 'axios';
import { useRouter } from 'next/navigation';
import { OtpConstants } from '../constants/otpConstants';
import { ErrorResponse } from '@/types/ErrorResponse';

const TIMELEFT = 60;
const ATTEMPTS = 5;

export const useVerifyOTPForm = () => {
  const [otp, setOtp] = useState(new Array(6).fill(''));
  const [error, setError] = useState('');
  const [email, setEmail] = useState('');
  const [timeLeft, setTimeLeft] = useState(0);
  const [type, setType] = useState<string>(OtpConstants.REGISTER);
  const [isResendAllowed, setIsResendAllowed] = useState(false);
  const [attempts, setAttempts] = useState(0);
  const [cntAttempts, setCntAttempts] = useState(0);
  const [isVerified, setIsVerified] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [requestToken, setRequestToken] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const verifyData = JSON.parse(localStorage.getItem('verifyData') || '{}');
    if (!verifyData) {
      router.push('/register');
      return;
    }

    setEmail(verifyData.email);
    setType(verifyData.type);
    setTimeLeft(verifyData.resend_allowed_in ?? TIMELEFT);
    setAttempts(verifyData.remaining_attempts ?? ATTEMPTS);
    setRequestToken(verifyData.request_token);
  }, [router]);

  useEffect(() => {
    if (timeLeft === 0) {
      setIsResendAllowed(true);
    } else {
      setIsResendAllowed(false);
      const timer = setInterval(() => {
        setTimeLeft(prev => prev - 1);
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [timeLeft]);

  const formatTime = (time: number) => {
    const minutes = Math.floor((time % 3600) / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  };

  const formik = useFormik({
    initialValues: { otp: '' },
    validationSchema: Yup.object({
      otp: Yup.string().required('Yêu cầu nhập mã OTP'),
    }),
    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        const result = await axios.post('/api/user/otps/verify-otp', {
          email,
          otp: values.otp,
          request_token: requestToken,
          type: type,
        });
        
        if (result.status === 200) {
          setIsVerified(true);
          setError('');
        }
        setIsOpen(true);
      } catch (err) {
        setIsLoading(false);
        if (axios.isAxiosError(err)) {
          const error = err as AxiosError<ErrorResponse>;
          setError(error.response?.data?.message || 'Xác thực thất bại');
        } else {
          setError('Xác thực thất bại');
        }
      } finally {
        setIsLoading(false);
      }
    },
  });

  function handleKeyDown(e: React.KeyboardEvent<HTMLInputElement>, index: number) {
    if (e.key === 'Backspace') {
      const newOtp = [...otp];
      if (!newOtp[index] && index > 0) {
        e.preventDefault();
        newOtp[index - 1] = '';
        setOtp(newOtp);
  
        const prevInput = (e.target as HTMLInputElement).previousSibling as HTMLInputElement | null;
        if (prevInput) prevInput.focus();
      }
    }
  } 

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
    if (isNaN(Number(e.target.value))) return;
    
    const newOtp = [...otp];
    newOtp[index] = e.target.value;
    setOtp(newOtp);
    formik.setFieldValue('otp', newOtp.join(''));
    
    if (e.target.value && e.target.nextElementSibling) {
      (e.target.nextElementSibling as HTMLElement).focus();
    }
  };

  const handleResendOtp = async () => {
    setError('');
    setCntAttempts(cntAttempts + 1);

    if (cntAttempts >= attempts) {
      setIsResendAllowed(false);
      return;
    }

    try {
      const result = await axios.post('/api/user/otps/resend-otp', {
        email,
        type,
        request_token: requestToken,
      });

      if (result.status === 200) {
        setTimeLeft(result.data.resend_allowed_in ?? TIMELEFT);
        setAttempts(result.data.remaining_attempts ?? ATTEMPTS);
        setError('');
      } else {
        setError(`Gửi mã OTP thất bại: ${result.data.message}`);
        alert(result.data.message);
      }
    } catch (err) {
      setError(`Gửi mã OTP thất bại, vui lòng thử lại sau: ${err}.`);
    }
  };

  // const handleResendOtp = async () => {
  //   setError('');
  //   setCntAttempts(cntAttempts + 1);

  //   if (cntAttempts >= attempts) {
  //     setIsResendAllowed(false);
  //     return;
  //   }

  //   const verifyData = JSON.parse(localStorage.getItem('verifyData') || '{}');
  //   const values = {
  //     name: verifyData.name,
  //     phone: verifyData.phone,
  //     email: verifyData.email,
  //     password: verifyData.password,
  //     re_password: verifyData.re_password,
  //     agree: verifyData.agree,
  //     role_id: verifyData.role_id,
  //     province_id: verifyData.province_id,
  //   }

  //   const result = await axios.post(`/api/user/register`, values);

  //   if (result.status === 200 || result.status === 201) {
  //     setTimeLeft(result.data.data.resend_allowed_in ?? TIMELEFT);
  //     setAttempts(result.data.data.remaining_attempts ?? ATTEMPTS);
  //     setError('');
  //   }
  //   else {
  //     setError(`Gửi mã OTP thất bại: ${result.data.message}`);
  //     alert(result.data.message);
  //   }
  // };

  const handleCloseDialog = () => {
    setIsOpen(false);
    router.push('/login');
  };

  return {
    otp,
    error,
    email,
    timeLeft,
    isResendAllowed,
    isVerified,
    isOpen,
    isLoading,
    formatTime,
    handleKeyDown,
    handleChange,
    handleResendOtp,
    handleCloseDialog,
    formik,
  };
};

================
File: src/app/(authentication)/verify-otp/page.tsx
================
import { VerifyOTPForm } from "./components/verifyOtpForm";

const VerifyOTPPage = () => {
  return (
    <div className="verify-otp-page">
      <VerifyOTPForm />
    </div>
  );
};

export default VerifyOTPPage;

================
File: src/app/(dashboard)/components/common/footer.tsx
================
"use client"
console.log('footer - Rendering on client:', typeof window !== 'undefined');

import { Linkedin, Instagram, Facebook } from 'lucide-react';

const Footer = () => {
    return (
      <footer className="w-[100vw] bg-sky-900 text-white mt-12 sm:mt-20 py-8 sm:py-12 relative left-[calc(-50vw+50%)]">
        {/* Newsletter Section */}
        <div className="text-center mb-8 sm:mb-12">
          <h2 className="text-xl sm:text-2xl font-bold mb-6 sm:mb-8">EveBox</h2>
          <div className="flex flex-col sm:flex-row items-center justify-center max-w-md mx-auto gap-2 px-4">
            <input 
              type="email" 
              placeholder="Nhập email của bạn" 
              className="flex-1 px-4 py-2 rounded-md text-gray-800 w-full sm:w-auto"
            />
            <button className="bg-teal-200 text-teal-950 px-4 sm:px-6 py-2 rounded-md hover:bg-teal-100 whitespace-nowrap w-full sm:w-auto">
              Nhận tin mới
            </button>
          </div>
        </div>

        {/* Navigation Links */}
        <div className="flex flex-wrap justify-center gap-4 sm:gap-8 mb-8">
          <a href="#" className="no-underline	text-white over:text-teal-200">Trang chủ</a>
          <a href="#" className="no-underline	text-white hover:text-teal-200">Giới thiệu</a>
          <a href="#" className="no-underline	text-white hover:text-teal-200">Dịch vụ</a>
          <a href="#" className="no-underline	text-white hover:text-teal-200">Liên hệ</a>
          <a href="#" className="no-underline	text-white hover:text-teal-200">Hỏi đáp</a>
        </div>

        {/* Divider and Bottom Section */}
        <div className="border-t-2 border-slate-400">
          <div className="max-w-6xl mx-auto px-4 pt-8">
            <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
              <div className="flex gap-4">
                <button className="bg-teal-200 text-teal-950 px-4 py-2 rounded-md">Tiếng Việt</button>
                <button className="hover:text-teal-200">English</button>
              </div>
              <div className="flex gap-6">
                <a href="#" className="no-underline	text-white hover:text-teal-200">
                  <Linkedin size={20} />
                </a>
                <a href="#" className="no-underline	text-white hover:text-teal-200">
                  <Instagram size={20} />
                </a>
                <a href="#" className="no-underline	text-white hover:text-teal-200">
                  <Facebook size={20} />
                </a>
              </div>
              <div className="text-xs sm:text-sm">
                Non Copyrighted © 2024 Upload by EveBox
              </div>
            </div>
          </div>
        </div>
      </footer>
    );
};

export default Footer;

================
File: src/app/(dashboard)/components/common/navigationBar.tsx
================
"use client";

import { Menu, ChevronDown, User2Icon } from "lucide-react";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import Sidebar from "./sidebar";
import apiClient from "@/services/apiClient";
import { useSession } from "next-auth/react";
import { UserInfo, UserInfoResponse } from "@/types/model/userInfo";
import Image from "next/image";


const NavigationBar = () => {
  const [isLangOpen, setIsLangOpen] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null); // Replace `any` with a proper type if known
  const [isLoading, setLoading] = useState(false);
  const { data: session } = useSession();
  
  useEffect(() => {
    // Fetch user info when the component mounts
    const fetchUserInfo = async () => {
      setLoading(true);
      try {
        const response = await apiClient.get<UserInfoResponse>("/api/user/me"); // Assuming your API route is /api/me
        setUserInfo(response.data.data);
      } catch (error) {
        console.error("Error fetching user info:", error);
      } finally {
        setLoading(false);
      }
    };

    // Only fetch if session exists
    if (session?.user?.accessToken) {
      fetchUserInfo();
    } else {
      setUserInfo(null);
    }
  }, [session]);

  return (
    <>
      <nav className="fixed top-0 left-0 right-0 bg-sky-900 shadow-lg z-50">
        <div className="w-full px-4 h-16 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <button
              className="text-white p-2 hover:bg-teal-700 rounded-md"
              onClick={() => setIsSidebarOpen(true)}
            >
              <Menu size={24} />
            </button>
            <Link href={"/"} className="flex items-center gap-2">
              <div className="w-18 h-9 rounded">
              <Image
  src="/images/dashboard/logo-icon.png"
  alt="logo"
  width={30} // Adjust as needed
  height={30} // Adjust as needed
  priority // Ensures the logo loads fast
/>

              </div>
              <span className="text-white font-bold text-xl hidden sm:inline">
                EveBox
              </span>
            </Link>
          </div>

          <div className="flex items-center gap-2 sm:gap-4">
            <div className="relative z-50">
              <button
                className="flex items-center gap-1 sm:gap-2 text-white p-2 hover:bg-teal-700 rounded-md"
                onClick={() => setIsLangOpen(!isLangOpen)}
              // eslint-disable-next-line react/jsx-no-comment-textnodes
              >
                <Image
  src="/images/dashboard/vietnam-icon.png"
  alt="flag"
  width={28}
  height={28}
/>

                <span className="hidden sm:inline">VI</span>
                <ChevronDown size={16} className="hidden sm:block" />
              </button>

              {isLangOpen && (
                <div className="absolute top-full right-0 mt-1 bg-white rounded-md shadow-lg py-1 w-32">
                  <div className="relative bg-white rounded-md overflow-hidden">
                    <button className="flex items-center gap-2 px-3 py-2 hover:bg-gray-100 w-full">
                      <Image
  src="/images/dashboard/vietnam-icon.png"
  alt="flag"
  width={28}
  height={28}
/>

                      <span className="text-gray-700">EN</span>
                    </button>
                    <button className="flex items-center gap-2 px-3 py-2 hover:bg-gray-100 w-full">
                    <Image
  src="/images/dashboard/vietnam-icon.png"
  alt="flag"
  width={28}
  height={28}
/>

                      <span className="text-gray-700">VI</span>
                    </button>
                  </div>
                </div>
              )}
            </div>

            {isLoading ? (
              <span className="text-white">Đang tải...</span>
            ) : userInfo ? (
              <div className="flex items-center">
                <h3 className="mr-2">
                  <button className="text-white hover:text-teal-100 text-sm sm:text-base">
                    {userInfo.name}
                  </button>
                </h3>
                <User2Icon className="bg-white rounded-full" size={24} />
              </div>
            ) : (
              <div>
                <Link href="/login" style={{ textDecoration: "none" }}>
                  <button className="text-white hover:text-teal-100 text-sm sm:text-base">
                    Đăng nhập
                  </button>
                </Link>

                <Link href="/register" style={{ textDecoration: "none" }}>
                  <button className="ml-4 bg-teal-200 text-teal-950 px-3 sm:px-4 py-2 rounded-md hover:bg-teal-50 text-sm sm:text-base">
                    Đăng ký
                  </button>
                </Link>
              </div>
            )}
          </div>
        </div>
      </nav>

      {/* Add a spacer to prevent content from hiding behind the fixed navbar */}
      <div className="h-16"></div>

      <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />
    </>
  );
};

export default NavigationBar;

// no using useQuery
/* function useQuery(arg0: {
  queryKey: (string | undefined)[]; queryFn: () => Promise<any>; enabled: boolean; // Only run if session exists
  staleTime: number; // Cache for 5 minutes
  cacheTime: number;
}): { data: any; isLoading: any; } {
  throw new Error("Function not implemented.");
} */

================
File: src/app/(dashboard)/components/common/sidebar.tsx
================
"use client"
console.log('sidebar - Rendering on client:', typeof window !== 'undefined');

import Link from 'next/link';
import { User, Ticket, Calendar, LogOut } from 'lucide-react';
import { Menu } from 'lucide-react';
import { useState } from 'react';
import { signOut, useSession } from 'next-auth/react';
import apiClient from '@/services/apiClient';
import { SidebarProps } from '../../libs/interface/dashboard.interface';



const Sidebar = ({ isOpen, onClose }: SidebarProps) => {
  const [loading, setLoading] = useState(false);
  const { data: session } = useSession();

  const handleLogout = async () => {
    if (!session?.user?.accessToken) {
      console.error('No token found');
      return;
    }

    setLoading(true);
    try {
      // Call API to revoke refresh token on server
      await apiClient.post('/api/user/logout', {
        refresh_token: session.user.refreshToken
      });
      
      // Clear client session and redirect
      await signOut({ 
        redirect: true,
        callbackUrl: '/'
      });
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setLoading(false);
    }
  };

  const menuItems = [
    { icon: <User size={20} />, text: 'Quản lý tài khoản', href: '/account' },
    { icon: <Ticket size={20} />, text: 'Quản lý vé', href: '/ticket' },
    { icon: <Calendar size={20} />, text: 'Tạo sự kiện', href: '/create-event' },
    { icon: <LogOut size={20} />, text: 'Đăng xuất', onClick: handleLogout },  // Sửa để sử dụng button
  ];

  return (
    <>
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={onClose}
        />
      )}

      <div
        className={`fixed top-0 left-0 h-full w-64 sm:w-72 bg-sky-900 text-white transform transition-transform duration-300 ease-in-out z-50 ${isOpen ? 'translate-x-0' : '-translate-x-full'
          }`}
      >
        <div className="p-4">
          <div className='flex flex-row justify-between items-center'>
            <h2 className="text-xl sm:text-2xl font-bold m-0 p-0">QUẢN LÝ</h2>
            <button
              className="text-white p-2 hover:bg-teal-700 rounded-md"
              onClick={onClose}
            >
              <Menu size={24} />
            </button>
          </div>
          <nav>
            <ul className="space-y-3 sm:space-y-4">
              {menuItems.map((item, index) => (
                <li key={index}>
                  {item.href ? (
                    <Link
                      href={item.href}
                      className="no-underline text-white flex items-center gap-3 py-2 px-3 sm:px-4 hover:bg-sky-800 rounded-md transition-colors text-sm sm:text-base"
                    >
                      {item.icon}
                      <span>{item.text}</span>
                    </Link>
                  ) : (
                    // Dùng button cho mục Đăng xuất
                    <button
                      onClick={item.onClick}
                      disabled={loading}
                      className="no-underline text-white flex items-center gap-3 py-2 px-3 sm:px-4 hover:bg-sky-800 rounded-md transition-colors text-sm sm:text-base"
                    >
                      {item.icon}
                      <span>{item.text}</span>
                    </button>
                  )}
                </li>
              ))}
            </ul>
          </nav>
        </div>
      </div>
    </>
  );
};

export default Sidebar;

================
File: src/app/(dashboard)/components/dashboard/datePicker.tsx
================
"use client";

import React from "react";
import { DateRangePicker } from "@nextui-org/react";
import { CalendarDate, getLocalTimeZone, today } from "@internationalized/date";
import { RangeValue } from "@react-types/shared";
import 'tailwindcss/tailwind.css';

interface DatePickerProps {
    onDateRangeChange: (range: RangeValue<CalendarDate> | null) => void;
}

export default function DatePicker({ onDateRangeChange }: DatePickerProps) {
    const [value, setValue] = React.useState<RangeValue<CalendarDate> | null>({
        start: today(getLocalTimeZone()).subtract({ days: 1 }),
        end: today(getLocalTimeZone()),
    });

    const handleChange = (newValue: RangeValue<CalendarDate> | null) => {
        setValue(newValue);
        onDateRangeChange(newValue);
    };

    return (
        <div className="date-picker-container rounded-[4px] !bg-white">
            <DateRangePicker
                value={value}
                onChange={handleChange}
                visibleMonths={2}
                radius="sm"
            />
        </div>
    );
}

================
File: src/app/(dashboard)/components/dashboard/error.tsx
================
'use client';

/* Package System */
import Image from "next/image";

/* Package Application */
import '@/styles/admin/pages/Error.css';

export default function Error() {
    return (
        <div className="container-custom">
            <Image
                src="/images/dashboard/error_404.png"
                alt="Error 404"
                width={500}
                height={300}
                className="mt-8 mb-12"
            />

            <div className='txt-error'>
                <span className='mt-4 mb-4'>Oops!</span>
            </div>

            <div className='txt-content mt-4 mb-8'>
                <span>We can’t seem to find the page you are looking for</span>
            </div>


            <div className='m-12'>
                <button className="btn btn-back">Back to Homepage</button>
            </div>

            <div className="mt-4 mb-4">
                <span>Follow us on</span>

                <div className="social-icons">
                    <Image
                        src="/images/dashboard/icons/instagram.png"
                        alt="Instagram"
                        width={65}
                        height={65}
                    />

                    <Image
                        src="/images/dashboard/icons/facebook.png"
                        alt="Facebook"
                        width={65}
                        height={65}
                    />

                    <Image
                        src="/images/dashboard/icons/linkedin.png"
                        alt="Linkedin"
                        width={65}
                        height={65}
                    />

                    <Image
                        src="/images/dashboard/icons/twitter.png"
                        alt="Twitter"
                        width={65}
                        height={65}
                    />

                    <Image
                        src="/images/dashboard/icons/youtube.png"
                        alt="Youtube"
                        width={65}
                        height={65}
                    />
                </div>
            </div>
        </div>
    )
}

================
File: src/app/(dashboard)/components/dashboard/eventSlider.tsx
================
'use client';


/* Package System */
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation } from 'swiper/modules';
import 'swiper/css';
import 'swiper/css/navigation';
import Link from 'next/link';
import Image from "next/image";

//Package App
import { Event } from '../../libs/interface/dashboard.interface';

interface EventSliderProps {
  title: string;
  subtitle?: string;
  showViewMore?: boolean;
  events: Event[];
}

const EventSlider = ({ title, subtitle, events }: EventSliderProps) => {
  return (
    <div className="relative">
      {/* Header Section */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-2 gap-4">
        <h2 className="text-xl md:text-2xl font-bold">
          {title} {subtitle && <span className="text-teal-400">{subtitle}</span>}
        </h2>
        {/* {showViewMore && (
          <a href="#" className="text-teal-500 hover:text-teal-700 text-sm md:text-base flex items-center gap-1 transition-colors duration-300">
            Xem thêm <span>&rarr;</span>
          </a>
        )} */}
      </div>

      {/* Swiper Slider */}
      <Swiper
        slidesPerView={4}
        slidesPerGroup={4}
        spaceBetween={10}
        modules={[Navigation]}
        navigation={{
          nextEl: '.custom-swiper-button-next',
          prevEl: '.custom-swiper-button-prev',
        }}
        // style={{
        //   overflowX: 'auto',
        //   scrollBehavior: 'smooth',
        //   display: 'flex',
        // }}
        /* events are able to be slided by touchpad but the arrows will be disappear */
        className="mySwiper"
      >
        {events.map((event) => (
          <SwiperSlide key={event.id} className="h-full">
            <Link href={`/event/${event.id}`}>
              <div className="bg-[#0C4762] rounded-lg overflow-hidden shadow-md transition-shadow flex flex-col h-full">
                <div className="flex items-center justify-center p-2 w-full h-auto overflow-hidden">
                  <Image
                    src={event.Images_Events_imgPosterIdToImages?.imageUrl || '/images/dashboard/card_pic.png'}
                    alt={event.title}
                    className="w-full aspect-video object-cover rounded-lg hover:scale-110 transition-transform duration-300 padding-30"
                    width={140}
                    height={100}
                  />
                </div>
                <div className="p-3 flex flex-col flex-grow">
                  <h3 className="font-bold text-left text-sm mb-2 text-white line-clamp-2 min-h-[36px] leading-tight">
                    {event.title}
                  </h3>
                  <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-2 mb-2 text-[14px]">
                    <time className="text-left text-teal-500">
                      <span>{new Date(event.startDate).toLocaleDateString()}</span>
                    </time>
                    <span className={`rounded-lg bg-emerald-200 px-2 font-medium text-sky-950 text-center md:text-left`}>
                      {event.status === 'free' ? "Miễn phí" : "Từ "+ event.minTicketPrice.toLocaleString("vi-VN") +"đ"}
                    </span>
                  </div>
                </div>
              </div>
            </Link>
          </SwiperSlide>
        ))}
        <button className="custom-swiper-button-prev absolute left-2 top-1/2 -translate-y-1/2 z-10 rounded-full hover:bg-white hover:bg-opacity-20 transition-all">
          <ChevronLeft className="text-3xl text-white hover:text-gray-900 transition-transform" />
        </button>
        <button className="custom-swiper-button-next absolute right-2 top-1/2 -translate-y-1/2 z-10 rounded-full hover:bg-white hover:bg-opacity-20 transition-all">
          <ChevronRight className="text-3xl text-white hover:text-gray-900 transition-transform" />
        </button>
      </Swiper>
    </div>
  );
};

export default EventSlider;

================
File: src/app/(dashboard)/components/dashboard/imageSlider.tsx
================
"use client"
console.log('image-slider - Rendering on client:', typeof window !== 'undefined');

//Package System
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useState, useEffect } from 'react';
import Image from "next/image";

//Package App
import { useFetchRecommendedEvents } from '@/app/(dashboard)/libs/hooks/useFetchRecommendedEvents';


const ImageSlider = () => {
  const { events, loading, error } = useFetchRecommendedEvents();
  const [currentSlide, setCurrentSlide] = useState<number>(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % events.length);
    }, 5000);
    return () => clearInterval(timer);
  }, [events]);

  if (loading) return <div>Loading recommended events...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="relative rounded-lg overflow-hidden">
      {/* Image Slides */}
      <div
        className="flex transition-transform duration-500 ease-in-out h-[500px]"
        style={{ transform: `translateX(-${currentSlide * 100}%)` }}
      >
        {events.map((event) => (
          <div key={event.id} className="w-full h-full flex-shrink-0 relative">
            <Image
              src={event.Images_Events_imgPosterIdToImages?.imageUrl || '/images/default-image.jpg'}
              alt={event.title}
              className="w-full h-full object-cover"
              width={350}
              height={250}
            />
            <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center text-white">
              <h2 className="text-3xl md:text-5xl font-bold mb-2 md:mb-4 text-center">{event.title}</h2>
            </div>
          </div>
        ))}
      </div>

      {/* Navigation Buttons */}
      <button
        onClick={() => setCurrentSlide((prev) => (prev - 1 + events.length) % events.length)}
        className="absolute left-2 md:left-4 top-1/2 -translate-y-1/2 bg-opacity-30 p-2 md:p-3 rounded-full hover:bg-opacity-50 transition-all"
      >
        <ChevronLeft size={28} className="text-white" />
      </button>

      <button
        onClick={() => setCurrentSlide((prev) => (prev + 1) % events.length)}
        className="absolute right-2 md:right-4 top-1/2 -translate-y-1/2 bg-opacity-30 p-2 md:p-3 rounded-full hover:bg-opacity-50 transition-all"
      >
        <ChevronRight size={28} className="text-white" />
      </button>
    </div>
  );
};

export default ImageSlider;

================
File: src/app/(dashboard)/components/dashboard/searchControls.tsx
================
"use client";
console.log('search control - Rendering on client:', typeof window !== 'undefined');

//Package System
import { ChevronDown, Search } from 'lucide-react';
import { useRef, useState } from 'react';
import { CalendarDate} from "@internationalized/date";
import Link from 'next/link';
import { RangeValue } from "@react-types/shared";
import 'tailwindcss/tailwind.css';

//Package App
import DatePicker from './datePicker';

export default function SearchControls() {
    const [searchText, setSearchText] = useState('');
    const [dateRange, setDateRange] = useState<RangeValue<CalendarDate> | null>(null);
    const [isEventTypeOpen, setIsEventTypeOpen] = useState(false);
    const [isLocationOpen, setIsLocationOpen] = useState(false);
    const [selectedOptions, setSelectedOptions] = useState<string[]>([]);
    const options = ["Âm nhạc", "Kịch", "Học thuật", "Thể thao", "Workshop", "Hòa nhạc"];
    const [selectedLocation, setSelectedLocation] = useState<string | null>(null);
    const locations = ["Hà Nội", "TP.HCM", "Đà Nẵng"];
    const dropdownEventRef = useRef(null);
    const dropdownLocationRef = useRef(null);

    const toggleOption = (option: string) => {
        if (selectedOptions.includes(option)) {
            setSelectedOptions(selectedOptions.filter((item) => item !== option));
        } else {
            setSelectedOptions([...selectedOptions, option]);
        }
    };

    return (
        <div className="absolute left-0 right-0 -bottom-20 mx-auto w-full md:w-11/12 px-4">
            <div className="bg-sky-900 text-white p-4 md:p-6 rounded-lg shadow-lg">
                <div className="flex flex-col md:flex-row gap-4">
                    <div className="flex-[1.5] text-left">
                        <label className="text-sm font-medium mb-2">Tên sự kiện, diễn giả, ...</label>
                        <div className="mt-2 relative">
                            <input className="w-full bg-white text-gray-800 rounded p-2 appearance-none pr-8 small-text" type="text"
                                placeholder="Nhập tên sự kiện, diễn giả..."
                                value={searchText}
                                onChange={(e) => setSearchText(e.target.value)}>
                            </input>
                        </div>
                    </div>
                    <div className="md:w-48 sm:flex-1 text-left">
                        <label className="text-sm font-medium mb-2">Loại sự kiện</label>
                        <div className="mt-2 relative w-full" ref={dropdownEventRef}>
                            <button
                                onClick={() => setIsEventTypeOpen(!isEventTypeOpen)}
                                className="w-full bg-white border border-gray-300 rounded p-2 flex justify-between items-center text-gray-500 small-text"
                            >
                                <span className='truncate'>
                                    {selectedOptions.length > 0
                                        ? selectedOptions.join(", ")
                                        : "Chọn loại sự kiện"}
                                </span>
                                <ChevronDown size={16} className="text-gray-500" />
                            </button>

                            {/* Dropdown menu */}
                            {isEventTypeOpen && (
                                <div className="absolute z-10 w-full bg-white border border-gray-300 rounded shadow-lg text-[#0C4762] small-text">
                                    {options.map((option) => (
                                        <label
                                            key={option}
                                            className="flex items-center p-2 hover:bg-[#0C4762] hover:bg-opacity-[0.31] cursor-pointer"
                                        >
                                            <input
                                                type="checkbox"
                                                checked={selectedOptions.includes(option)}
                                                onChange={() => toggleOption(option)}
                                                className="mr-2"
                                            />
                                            {option}
                                        </label>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                    <div className="md:w-48 sm:flex-1 text-left">
                        <label className="text-sm font-medium mb-2">Địa điểm</label>
                        <div className="mt-2 relative" ref={dropdownLocationRef}>
                            <button
                                onClick={() => setIsLocationOpen(!isLocationOpen)}
                                className="w-full bg-white border border-gray-300 rounded p-2 flex justify-between items-center text-gray-500 small-text"
                            >
                                <span>
                                    {selectedLocation ? selectedLocation : "Chọn địa điểm"}
                                </span>
                                <ChevronDown size={16} className="text-gray-500" />
                            </button>

                            {/* Dropdown menu */}
                            {isLocationOpen && (
                                <div className="absolute z-10 w-full bg-white border border-gray-300 rounded shadow-lg text-[#0C4762] small-text">
                                    {locations.map((location) => (
                                        <div
                                            key={location}
                                            className="p-2 hover:bg-[#0C4762] hover:bg-opacity-[0.31] cursor-pointer"
                                            onClick={() => {
                                                setSelectedLocation(location);
                                                setIsLocationOpen(false);
                                            }}
                                        >
                                            {location}
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                    <div className="flex-[1.5] text-left">
                        <label className="text-sm font-medium mb-2">Thời gian</label>
                        <div className="mt-2 relative">
                            <DatePicker onDateRangeChange={setDateRange} />
                        </div>
                    </div>
                    <div className="flex md:items-end">
                        <Link href={{
                            pathname: "/search",
                            query: {
                                q: searchText || undefined,
                                types: selectedOptions.length > 0 ? selectedOptions.join(',') : undefined,
                                location: selectedLocation || undefined,
                                startDate: dateRange?.start?.toString() || undefined,
                                endDate: dateRange?.end?.toString() || undefined
                            }
                        }}>
                            <button className="w-full md:w-14 h-10 bg-teal-400 hover:bg-teal-300 rounded flex items-center justify-center">
                                <Search size={20} className="text-white" />
                            </button>
                        </Link>
                    </div>
                </div>
            </div>
        </div>
    );
}

================
File: src/app/(dashboard)/layout.tsx
================
import { Suspense } from "react"
import Footer from "./components/common/footer"
import NavigationBar from "./components/common/navigationBar"
import DashboardLoading from "./loading"
import { Providers } from "../provider"

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <Providers>
          <NavigationBar />
          <Suspense fallback={<DashboardLoading />}>
            <main>{children}</main>
          </Suspense>
          <Footer />
        </Providers>
      </body>
    </html>
  )
}

================
File: src/app/(dashboard)/libs/functions/mapCategoryName.tsx
================
const mapCategoryName = (categoryName: string): string => {
    const categoryMapping: Record<string, string> = {
        "music": "Âm nhạc",
        "others": "Thể loại khác",
        "theatersandart": "Sân khấu & Nghệ thuật",
        // Thêm các danh mục khác nếu cần
    };

    return categoryMapping[categoryName] || categoryName; // Nếu không có trong danh sách, giữ nguyên
};
export default mapCategoryName;

================
File: src/app/(dashboard)/libs/hooks/useFetchEvents.ts
================
'use client';

//Package System
import { useEffect, useState } from 'react';
import axios from 'axios';

//Package App
import { Event } from '../../libs/interface/dashboard.interface';

interface Category {
  id: number;
  name: string;
  createAt: string;
}

interface CategorySpecial {
  category: Category;
  events: Event[];
}

interface EventResponse {
  specialEvents: Event[];
  trendingEvents: Event[];
  onlyOnEve: Event[];
  categorySpecial: CategorySpecial[];
}

export const useFetchEvents = () => {
  const [events, setEvents] = useState({
    specialEvents: [],
    trendingEvents: [],
    onlyOnEve: [],
    categorySpecial: [] as CategorySpecial[],
  });
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/api/event/front-display`);
        if (response.status === 200) {
          setEvents(response.data.data); // Assuming `data` contains the necessary keys
        }
      } catch (err) {
        setError('Failed to load events');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
  }, []);

  return { events, loading, error };
};

================
File: src/app/(dashboard)/libs/hooks/useFetchRecommendedEvents.tsx
================
'use client';

import { useEffect, useState } from 'react';
import axios from 'axios';

import { Event } from '../../libs/interface/dashboard.interface';

export const useFetchRecommendedEvents = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/api/event/recommended-events`, {
          params: { timeWindow: 'week' },
        });
        if (response.status === 200) {
          setEvents(response.data.data);
        }
      } catch (err) {
        setError('Failed to load recommended events');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
  }, []);

  return { events, loading, error };
};

================
File: src/app/(dashboard)/libs/interface/dashboard.interface.ts
================
export interface Slide {
  image: string;
  title: string;
  subtitle: string;
}

export interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

export interface Event {
  id: number;
  title: string;
  startDate: string;
  status: string;
  Images_Events_imgPosterIdToImages?: { imageUrl: string };
  minTicketPrice: number;
}

================
File: src/app/(dashboard)/libs/loading.tsx
================
export default function Loading() {
    return (
        <div className="animate-pulse">
            {/* Navigation Bar Skeleton */}
            <div className="fixed top-0 left-0 right-0 bg-sky-900 h-16 z-50">
                <div className="w-full px-4 h-16 flex justify-between items-center">
                    <div className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-gray-300 rounded-md"></div>
                        <div className="w-18 h-9 bg-gray-300 rounded"></div>
                        <div className="w-20 h-6 bg-gray-300 rounded hidden sm:block"></div>
                    </div>
                    <div className="flex items-center gap-4">
                        <div className="w-24 h-8 bg-gray-300 rounded"></div>
                        <div className="w-24 h-8 bg-gray-300 rounded"></div>
                    </div>
                </div>
            </div>

            {/* Main Content */}
            <div className="min-h-screen flex flex-col mt-16">
                {/* Image Slider Skeleton */}
                <div className="w-full flex justify-center flex-col items-center px-4 md:mt-8">
                    <div className="w-full md:w-5/6 relative">
                        <div className="h-[500px] bg-gray-300 rounded-lg"></div>
                        
                        {/* Search Controls Skeleton */}
                        <div className="absolute left-0 right-0 -bottom-20 mx-auto w-full md:w-11/12 px-4">
                            <div className="bg-sky-900 p-6 rounded-lg shadow-lg">
                                <div className="flex flex-col md:flex-row gap-4">
                                    {[1,2,3,4,5].map(i => (
                                        <div key={i} className="flex-1 h-20 bg-gray-300 rounded"></div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Event Sliders Skeleton */}
                <div className="flex justify-center mt-36 px-4">
                    <div className="w-full md:w-5/6">
                        {[1,2,3,4].map(section => (
                            <div key={section} className="mt-8">
                                <div className="flex justify-between items-center mb-4">
                                    <div className="w-48 h-8 bg-gray-300 rounded"></div>
                                    <div className="w-24 h-6 bg-gray-300 rounded"></div>
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                    {[1,2,3,4].map(card => (
                                        <div key={card} className="bg-gray-300 rounded-lg h-64"></div>
                                    ))}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            {/* Footer Skeleton */}
            <div className="w-full bg-sky-900 mt-12 py-12">
                <div className="flex flex-col items-center gap-8">
                    <div className="w-48 h-8 bg-gray-300 rounded"></div>
                    <div className="w-72 h-10 bg-gray-300 rounded"></div>
                    <div className="flex gap-4">
                        {[1,2,3,4,5].map(i => (
                            <div key={i} className="w-20 h-6 bg-gray-300 rounded"></div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    )
}

================
File: src/app/(dashboard)/loading.tsx
================
import 'tailwindcss/tailwind.css';

export default function DashboardLoading() {
    return (
        <div className="animate-pulse">
            {/* Navigation Bar Skeleton */}
            {/* <div className="fixed top-0 left-0 right-0 bg-sky-900 h-16 z-50">
                <div className="w-full px-4 h-16 flex justify-between items-center">
                    <div className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-gray-300 rounded-md"></div>
                        <div className="w-18 h-9 bg-gray-300 rounded"></div>
                        <div className="w-20 h-6 bg-gray-300 rounded hidden sm:block"></div>
                    </div>
                    <div className="flex items-center gap-4">
                        <div className="w-24 h-8 bg-gray-300 rounded"></div>
                        <div className="w-24 h-8 bg-gray-300 rounded"></div>
                    </div>
                </div>
            </div> */}

            {/* Main Content */}
            <div className="min-h-screen flex flex-col mt-16">
                {/* Image Slider Skeleton */}
                <div className="w-full flex justify-center flex-col items-center px-4 md:mt-8">
                    <div className="w-full md:w-5/6 relative">
                        <div className="h-[500px] bg-gray-300 rounded-lg"></div>
                        
                        {/* Search Controls Skeleton */}
                        <div className="absolute left-0 right-0 -bottom-20 mx-auto w-full md:w-11/12 px-4">
                            <div className="bg-sky-900 p-6 rounded-lg shadow-lg">
                                <div className="flex flex-col md:flex-row gap-4">
                                    {[1,2,3,4,5].map(i => (
                                        <div key={i} className="flex-1 h-20 bg-gray-300 rounded"></div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Event Sliders Skeleton */}
                <div className="flex justify-center mt-36 px-4">
                    <div className="w-full md:w-5/6">
                        {[1,2,3,4].map(section => (
                            <div key={section} className="mt-8">
                                <div className="flex justify-between items-center mb-4">
                                    <div className="w-48 h-8 bg-gray-300 rounded"></div>
                                    <div className="w-24 h-6 bg-gray-300 rounded"></div>
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                    {[1,2,3,4].map(card => (
                                        <div key={card} className="bg-gray-300 rounded-lg h-64"></div>
                                    ))}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            {/* Footer Skeleton */}
            {/* <div className="w-full bg-sky-900 mt-12 py-12">
                <div className="flex flex-col items-center gap-8">
                    <div className="w-48 h-8 bg-gray-300 rounded"></div>
                    <div className="w-72 h-10 bg-gray-300 rounded"></div>
                    <div className="flex gap-4">
                        {[1,2,3,4,5].map(i => (
                            <div key={i} className="w-20 h-6 bg-gray-300 rounded"></div>
                        ))}
                    </div>
                </div>
            </div> */}
        </div>
    )
}

================
File: src/app/(dashboard)/page.tsx
================
'use client';
console.log('dashboard - Rendering on client:', typeof window !== 'undefined');

/* Package System */
import 'tailwindcss/tailwind.css';
import 'swiper/css';
import 'swiper/css/navigation';

/* Package Application */
import '@/styles/admin/pages/Dashboard.css';
import EventSlider from './components/dashboard/eventSlider';
import ImageSlider from './components/dashboard/imageSlider';
import SearchControls from './components/dashboard/searchControls';
import { useFetchEvents } from './libs/hooks/useFetchEvents';
import DashboardLoading from './loading';
// import Error from './components/dashboard/error';
import mapCategoryName from './libs/functions/mapCategoryName';


const Dashboard = () => {
    // const slides = fetchData();
    const { events, loading, error } = useFetchEvents();
    if (loading) {
      return <DashboardLoading />;
    }
  
    if (error) {
        throw new Error("500 - Internal Server Error"); // This triggers `error.tsx`
    }

    const { specialEvents, trendingEvents, onlyOnEve, categorySpecial } = events;
    return (
        <div className="min-h-screen flex flex-col">
            <main className="flex-1">
                <div className="w-full flex justify-center flex-col items-center px-4 md:mt-8">
                    <div className="w-full md:w-5/6 relative">
                        <ImageSlider />
                        <SearchControls />
                    </div>
                </div>

                <div className="mt-36"></div>

                {/* Events Section */}
                <div className="flex justify-center mt-8 px-4">
                    <div className="w-full md:w-5/6">
                        <EventSlider title="Sự kiện" subtitle="Đặc biệt" events={specialEvents} />
                        <div className="mt-8">
                            <EventSlider title="Sự kiện" subtitle="Xu hướng" events={trendingEvents} />
                        </div>
                        <div className="mt-8">
                            <EventSlider title="Sự kiện" subtitle="Đặc sắc" events={onlyOnEve} showViewMore />
                        </div>

                        {categorySpecial?.map((category, index) => (
                            <div key={index} className="mt-8">
                                <EventSlider title={mapCategoryName(category.category.name)} events={category.events} />
                            </div>
                        ))}
                    </div>
                </div>
            </main>
        </div>
    );
};

export default Dashboard;

================
File: src/app/(dashboard)/search/components/range-slider.tsx
================
import React from "react";
import { Slider } from "@nextui-org/react";

export default function RangeSlider() {
  const [value, setValue] = React.useState<number[]>([100, 300]);

  // Xử lý thay đổi giá trị với type chính xác
  const handleChange = (newValue: number | number[]) => {
    if (Array.isArray(newValue)) {
      setValue(newValue);
    }
  };

  return (
    <div className="flex flex-col gap-1 w-full h-full max-w-sm items-start justify-center">
      <Slider
        className="max-w-sm"
        style={{ width: "20vw" }}
        formatOptions={{ style: "currency", currency: "VND" }}
        label="Chọn khoảng giá "
        maxValue={20000000}
        minValue={0}
        step={1000}
        value={value}
        onChange={handleChange}
      />
      <p className="text-default-500 mb-0 font-medium text-small">
        Khoảng giá: {Array.isArray(value) && value.map((b) => `${b}`).join(" – ")}
      </p>
    </div>
  );
}

================
File: src/app/(dashboard)/search/components/searchClient.tsx
================
'use client';

import { ChevronDown } from 'lucide-react';
import { useState, useEffect, useRef } from 'react';
import RangeSlider from './range-slider';
import 'tailwindcss/tailwind.css';
import 'swiper/css';
import 'swiper/css/navigation';
import '@/styles/admin/pages/Dashboard.css';
// import EventSlider from '../../components/dashboard/eventSlider';

interface SearchClientProps {
    events: number[];
}

export default function SearchClient({ }: SearchClientProps) {
    const [isEventTypeOpen, setIsEventTypeOpen] = useState(false);
    const [selectedOptions, setSelectedOptions] = useState<string[]>([]);
    const [isWeekDayOpen, setIsWeekDayOpen] = useState(false);
    const [selectedWeekDay, setSelectedWeekDay] = useState<string | null>(null);

    const options = ["Âm nhạc", "Kịch", "Học thuật", "Thể thao", "Workshop", "Hòa nhạc"];
    const weekdays = ["Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7", "Chủ Nhật"];
    
    const dropdownEventRef = useRef<HTMLDivElement | null>(null);
    const dropdownWeekDayRef = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as Node;
            if (dropdownEventRef.current && !dropdownEventRef.current.contains(target)) {
                setIsEventTypeOpen(false);
            }
            if (dropdownWeekDayRef.current && !dropdownWeekDayRef.current.contains(target)) {
                setIsWeekDayOpen(false);
            }
        };

        document.addEventListener("click", handleClickOutside);
        return () => document.removeEventListener("click", handleClickOutside);
    }, []);

    const toggleOption = (option: string) => {
        if (selectedOptions.includes(option)) {
            setSelectedOptions(selectedOptions.filter((item) => item !== option));
        } else {
            setSelectedOptions([...selectedOptions, option]);
        }
    };

    return (
        <div className="min-h-screen flex flex-col">
        <main className="flex-1">
            <div className="flex justify-center mt-8 px-4">
                <div className="w-full md:w-5/6">
                    {/* Section Header */}
                    <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
                        <h2 className="text-xl md:text-2xl font-bold whitespace-nowrap">Kết quả tìm kiếm:</h2>

                        {/* Bộ lọc */}
                        <div className="flex flex-wrap items-center gap-4 w-full md:w-auto">
                            {/* Bộ lọc: Ngày trong tuần */}
                            <div className="relative w-full md:w-40 flex-shrink-0" ref={dropdownWeekDayRef}>
                                <button
                                    onClick={() => setIsWeekDayOpen(!isWeekDayOpen)}
                                    className="w-full bg-white border border-gray-300 rounded p-2 flex justify-between items-center text-gray-500"
                                >
                                    <span>
                                        {selectedWeekDay ? selectedWeekDay : "Ngày trong tuần"}
                                    </span>
                                    <ChevronDown size={16} className="text-gray-500" />
                                </button>

                                {/* Dropdown multi-select */}
                                {isWeekDayOpen && (
                                    <div className="absolute z-10 w-full bg-white border border-gray-300 rounded shadow-lg text-[#0C4762] small-text">
                                    {weekdays.map((weekday) => (
                                      <div
                                        key={weekday}
                                        className="p-2 hover:bg-[#0C4762] hover:bg-opacity-[0.31] cursor-pointer"
                                        onClick={() => {
                                          setSelectedWeekDay(weekday);
                                          setIsWeekDayOpen(false);
                                        }}
                                      >
                                        {weekday}
                                      </div>
                                    ))}
                                  </div>
                                )}
                            </div>

                            {/* Bộ lọc: Loại sự kiện */}
                            <div className="relative w-full md:w-40 flex-shrink-0" ref={dropdownEventRef}>
                                <button
                                    onClick={() => setIsEventTypeOpen(!isEventTypeOpen)}
                                    className="w-full bg-white border border-gray-300 rounded p-2 flex justify-between items-center text-gray-500"
                                    style={{
                                        whiteSpace: "nowrap",
                                        overflow: "hidden",
                                        textOverflow: "ellipsis",
                                    }}
                                >
                                    <span className="block overflow-hidden whitespace-nowrap text-ellipsis">
                                        {selectedOptions.length > 0
                                            ? selectedOptions.join(", ")
                                            : "Loại sự kiện"}
                                    </span>
                                    <ChevronDown size={16} className="text-gray-500" />
                                </button>

                                {/* Dropdown multi-select */}
                                {isEventTypeOpen && (
                                    <div className="absolute z-10 w-full bg-white border border-gray-300 rounded shadow-lg text-[#0C4762]">
                                        {options.map((option) => (
                                            <label
                                                key={option}
                                                className="flex items-center p-2 hover:bg-[#0C4762] hover:bg-opacity-[0.31] cursor-pointer"
                                                style={{ lineHeight: "normal" }}
                                            >
                                                <input
                                                    type="checkbox"
                                                    checked={selectedOptions.includes(option)}
                                                    onChange={() => toggleOption(option)}
                                                    className="mr-2"
                                                />
                                                {option}
                                            </label>
                                        ))}
                                    </div>
                                )}
                            </div>
                            {/* Bộ lọc: Range Slider */}
                            <div className="w-full items-center md:w-80 flex-shrink-0">
                                <RangeSlider/>
                            </div>
                        </div>
                    </div>
                    {/* Event Cards Grid */}
                    {/* <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 md:gap-4">
                        {events.map((_, index) => (
                            <div key={index} className="bg-[#0C4762] rounded-lg overflow-hidden shadow-lg border-2 hover:shadow-md transition-shadow">
                                <div className="flex items-center justify-center aspect-[13/9] overflow-hidden">
                                    <img
                                        src="/images/dashboard/card_pic.png"
                                        alt="Event"
                                        className="object-cover hover:scale-105 transition-transform duration-300 padding-30"
                                    />
                                </div>
                                <div className="p-3">
                                    <h3 className="font-bold text-left text-base mb-3 line-clamp-2 leading-tight text-white">
                                        Nhớ Trịnh Công Sơn 3 - Quang Dũng - Cẩm Vân - Khắc Triệu - Cece Trường
                                    </h3>
                                    <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-2 mb-2 text-[14px]">
                                        <time className="text-left text-teal-500">
                                            <span>20:00 - 23:00</span>
                                            <br />
                                            <span>25 tháng 10, 2024</span>
                                        </time>
                                        <span
                                            className={`rounded-lg bg-emerald-200 px-2 text-sky-950 text-center md:text-left`}
                                        >
                                            {index % 2 === 0 ? "Miễn phí" : "950.000đ"}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div> */}
                    {/* <EventSlider events={events} title={''} />
                    <EventSlider events={events} title={''} />
                    <EventSlider events={events} title={''} />
                    <EventSlider events={events} title={''} /> */}
                    {/* Load More Button */}
                    <div className="flex justify-center mt-8 mb-8">
                        <button className="px-6 py-2 bg-teal-400 text-sky-950 rounded-md hover:bg-teal-300 transition-colors">
                            Xem thêm...
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>
    );
}

================
File: src/app/(dashboard)/search/layout.tsx
================
import { Suspense } from "react"
import SearchLoading from "./loading"

export default function RootLayout({
    children,
}: {
    children: React.ReactNode
}) {
    return (
        <Suspense fallback={<SearchLoading />}>
            <section>{children}</section>
        </Suspense>
    )
}

================
File: src/app/(dashboard)/search/loading.tsx
================
export default function SearchLoading() {
    return (
        <div className="min-h-screen flex flex-col animate-pulse">
            <main className="flex-1">
                <div className="flex justify-center mt-8 px-4">
                    <div className="w-full md:w-5/6">
                        {/* Header and Filters Skeleton */}
                        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
                            {/* Search Results Title */}
                            <div className="h-8 bg-gray-300 rounded w-48"></div>

                            {/* Filters Container */}
                            <div className="flex flex-wrap items-center gap-4 w-full md:w-auto">
                                {/* Weekday Filter */}
                                <div className="w-full md:w-40 h-10 bg-gray-300 rounded"></div>
                                
                                {/* Event Type Filter */}
                                <div className="w-full md:w-40 h-10 bg-gray-300 rounded"></div>
                                
                                {/* Price Range Filter */}
                                <div className="w-full md:w-80 h-10 bg-gray-300 rounded"></div>
                            </div>
                        </div>

                        {/* Event Cards Grid Skeleton */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 md:gap-4">
                            {[...Array(12)].map((_, index) => (
                                <div key={index} className="bg-gray-200 rounded-lg overflow-hidden">
                                    {/* Image Placeholder */}
                                    <div className="aspect-[13/9] bg-gray-300"></div>
                                    
                                    {/* Content Placeholder */}
                                    <div className="p-3">
                                        {/* Title */}
                                        <div className="h-12 bg-gray-300 rounded mb-3"></div>
                                        
                                        {/* Date and Price */}
                                        <div className="flex flex-col md:flex-row md:justify-between gap-2">
                                            <div className="h-12 bg-gray-300 rounded w-24"></div>
                                            <div className="h-6 bg-gray-300 rounded w-20"></div>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {/* Load More Button Skeleton */}
                        <div className="flex justify-center mt-8 mb-8">
                            <div className="w-32 h-10 bg-gray-300 rounded"></div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    );
}

================
File: src/app/(dashboard)/search/page.tsx
================
import SearchClient from "./components/searchClient";

// Server Component
export default async function Search() {
    await new Promise(resolve => setTimeout(resolve, 1500));
    const events = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    
    return <SearchClient events={events} />;
}

================
File: src/app/(event)/event/[id]/booking/components/navigation.tsx
================
// booking/components/navigation.tsx
'use client';

//Package System
import { useRouter } from 'next/navigation';
import { useState, useEffect } from 'react';
import { usePathname } from 'next/navigation'
import { ArrowLeft } from 'lucide-react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import 'tailwindcss/tailwind.css';

//Package App
import TimeOutDialog from '../payment/components/dialogs/timeOutDialog';

export default function Navigation({ title }: { title: string }) {
    const router = useRouter();
    const pathname = usePathname(); // Lấy đường dẫn hiện tại

    const initialMinutes = 15;
    const initialSeconds = 0;

    const totalInitialTime = initialMinutes * 60 + initialSeconds;

    const [isTimeout, setIsTimeout] = useState(false);
    const [timeLeft, setTimeLeft] = useState(totalInitialTime);
    useEffect(() => {
        if (pathname === "/event/1/booking/select-ticket") return; // Không hiển thị trên trang này

        const storedTime = localStorage.getItem('timeLeft');
        const storedTimestamp = localStorage.getItem('timestamp');

        if (storedTime && storedTimestamp) {
            const elapsedTime = Math.floor((Date.now() - Number(storedTimestamp)) / 1000);
            const remainingTime = Math.max(Number(storedTime) - elapsedTime, 0);
            setTimeLeft(remainingTime);

            if (remainingTime === 0) {
                setIsTimeout(true);
                return;
            }
        }

        const timer = setInterval(() => {
            setTimeLeft((prevTime) => {
                if (prevTime <= 1) {
                    clearInterval(timer);
                    setIsTimeout(true);
                    localStorage.setItem('timeLeft', '0');
                    return 0;
                }
                localStorage.setItem('timeLeft', String(prevTime - 1));
                localStorage.setItem('timestamp', String(Date.now()));
                return prevTime - 1;
            });
        }, 1000);

        return () => clearInterval(timer);
    }, [pathname]);

    // Format thời gian còn lại thành MM:SS
    const formatTime = (time: number) => {
        const minutes = Math.floor(time / 60);
        const seconds = time % 60;
        return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
    };

    const formattedTime = formatTime(timeLeft);

    return (
        <div className="flex items-center justify-center p-10 relative">
            <button onClick={() => router.back()} className="p-1.5 border-2 border-[#0C4762] rounded-md hover:bg-gray-200 absolute left-16">
                <ArrowLeft size={20} className="text-[#0C4762]" />
            </button>
            <h1 className="text-3xl font-semibold">{title}</h1>

            {/* Ẩn bộ đếm nếu đang ở trang `/select-ticket` */}
            {pathname !== "/event/1/booking/select-ticket" && (
                <div className="absolute right-16 top-1/2 transform -translate-y-1/2 bg-[#DDF9F5] border border-[#52D1C9] rounded-xl p-4 text-center shadow-md flex flex-col items-center">
                    <p className="text-black mb-2">Hoàn tất đặt vé trong</p>
                    <div className="w-24 h-12 flex items-center justify-center bg-[#52D1C9] text-black text-xl font-bold rounded-md mt-2">
                        {formattedTime}
                    </div>
                </div>
            )}

            {/* Hiển thị TimeOutDialog khi hết thời gian */}
            <TimeOutDialog open={isTimeout} onClose={() => setIsTimeout(false)} />
        </div>
    );
}

================
File: src/app/(event)/event/[id]/booking/payment/components/dialogs/paymentInfoDialog.tsx
================
'use client'

import { Dialog, DialogActions, DialogContent, DialogTitle, TextField, Select, MenuItem, InputLabel, FormControl } from "@mui/material";
import { Icon } from "@iconify/react";

interface PaymentInfoDialogProps {
    open: boolean;
    onClose: () => void;
}

export default function PaymentInfoDialog({ open, onClose }: PaymentInfoDialogProps) {
    return (
        <Dialog style={{ borderRadius: '20px' }} className="info-dialog" open={open} onClose={onClose}>
            <div className="text-white dialog-header px-6 py-4 justify-center items-center flex relative" style={{ background: '#0C4762' }}>
                <DialogTitle className="!m-0 !p-0 text-lg text-center font-bold">Cập nhật thông tin nhận vé</DialogTitle>
                <button onClick={onClose} className="absolute right-2 top-2 px-1 py-1 close-btn">
                    <Icon icon="ic:baseline-close" width="20" height="20" />
                </button>
            </div>

            <DialogContent className="p-6">
                <TextField margin="dense" label="Tên người nhận" type="text" fullWidth defaultValue="Nguyễn Thanh Huệ" className="mb-4" />
                <div className="grid grid-cols-3 gap-4">
                    <FormControl fullWidth margin="dense">
                        <Select defaultValue="+84">
                            <MenuItem value="+84">+84</MenuItem>
                            <MenuItem value="+1">+1</MenuItem>
                        </Select>
                    </FormControl>
                    <TextField margin="dense" label="Số điện thoại" type="text" fullWidth defaultValue="123390876" className="col-span-2" />
                </div>
                <TextField margin="dense" label="Email" type="email" fullWidth defaultValue="customer@gmail.com" className="mb-4" />
                <p>Địa chỉ nhận hàng (vui lòng cập nhật khi mua vé cứng)</p>
                <FormControl fullWidth margin="dense" className="mb-4">
                    <InputLabel id="province-label">Tỉnh/Thành phố</InputLabel>
                    <Select label="Tỉnh/Thành phố" labelId="province-label">
                        <MenuItem value="">Chọn Tỉnh/Thành phố</MenuItem>
                    </Select>
                </FormControl>
                <FormControl fullWidth margin="dense" className="mb-4">
                    <InputLabel id="district-label">Quận/Huyện</InputLabel>
                    <Select label="Quận/Huyện" labelId="district-label">
                        <MenuItem value="">Chọn Quận/Huyện</MenuItem>
                    </Select>
                </FormControl>
                <FormControl fullWidth margin="dense" className="mb-4">
                    <InputLabel id="ward-label">Phường/Xã</InputLabel>
                    <Select label="Phường/Xã" labelId="ward-label">
                        <MenuItem value="">Chọn Phường/Xã</MenuItem>
                    </Select>
                </FormControl>
                <TextField
                    margin="dense"
                    label="Địa chỉ"
                    type="text"
                    fullWidth
                    placeholder="Nhập địa chỉ"
                />
            </DialogContent>

            <DialogActions className="p-6 mt-6 mb-6 ml-7 mr-7 flex justify-between">
                <button onClick={onClose} style={{ border: '1px solid #0C4762' }} className="w-2/3 text-gray-700 hover:bg-gray-100 py-2 px-4 rounded">
                    Hủy bỏ
                </button>
                <button className="w-2/3 text-white py-2 px-4 rounded bg-[#0C4762] hover:bg-[#1d3945]">
                    Xác nhận
                </button>
            </DialogActions>
        </Dialog>
    );
}

================
File: src/app/(event)/event/[id]/booking/payment/components/dialogs/QRPaymenDialog.tsx
================
'use client';

/* Package System */
import { useEffect, useState } from "react";
import { Dialog } from "@mui/material";
import Image from "next/image";

interface QRPaymentDialogProps {
    open: boolean;
    onClose: () => void;
    amount: number;
    qrImage: string;
}

export default function QRPaymentDialog({ open, onClose, amount, qrImage }: QRPaymentDialogProps) {
    const [timeLeft, setTimeLeft] = useState(15 * 60);

    useEffect(() => {
        if (!open) return; // Nếu dialog không mở thì không làm gì cả

        // Lấy thời gian còn lại từ localStorage
        const storedTime = localStorage.getItem('timeLeft');
        const storedTimestamp = localStorage.getItem('timestamp');

        if (storedTime && storedTimestamp) {
            const elapsedTime = Math.floor((Date.now() - Number(storedTimestamp)) / 1000);
            const remainingTime = Math.max(Number(storedTime) - elapsedTime, 0);
            setTimeLeft(remainingTime);

            if (remainingTime === 0) {
                localStorage.setItem('timeLeft', '0');
                return;
            }
        }

        const timer = setInterval(() => {
            setTimeLeft((prevTime) => {
                if (prevTime <= 1) {
                    clearInterval(timer);
                    localStorage.setItem('timeLeft', '0');
                    return 0;
                }
                localStorage.setItem('timeLeft', String(prevTime - 1));
                localStorage.setItem('timestamp', String(Date.now()));
                return prevTime - 1;
            });
        }, 1000);

        return () => clearInterval(timer);
    }, [open]);

    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;

    return (
        <Dialog open={open} onClose={onClose} maxWidth="md">
            <div className="bg-white rounded-lg p-4">
                <div className="d-flex justify-content-between align-items-center px-4 py-3 border-bottom">
                    <div className="d-flex align-items-center">
                        <Image src="/images/shopee-pay.png" alt="ShopeePay" width="100" height="100" />
                        <span className="fw-bold text-lg">ShopeePay Wallet</span>
                    </div>
                    <button className="text-teal-500 border-0 bg-transparent fw-bold">
                        Đổi phương thức khác
                    </button>
                </div>

                <div className="px-5 py-4">
                    <h3 className="text-center fw-bold mb-4">Quét mã QR để thanh toán</h3>
                    <div className="d-flex justify-content-center align-items-start">
                        <div className="bg-teal-100 p-3 rounded">
                            <Image src={qrImage} alt="QR Code" width="200" height="200" />
                            <div className="d-flex justify-content-between fw-bold px-2 mt-2">
                                <span>Tổng tiền</span>
                                <span>{amount.toLocaleString()}đ</span>
                            </div>
                        </div>

                        <div className="ms-4">
                            <ol className="list-unstyled">
                                {["Mở ứng dụng ShopeePay trên điện thoại của bạn", "Chọn icon Scan & Pay trên ứng dụng ShopeePay", "Quét mã QR", "Áp dụng mã khuyến mãi ShopeePay (nếu có) và hoàn tất thanh toán"].map((text, index) => (
                                    <li key={index} className="d-flex align-items-center mb-2">
                                        <div className="rounded-circle bg-teal-500 text-white d-flex align-items-center justify-content-center me-2" style={{ width: "24px", height: "24px" }}>
                                            {index + 1}
                                        </div>
                                        <span className="fw-bold">{text}</span>
                                    </li>
                                ))}
                            </ol>

                            <div className="bg-teal-100 p-2 rounded d-flex justify-content-center align-items-center mt-3">
                                <span className="fw-bold">Giao dịch sẽ kết thúc sau</span>
                                <span className="bg-teal-500 text-white px-2 mx-1 rounded">{minutes}</span>
                                <span>:</span>
                                <span className="bg-teal-500 text-white px-2 mx-1 rounded">{seconds < 10 ? `0${seconds}` : seconds}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Dialog>
    );
}

================
File: src/app/(event)/event/[id]/booking/payment/components/dialogs/timeOutDialog.tsx
================
'use client'

import { Dialog, DialogContent, DialogTitle } from "@mui/material";
import { Icon } from "@iconify/react";

interface TimeOutDialogProps {
    open: boolean;
    onClose: () => void;
}

export default function TimeOutDialog({ open, onClose }: TimeOutDialogProps) {
    return (
        <Dialog open={open} onClose={onClose}>
            <div className="text-white dialog-header px-6 py-4 justify-center items-center flex relative" style={{ background: '#0C4762' }}>
                <DialogTitle className="!m-0 !p-0 text-lg text-center font-bold">Hết thời gian giữ vé</DialogTitle>
                <button onClick={onClose} className="absolute right-2 top-2 px-1 py-1 close-btn">
                    <Icon icon="ic:baseline-close" width="20" height="20" />
                </button>
            </div>

            <DialogContent className="p-6 flex flex-col justify-center items-center">
                <Icon icon="twemoji:bell" width="50" height="50" />
                <p className="text-center">Đã hết thời gian giữ vé!</p>
                <p className="text-center">Bạn hãy vui lòng đặt vé mới</p>
                <button onClick={onClose} className="bg-[#0C4762] hover:bg-[#1d3945] text-white font-bold py-2 px-4 rounded mt-4">
                    Đặt vé mới
                </button>
            </DialogContent>
        </Dialog>
    );
}

================
File: src/app/(event)/event/[id]/booking/payment/components/paymentMethod.tsx
================
'use client'

/* Package System */
import { useState } from "react";
import Image from "next/image";
import PaymentInfoDialog from "./dialogs/paymentInfoDialog";

/* Package Application */
import '@/../public/styles/events/payment.css';
import 'bootstrap/dist/css/bootstrap.min.css';

export default function PaymentMethod() {
    const [isDialogOpen, setIsDialogOpen] = useState(false);

    const [selectedMethod, setSelectedMethod] = useState("shopeepay");

    const paymentMethods = [
        { id: "shopeepay", name: "ShopeePay Wallet", image: "/images/shopeepay.png" },
        { id: "momo", name: "Momo Wallet", image: "/images/momo.png" },
        { id: "credit", name: "International Credit/Debit Card", image: "/images/visa.png" },
        { id: "atm", name: "ATM Card/Internet Banking", image: "/images/atm.png" },
    ];

    const handleOpenInfoDialog = () => {
        setIsDialogOpen(true);
    };

    return (
        <>
            <div className="col-7">
                <div className="container bg-white rounded-lg p-4 shadow-lg">
                    {/* Lưu ý cập nhật thông tin */}
                    <div className="alert alert-info bg-alert text-sm d-flex align-items-center">
                        <i className="bi bi-exclamation-circle mr-2"></i>
                        Lưu ý kiểm tra thông tin nhận vé. Nếu có thay đổi vui lòng&nbsp;
                        <a onClick={handleOpenInfoDialog} className="fw-bold text-primary">
                            cập nhật tại đây
                        </a>
                    </div>

                    {/* Thông tin nhận vé */}
                    <div className="mt-3 flex flex-col items-start">
                        <h2 className="fw-bold">Thông tin nhận vé</h2>
                        <p className="mb-1">Nguyễn Thanh Huệ &nbsp;&nbsp; +84123390876</p>
                        <p className="text-muted">customer@gmail.com</p>
                    </div>

                    {/* Phương thức thanh toán */}
                    <div className="mt-4 flex flex-col">
                        <h4 className="fw-bold self-start">Phương thức thanh toán</h4>
                        <div className="rounded-lg mt-5">
                            {paymentMethods.map((method) => (
                                <div
                                    key={method.id}
                                    className={`d-flex align-items-center h-14 justify-content-between border rounded-lg pl-3 pr-3 mb-2 cursor-pointer transition-all duration-300 
                                ${selectedMethod === method.id ? 'border-2 border-black shadow-[4px_4px_0px_0px_#0022BA]' : 'border-2 border-gray-300'}`}
                                    onClick={() => setSelectedMethod(method.id)}
                                >
                                    <div className="flex items-center">
                                        <input
                                            type="radio"
                                            name="paymentMethod"
                                            value={method.id}
                                            checked={selectedMethod === method.id}
                                            onChange={() => setSelectedMethod(method.id)}
                                            className="me-2"
                                        />
                                        <span className="fw-bold">{method.name}</span>
                                    </div>
                                    <Image className={`method-img rounded-lg ${method.id !== 'shopeepay' ? 'max-w-[107px] justify-end max-h-[38px] object-contain' : ''}`} src={method.image} alt={method.name} width={107} height={21.5} />
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
            <PaymentInfoDialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)} />
        </>
    );
}

================
File: src/app/(event)/event/[id]/booking/payment/components/ticketInfo.tsx
================
'use client'

/* Package System */
import Image from 'next/image';
import { useState } from 'react';

/* Package Application */
import QRPaymentDialog from "./dialogs/QRPaymenDialog";
interface EventProps {
    id: number;
    title: string;
    description: string;
    date: string;
    location: string;
}

interface TicketInformationProps {
    event: EventProps | null;
    totalTickets: number;
    totalAmount: number;
}



export default function TicketInformation({ event, totalTickets, totalAmount }: TicketInformationProps) {
    const [promoCode, setPromoCode] = useState('');
    const [isQRDialogOpen, setIsQRDialogOpen] = useState(false);

    const handleOpenQRDialog = () => {
        setIsQRDialogOpen(true);
    };

    return (
        <div className="col-5 border-start" style={{ borderLeft: '1px solid #ddd' }}>
            <div className='container'>
                <p className='title-event'>Chi tiết sự kiện</p>
                <div className='row mt-3 mb-3 text-start'>
                    <div className="col-md-4">
                        <Image
                            src='/images/dashboard/presentation_pic.png'
                            width={165}
                            height={110}
                            alt="Image of event"
                            style={{ width: "165px", height: "76px", objectFit: "cover" }}
                        />
                    </div>
                    {event ? (
                        <div className="col-md-8">
                            <p className='d-flex justify-content-start'>{event.title}</p>
                            <p className='d-flex justify-content-start'>
                                <i className="bi bi-geo-alt mr-2"></i>
                                {event.location}
                            </p>
                            <p className='d-flex justify-content-start'>
                                <i className="bi bi-calendar2-event mr-2"></i>
                                {event.date}
                            </p>
                        </div>
                    ) : (
                        <p>Đang tải dữ liệu...</p>
                    )}

                </div>
                <hr className="custom-hr" />
                <div className='row pt-4 pb-4'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p className='title-info'>Thông tin đặt vé</p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p>Chọn lại vé</p>
                    </div>
                </div>
                <div className='row fw-bold pt-2 pb-2'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p>Loại vé</p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p>Số lượng</p>
                    </div>
                </div>
                <div className='row'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p className='text-start'>
                            <span style={{ display: "block" }}>Early Bird Ticket</span>
                            <span style={{ display: "block" }}>599.000đ</span>
                        </p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p>{totalTickets}</p>
                    </div>
                </div>
                <hr className="custom-hr" />
                <div className='row flex flex-col pt-2 pb-3'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p className='fw-bold'>Mã khuyến mãi</p>
                    </div>
                    <div className="col-md-12 flex flex-row">
                        <input 
                            value={promoCode} 
                            onChange={(e) => setPromoCode(e.target.value)}
                            type="text"
                            className='form-control mr-4 mt-4 h-12 w-[60%]' 
                            placeholder='MÃ GIẢM GIÁ' 
                        />
                        <button disabled={promoCode === ''} className={`btn mt-4 h-12 w-[40%] ${promoCode !== '' ? 'btn-primary' : 'btn-disabled bg-[#dedede]'}`}>Áp dụng</button>
                    </div>
                </div>
                <hr className="custom-hr" />
                <div className='row pt-2 pb-3'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p>Tạm tính</p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p>{totalAmount}</p>
                    </div>
                </div>
                <hr className="custom-hr" />
                <div className='row pt-2 pb-3'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p style={{color: '#0C4762'}} className='fw-bold'>Tổng tiền</p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p style={{color: '#0C4762'}} className='fw-bold'>{totalAmount}</p>
                    </div>
                </div>
                <div className='row mt-2 mb-4'>
                    <p>Bằng việc tiến hành đặt mua</p><br/>
                    <p>Bạn đã đồng ý với các <a href='#' style={{color: '#0C4762',textDecoration:'underline'}}>Điều Kiện Giao Dịch Chung</a></p>
                </div>
                <div className='row'>
                    <button onClick={handleOpenQRDialog} className='h-11 rounded bg-[#51DACF] text-[#0C4762] font-bold hover:bg-[#3BB8AE]'>Thanh toán</button>
                </div>
            </div>
            <QRPaymentDialog open={isQRDialogOpen} onClose={() => setIsQRDialogOpen(false)} amount={totalAmount} qrImage="/images/sample-qr.png" />
        </div>
    )
}

================
File: src/app/(event)/event/[id]/booking/payment/page.tsx
================
"use client"

/* Package System */ 
import { useEffect, useState } from "react";
import 'bootstrap/dist/css/bootstrap.min.css';
import 'tailwindcss/tailwind.css';
import 'bootstrap-icons/font/bootstrap-icons.css';

/* Package Application */
import PaymentMethod from "./components/paymentMethod";
import Navigation from "../components/navigation";
import TicketInformation from "./components/ticketInfo";

const PaymentPage = () => {
  const [event, setEvent] = useState(null);
  const [totalTickets, setTotalTickets] = useState(0);
  const [totalAmount, setTotalAmount] = useState(0);

  useEffect(() => {
    fetchEventInfo();
  }, []);

  const fetchEventInfo = () => {
    const storedEvent = localStorage.getItem('event');
    const storedTotalTickets = localStorage.getItem('totalTickets');
    const storedTotalAmount = localStorage.getItem('totalAmount');

    if (storedEvent) setEvent(JSON.parse(storedEvent));
    if (storedTotalTickets) setTotalTickets(Number(storedTotalTickets));
    if (storedTotalAmount) setTotalAmount(Number(storedTotalAmount));
  }

  return (
    <div className="mt-5 mb-5">
      <Navigation title="Thanh toán" />
      <div className="px-32 py-0">
        <div className="row align-items-start mt-4">
          <PaymentMethod />
          <TicketInformation event={event} totalTickets={totalTickets} totalAmount={totalAmount} />
        </div>
      </div>
    </div>
  );
};

export default PaymentPage;

================
File: src/app/(event)/event/[id]/booking/question-form/components/dialogs/confirmDialog.tsx
================
'use client'

import { Dialog, DialogContent, DialogTitle } from "@mui/material";
import { Icon } from "@iconify/react";
import { useRouter } from 'next/navigation';

interface ConfirmDialogProps {
    open: boolean;
    onClose: () => void;
    id?: number;
}

export default function ConfirmDialog({ open, onClose, id }: ConfirmDialogProps) {
    const router = useRouter();

    const handleCancel = () => {
        onClose();
        router.push(`/event/${id}/booking/select-ticket`);
    };

    return (
        <Dialog open={open} onClose={onClose}>
            <div className="text-white dialog-header px-6 py-4 justify-center items-center flex relative" style={{ background: '#0C4762' }}>
                <DialogTitle className="!m-0 !p-0 text-lg text-center font-bold">Huỷ đơn hàng</DialogTitle>
                <button onClick={onClose} className="absolute right-2 top-2 px-1 py-1 close-btn">
                    <Icon icon="ic:baseline-close" width="20" height="20" />
                </button>
            </div>

            <DialogContent className="p-6 flex flex-col justify-center items-center">
                <Icon icon="material-symbols:warning" width="50" height="50"  color="#f59e0b"  />
                <p className="text-center">Bạn sẽ mất vị trí mình đã lựa chọn. Đơn hàng đang trong quá trinh thanh toán cũng sẽ bị ảnh hưởng. </p>
                <p className="text-center">Bạn có muốn tiếp tục?</p>
                <div className="flex gap-4 mt-4">
                    <button 
                        onClick={handleCancel} 
                        className="border-2 border-[#0C4762] text-[#0C4762] font-bold py-2 px-4 rounded bg-white hover:bg-[#0C4762] hover:text-white transition-all"
                    >
                        Hủy đơn
                    </button>
                    <button 
                        onClick={onClose} 
                        className="bg-[#0C4762] hover:bg-[#1d3945] text-white font-bold py-2 px-4 rounded transition-all"
                    >
                        Ở lại
                    </button>
                </div>

            </DialogContent>
        </Dialog>
    );
}

================
File: src/app/(event)/event/[id]/booking/question-form/components/questionList.tsx
================
'use client'
import { useState, useEffect } from "react";

export default function QuestionList({ onValidationChange }: { onValidationChange: (isValid: boolean) => void }) {
    const [phone, setPhone] = useState("");
    const [email, setEmail] = useState("");
    const [address, setAddress] = useState("");
    const [agree, setAgree] = useState(false);
    const [isValid, setIsValid] = useState(false);

    useEffect(() => {
        const isFormValid = phone.trim() !== "" && email.trim() !== "" && address.trim() !== "" && agree;
        setIsValid(isFormValid);
        onValidationChange(isFormValid); // Truyền trạng thái form lên component cha
    }, [phone, email, address, agree, onValidationChange]);

    return (
        <div className="col-7">
            <div className='container'>
                <form className="row g-3 needs-validation" noValidate>
                    <div className="alert alert-info bg-alert">
                        <i className="bi bi-exclamation-circle mr-2"></i>
                        Vé điện tử sẽ được gửi đến địa chỉ email của bạn, vui lòng đảm bảo địa chỉ email
                        của bạn là chính xác.
                    </div>

                    {!isValid && (
                        <div className="alert alert-danger">
                            <i className="bi bi-exclamation-triangle-fill mr-2"></i>
                            Vui lòng điền đầy đủ thông tin để tiếp tục
                        </div>
                    )}

                    <div className="col-md-12">
                        <label htmlFor="phone" className="form-label d-flex justify-content-start">
                            <b><span className='red-star'>*</span> Số điện thoại của bạn</b>
                        </label>
                        <input
                            type="text"
                            className="form-control custom-input"
                            id="phone"
                            placeholder="Điền câu trả lời của bạn"
                            value={phone}
                            onChange={(e) => setPhone(e.target.value)}
                            required
                        />
                        <div className="valid-feedback">Looks good!</div>
                    </div>
                    <div className="col-md-12">
                        <label htmlFor="mail" className="form-label d-flex justify-content-start">
                            <b><span className='red-star'>*</span> Email của bạn</b>
                        </label>
                        <input
                            type="email"
                            className="form-control custom-input"
                            id="mail"
                            placeholder="Điền câu trả lời của bạn"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required
                        />
                        <div className="valid-feedback">Looks good!</div>
                    </div>
                    <div className="col-md-12">
                        <label htmlFor="address" className="form-label d-flex justify-content-start">
                            <b><span className='red-star'>*</span> Địa điểm nhận quà (nếu có)</b>
                        </label>
                        <input
                            type="text"
                            className="form-control custom-input"
                            id="address"
                            placeholder="Điền câu trả lời của bạn"
                            value={address}
                            onChange={(e) => setAddress(e.target.value)}
                            required
                        />
                        <div className="valid-feedback">Looks good!</div>
                    </div>
                    <div className="col-12 text-start">
                        <label htmlFor="address" className="form-label">
                            <b><span className='red-star'>*</span> Vui lòng kiểm tra lại ĐỊA ĐIỂM của sự kiện trước khi thanh toán</b>
                        </label>
                        <div className="form-check d-flex justify-content-start">
                            <input
                                className="form-check-input mr-2"
                                type="radio"
                                id="checkAgree"
                                defaultValue=""
                                style={{ border: '1px solid black' }}
                                checked={agree}
                                onChange={() => setAgree(!agree)}
                                required
                            />
                            <label className="form-check-label" htmlFor="checkAgree">
                                Tôi đồng ý
                            </label>
                            <div className="invalid-feedback">You must agree before submitting.</div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    )
}

================
File: src/app/(event)/event/[id]/booking/question-form/components/ticketInfo.tsx
================
'use client';

import { useState } from 'react';
import Image from 'next/image';
import React from "react";
import { useRouter } from "next/navigation";
import ConfirmDialog from './dialogs/confirmDialog';

interface EventProps {
    id: number;
    title: string;
    description: string;
    date: string;
    location: string;
}

interface TicketInformationProps {
    event: EventProps | null;
    totalTickets: number;
    totalAmount: number;
    isFormValid: boolean;
}

export default function TicketInformation({ event, totalTickets, totalAmount, isFormValid }: TicketInformationProps) {
    const [openDialog, setOpenDialog] = useState(false);
    const router = useRouter();
    const handlePayment = () => {
        router.push(`/event/${event?.id}/booking/payment`);
    }

    return (
        <div className="col-5 border-start" style={{ borderLeft: '1px solid #ddd' }}>
            <div className='container'>
                <p className='title-event'>Chi tiết sự kiện</p>
                <div className='row mt-3 text-start'>
                    <div className="col-md-4">
                        <Image
                            src='/images/dashboard/presentation_pic.png'
                            width={165}
                            height={110}
                            alt="Image of event"
                            style={{ width: "165px", height: "76px", objectFit: "cover" }}
                        />
                    </div>
                    {event ? (
                        <div className="col-md-8">
                            <p className='d-flex justify-content-start'>{event.title}</p>
                            <p className='d-flex justify-content-start'>
                                <i className="bi bi-geo-alt mr-2"></i>
                                {event.location}
                            </p>
                            <p className='d-flex justify-content-start'>
                                <i className="bi bi-calendar2-event mr-2"></i>
                                {event.date}
                            </p>
                        </div>
                    ) : (
                        <p>Đang tải dữ liệu...</p>
                    )}
                </div>
                <hr className="custom-hr" />
                <div className='row'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p className='title-info'>Thông tin đặt vé</p>
                    </div>
                    {event && (
                        <div className="col-md-4 d-flex justify-content-end">
                            <p style={{ cursor: 'pointer', color: '#007bff' }} onClick={() => setOpenDialog(true)}>
                                Chọn lại vé
                            </p>
                        </div>
                    )}
                </div>
                <div className='row' style={{ fontWeight: 'bold' }}>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p>Loại vé</p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p>Số lượng</p>
                    </div>
                </div>
                <div className='row'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p className='text-start'>
                            <span style={{ display: "block" }}>Early Bird Ticket</span>
                            <span style={{ display: "block" }}>599.000đ</span>
                        </p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p>{totalTickets}</p>
                    </div>
                </div>
                <hr className="custom-hr" />
                <div className='row'>
                    <div className="col-md-8 d-flex justify-content-start">
                        <p>Tạm tính</p>
                    </div>
                    <div className="col-md-4 d-flex justify-content-end">
                        <p>{totalAmount}</p>
                    </div>
                </div>
                <div className='row mt-2 mb-4'>
                    <p>Vui lòng trả lời tất cả câu hỏi để tiếp tục</p>
                </div>
                <div className='row'>
                    {/* <button onClick={handlePayment} className='h-11 rounded bg-[#51DACF] text-[#0C4762] font-bold hover:bg-[#3BB8AE]'>Thanh toán</button> */}
                    <button onClick={handlePayment} className={isFormValid ? 'h-11 rounded bg-[#51DACF] text-[#0C4762] font-bold hover:bg-[#3BB8AE]' : 'btn-order-disable'}
                        disabled={!isFormValid}>Thanh toán
                    </button>
                </div>
            </div>
            <ConfirmDialog open={openDialog} onClose={() => setOpenDialog(false)} id={event?.id}/>
        </div>
    );
}

================
File: src/app/(event)/event/[id]/booking/question-form/page.tsx
================
'use client'

import React from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import 'tailwindcss/tailwind.css';
import '@/styles/admin/pages/Dashboard.css';
import '@/styles/admin/pages/BookingQuestionForm.css'
import { useEffect, useState } from 'react';
import QuestionList from './components/questionList';
import TicketInformation from './components/ticketInfo';
import Navigation from '../components/navigation';


export default function QuestionForm() {
    const [event, setEvent] = useState(null);
    const [totalTickets, setTotalTickets] = useState(0);
    const [totalAmount, setTotalAmount] = useState(0);
    const [isFormValid, setIsFormValid] = useState(false);
    // const [hasSelectedTickets, setHasSelectedTickets] = useState(false);

    useEffect(() => {
        // Lấy dữ liệu từ localStorage
        const storedEvent = localStorage.getItem('event');
        const storedTotalTickets = localStorage.getItem('totalTickets');
        const storedTotalAmount = localStorage.getItem('totalAmount');
        // const storedHasSelectedTickets = localStorage.getItem('hasSelectedTickets');

        if (storedEvent) setEvent(JSON.parse(storedEvent)); // Chuyển JSON string thành object
        if (storedTotalTickets) setTotalTickets(Number(storedTotalTickets));
        if (storedTotalAmount) setTotalAmount(Number(storedTotalAmount));
        // if (storedHasSelectedTickets) setHasSelectedTickets(storedHasSelectedTickets === 'true');
    }, []);

    return (
        <div className="mt-5 mb-5">
            <Navigation title="Bảng câu hỏi" />
            <div className="px-32 py-0">
                <div className="row align-items-start mt-4">
                    <QuestionList onValidationChange={setIsFormValid} />
                    <TicketInformation event={event} totalTickets={totalTickets} totalAmount={totalAmount} isFormValid={isFormValid} />
                </div>

            </div>
        </div>
    )
}

================
File: src/app/(event)/event/[id]/booking/select-ticket/components/selectTicket.tsx
================
// import { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'tailwindcss/tailwind.css';

interface Ticket {
    id: number;
    name: string;
    price: number;
    available: boolean;
    description: string;
}

interface SelectTicketProps {
    tickets: Ticket[];
    selectedTickets: { [key: number]: number };
    setSelectedTickets: React.Dispatch<React.SetStateAction<{ [key: number]: number }>>;
    selectedTicket: number | null;
    setSelectedTicket: React.Dispatch<React.SetStateAction<number | null>>;
}

export default function SelectTicket({
    tickets,
    selectedTickets,
    setSelectedTickets,
    selectedTicket,
    setSelectedTicket
}: SelectTicketProps) {
    const handleIncrease = (id: number) => {
        setSelectedTickets((prev) => ({
            ...prev,
            [id]: (prev[id] || 0) + 1,
        }));
    };

    const handleDecrease = (id: number) => {
        setSelectedTickets((prev) => {
            if (prev[id] && prev[id] > 0) {
                return { ...prev, [id]: prev[id] - 1 };
            }
            return prev;
        });
    };

    const handleSelect = (id: number) => {
        setSelectedTicket(id);
    };

    return (
        <div className="px-32 py-0">
            <hr className="mb-8 border-2 border-[#0C4762]" />

            <div className="grid grid-cols-4 gap-4">
                {tickets.map((ticket) => (
                    <div
                        key={ticket.id}
                        className={`border rounded-lg p-3 text-center cursor-pointer transition-all duration-300 bg-white
                        ${selectedTicket === ticket.id ? 'border-2 border-black shadow-[8px_8px_0px_0px_#0C4762]' : 'border-2 border-gray-800'}
                        ${!ticket.available ? 'opacity-50 cursor-not-allowed' : ''}`}
                        onClick={() => ticket.available && handleSelect(ticket.id)}
                    >
                        <h3 className="font-semibold">{ticket.name}</h3>

                        {/* Mô tả với icon cảnh báo tròn */}
                        <div className="bg-[#F4EEEE] text-gray-700 rounded-lg p-2 mt-2 text-sm text-left flex items-start">
                            <div className="flex items-center justify-center w-6 h-6 mr-2">
                                <i className="bi bi-exclamation-circle-fill text-orange-600"></i>
                            </div>
                            <p className="whitespace-pre-line">{ticket.description}</p>
                        </div>

                        <p className="font-semibold mt-2">{ticket.price.toLocaleString()}đ</p>

                        {ticket.available ? (
                            <div className="flex items-center justify-center mt-2">
                                <button
                                    className={`px-3 py-1 border rounded-l bg-gray-100 hover:bg-gray-200 ${selectedTickets[ticket.id] ? '' : 'opacity-50 cursor-not-allowed'}`}
                                    onClick={() => handleDecrease(ticket.id)}
                                    disabled={!selectedTickets[ticket.id]}
                                >
                                    -
                                </button>
                                <span className="px-4 font-semibold">{selectedTickets[ticket.id] || 0}</span>
                                <button
                                    className="px-3 py-1 border rounded-r bg-gray-100 hover:bg-gray-200"
                                    onClick={() => handleIncrease(ticket.id)}
                                >
                                    +
                                </button>
                            </div>
                        ) : (
                            <p className="text-red-500 mt-2 font-semibold">Hết vé</p>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
}

================
File: src/app/(event)/event/[id]/booking/select-ticket/components/ticketInfo.tsx
================
// booking/select-ticket/components/ticketInfor.tsx
'use client';

import { Calendar, MapPin, Ticket } from 'lucide-react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'tailwindcss/tailwind.css';
import { useRouter } from 'next/navigation';
import Image from 'next/image';

interface EventProps {
    id: number;
    title: string;
    description: string;
    date: string;
    location: string;
}

interface TicketInforProps {
    event: EventProps;
    totalTickets: number;
    totalAmount: number;
    hasSelectedTickets: boolean;
}

export default function TicketInfor({ 
    event, 
    totalTickets,
    totalAmount,
    hasSelectedTickets
}: TicketInforProps) {
    const router = useRouter();

    const handleContinue = () => {
        localStorage.setItem('event', JSON.stringify(event)); 
        localStorage.setItem('totalTickets', totalTickets.toString());
        localStorage.setItem('totalAmount', totalAmount.toString());
        localStorage.setItem('hasSelectedTickets', hasSelectedTickets.toString());
    
        // Điều hướng đến trang tiếp theo
        router.push(`/event/${event.id}/booking/question-form`);
    };
    
    return (
        <div className="flex flex-col md:flex-row px-32 py-8 items-center md:items-start space-y-4 md:space-y-0 md:space-x-6">
            <div className="w-full md:w-1/2">
                <Image src="/images/event.png" alt="Event" width={500} height={300} className="w-full h-64 object-cover rounded-lg" />
            </div>

            <div className="w-full md:w-1/2">
                <h2 className="text-lg font-semibold">{event.title}</h2>
                <div className="text-gray-500 flex items-center space-x-2 mt-4">
                    <Calendar size={18} /> <span>{event.date}</span>
                </div>
                <div className="text-gray-500 flex items-center space-x-2 mt-2">
                    <MapPin size={18} /> <span>{event.location}</span>
                </div>
                <p className="text-sm text-gray-600 mt-2">{event.description}</p>
                <div className="flex items-center space-x-2 mt-4">
                    <Ticket size={18} /> <span className="text-gray-700">x{totalTickets}</span>
                </div>

                <button 
                    className={`w-full p-2 rounded-lg mt-4 ${
                        hasSelectedTickets 
                            ? 'bg-[#51DACF] text-[#0C4762] font-bold hover:bg-[#3BB8AE]' 
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    }`}
                    disabled={!hasSelectedTickets}
                    onClick={handleContinue} 
                >
                    {hasSelectedTickets 
                        ? `Tiếp tục - ${totalAmount.toLocaleString()}đ` 
                        : 'Vui lòng chọn vé'}
                </button>
            </div>
        </div>
    );
}

================
File: src/app/(event)/event/[id]/booking/select-ticket/page.tsx
================
// booking/select-ticket/page.tsx
'use client';

import Navigation from '../components/navigation';
import TicketInfor from './components/ticketInfo';
import SelectTicket from './components/selectTicket';
import { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import 'tailwindcss/tailwind.css';

const event = {
    id: 0,
    title: 'Dream world wide in Jakarta',
    description: "Marty travels back in time using an eccentric scientist's time machine...",
    date: '20:00 - 23:00, 25 tháng 10, 2024',
    location: 'Đường Nguyễn Huệ, Quận 1, TP.HCM',
};

const tickets = [
    { id: 1, name: 'Early Bird 1 Ticket', price: 499000, available: false, description: 'Khán giả tự do chọn vị trí đứng trong khu vực sự kiện\nHỗ trợ LED Live cam để theo dõi toàn bộ sự kiện' },
    { id: 2, name: 'Early Bird Ticket', price: 599000, available: true, description: 'Khán giả tự do chọn vị trí đứng trong khu vực sự kiện' },
    { id: 3, name: 'Office Ticket', price: 699000, available: true, description: 'Ghế ngồi khu vực VIP, tầm nhìn tốt nhất' },
    { id: 4, name: 'Office Ticket', price: 699000, available: false, description: 'Ghế ngồi khu vực thường' },
];

export default function SelectTicketPage() {
    const [selectedTickets, setSelectedTickets] = useState<{ [key: number]: number }>({});
    const [selectedTicket, setSelectedTicket] = useState<number | null>(null);

    // Tính tổng số vé và tổng tiền
    const totalTickets = Object.values(selectedTickets).reduce((a, b) => a + b, 0);
    const totalAmount = Object.entries(selectedTickets).reduce(
        (sum, [id, quantity]) => sum + (tickets.find(t => t.id === Number(id))?.price || 0) * quantity,
        0
    );

    return (
        <div>
            <Navigation title="Chọn vé" />
            <TicketInfor 
                event={event} 
                totalTickets={totalTickets}
                totalAmount={totalAmount}
                hasSelectedTickets={totalTickets > 0}
            />
            <SelectTicket 
                tickets={tickets}
                selectedTickets={selectedTickets}
                setSelectedTickets={setSelectedTickets}
                selectedTicket={selectedTicket}
                setSelectedTicket={setSelectedTicket}
            />
        </div>
    );
}

================
File: src/app/(event)/event/[id]/loading.tsx
================
export default function EventLoading() {
    return (
        <div className="mt-5 mb-5 animate-pulse">
            {/* Event Box Skeleton */}
            <div className="bg-gray-200 h-96 w-full rounded-lg mb-8"></div>

            <div className="row align-items-start">
                <div className="col-lg-8 col-md-12 custom-col-left">
                    {/* Description Skeleton */}
                    <div className="bg-white p-4 rounded-lg shadow mb-4">
                        <div className="h-6 bg-gray-200 rounded w-1/4 mb-4"></div>
                        <div className="space-y-3">
                            <div className="h-4 bg-gray-200 rounded w-full"></div>
                            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
                            <div className="h-4 bg-gray-200 rounded w-4/6"></div>
                        </div>
                    </div>

                    {/* Ticket Details Skeleton */}
                    <div className="bg-white p-4 rounded-lg shadow">
                        <div className="h-6 bg-gray-200 rounded w-1/3 mb-4"></div>
                        <div className="space-y-4">
                            <div className="h-20 bg-gray-200 rounded"></div>
                            <div className="h-20 bg-gray-200 rounded"></div>
                        </div>
                    </div>
                </div>

                {/* More Information Skeleton */}
                <div className="col-lg-4 col-md-12">
                    <div className="bg-white p-4 rounded-lg shadow">
                        <div className="h-6 bg-gray-200 rounded w-1/2 mb-4"></div>
                        <div className="space-y-3">
                            <div className="h-4 bg-gray-200 rounded w-full"></div>
                            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Comment Section Skeleton */}
            <div className="bg-white p-4 rounded-lg shadow mt-8">
                <div className="h-6 bg-gray-200 rounded w-1/4 mb-4"></div>
                <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                        <div className="h-10 w-10 bg-gray-200 rounded-full"></div>
                        <div className="flex-1">
                            <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
                            <div className="h-4 bg-gray-200 rounded w-full"></div>
                        </div>
                    </div>
                    <div className="flex items-center space-x-4">
                        <div className="h-10 w-10 bg-gray-200 rounded-full"></div>
                        <div className="flex-1">
                            <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
                            <div className="h-4 bg-gray-200 rounded w-full"></div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Recommended Events Skeleton */}
            <div className="d-flex justify-center mt-8">
                <div className="w-full md:w-5/6">
                    <div className="h-6 bg-gray-200 rounded w-1/3 mb-4"></div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        {[1, 2, 3].map((i) => (
                            <div key={i} className="h-64 bg-gray-200 rounded"></div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
}

================
File: src/app/(event)/event/[id]/page.tsx
================
import EventDetailClient from '../components/eventDetail';

// Fetch dữ liệu trong Server Component
export default async function EventDetail(props: { params: Promise<{ id: number }> }) {
    const params = await props.params;
    const { id } = params;

    // let event = null;
    const event = {
        id: id,
        title: 'Dream world wide in jakatra',
        description: 'DesignHub organized a 3D Modeling Workshop using Blender on 16th February at 5 PM. The workshop taught participants the magic of creating stunning 3D models and animations using Blender. It was suitable for both beginners and experienced users. The event was followed by a blender-render competition, which added to the excitement.',
        date: '0:00 - 23:00, 25 tháng 10, 2024',
        location: 'Đường Nguyễn Huệ, Quận 1, TP.HCM',
    };
    /* try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/events/${id}`, {
            // cache: 'no-store', // Đảm bảo luôn lấy dữ liệu mới từ server
        });
        if (response.ok) {
            event = await response.json();
        }
    } catch (error) {
        console.error('Error fetching event:', error);
    }

    // Trường hợp không tìm thấy sự kiện
    if (!event) {
        return <div>Event not found</div>;
    } */

    return (
        <div>
            {/* <NavigationBar /> */}
            <EventDetailClient event={event} />
            {/* <Footer /> */}
        </div>
    );
}

================
File: src/app/(event)/event/components/comment.tsx
================
"use client";

import React from "react";
import Image from "next/image";

const Comment = () => {
    return (
        <div className="w-full cmt-pad mt-8">
            <h2 className="text-xl md:text-2xl font-bold">
                Bình luận
            </h2>

            <div className="card mt-3">
                <div className="card-body">
                    <div className="d-flex flex-start align-items-center">
                        <Image
                            className="rounded-circle shadow-1-strong me-3"
                            src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/img%20(19).webp"
                            alt="avatar"
                            width={60}
                            height={60}
                            unoptimized
                        />
                        <div>
                            <h6 className="fw-bold mb-1" style={{ color: "#0C4762" }}>Lily Coleman</h6>
                            <p className="text-muted small mb-0">
                                Shared publicly - Jan 2020
                            </p>
                        </div>
                    </div>
                    <p className="mt-3 mb-4 pb-2">
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
                        eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
                        enim ad minim veniam, quis nostrud exercitation ullamco laboris
                        nisi ut aliquip consequat.
                    </p>
                    <div className="small d-flex justify-content-start">
                        <a href="#!" className="d-flex align-items-center me-3" style={{ textDecoration: "none" }}>
                            <i className="bi bi-hand-thumbs-up mr-2"></i>
                            <p className="mb-0">Thích</p>
                        </a>
                        <a href="#!" className="d-flex align-items-center me-3" style={{ textDecoration: "none" }}>
                            <i className="bi bi-chat-dots mr-2"></i>
                            <p className="mb-0">Bình luận</p>
                        </a>
                        <a href="#!" className="d-flex align-items-center me-3" style={{ textDecoration: "none" }}>
                            <i className="bi bi-share-fill mr-2"></i>
                            <p className="mb-0">Chia sẻ</p>
                        </a>
                    </div>
                </div>
                <div
                    className="card-footer py-3 border-0"
                    style={{ backgroundColor: "#f8f9fa" }}
                >
                    <div className="d-flex align-items-start w-100">
                        {/* Avatar */}
                        <Image
                            className="rounded-circle shadow-1-strong me-3"
                            src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/img%20(19).webp"
                            alt="avatar" width={40} height={40}
                            unoptimized
                        />

                        <div className="w-100">
                            <textarea
                                className="form-control mb-2"
                                id="textAreaExample"
                                style={{ background: "#fff", resize: "none", height: "100px" }}
                                placeholder="Nhập bình luận của bạn"
                                defaultValue={""}
                            />

                            <div className="d-flex align-items-center justify-content-between">
                                <div className="d-flex align-items-center">
                                    <i className="bi bi-type-bold me-2" style={{ cursor: "pointer" }}></i>
                                    <i className="bi bi-type-italic me-2" style={{ cursor: "pointer" }}></i>
                                    <i className="bi bi-type-strikethrough me-3" style={{ cursor: "pointer" }}></i>

                                    <label
                                        htmlFor="imageUpload"
                                        className="d-inline-flex align-items-center"
                                        style={{ cursor: "pointer", marginTop: "2px" }}
                                    >
                                        <i className="bi bi-upload"></i>
                                    </label>
                                    <input type="file" id="imageUpload" className="d-none" accept="image/*" />
                                </div>
                                <div className='mt-2'>
                                    <button className="btn-post btn-sm me-2">Post comment</button>
                                    <button className="btn-cancel btn-sm">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
};

export default Comment;

================
File: src/app/(event)/event/components/description.tsx
================
'use client';

import { useState } from "react";
import React from "react";

interface DescriptionProps {
    description: string;
}

export default function Description({ description }: DescriptionProps) {
    const [isExpanded, setIsExpanded] = useState(false);

    return (
        <div className="flex justify-center mt-8 ml-2">
            <div className="w-full md:w-5/6">
                <h2 className="text-xl md:text-2xl font-bold">Mô tả</h2>
                <div 
                    className={`mt-2 overflow-hidden transition-all duration-500 ${isExpanded ? 'max-h-full' : 'max-h-24'}`}
                    style={{ lineHeight: "1.6" }} 
                >
                    <p className="card-text">{description}</p>
                </div>
                <div
                    className="d-flex justify-content-center div-more cursor-pointer mt-2"
                    onClick={() => setIsExpanded(!isExpanded)}
                >
                    {isExpanded ? (
                        <i className="bi bi-chevron-up"></i>
                    ) : (
                        <i className="bi bi-chevron-down"></i>
                    )}
                </div>
            </div>
        </div>
    );
}

================
File: src/app/(event)/event/components/eventBox.tsx
================
'use client';

import React from 'react';
import { useRouter } from 'next/navigation';

interface EventProps {
    title: string;
    description: string;
    date: string;
    location: string;
}

export default function EventBox({ event }: { event: EventProps }) {
    const router = useRouter(); // Sử dụng useRouter

    return (
        <div className="d-flex justify-content-center px-4">
            <div className="eve-image d-flex justify-content-center align-items-center">
                {/* Mask phủ lên hình ảnh */}
                <div className="mask mask-img"></div>

                {/* Nút "Quay lại" */}
                <div className="back-button-wrapper position-absolute mt-4">
                    <button type="button" className="btn-back" onClick={() => router.back()}>
                        <i className="bi bi-chevron-left mr-2" style={{ fontSize: '14px' }}></i>
                        Quay lại
                    </button>
                </div>

                <div className="eve-padding">
                    <div className="row justify-content-between">
                        {/* Thông tin sự kiện */}
                        <div className="col-lg-7 col-md-12 p-0 d-flex align-items-center text-left" style={{ zIndex: 2 }}>
                            <div>
                                <p className="txt-name-event-title">{event.title}</p>
                                <p className="card-text" style={{ color: 'white' }}>{event.description}</p>
                                <p className="card-text view-location" onClick={() => document.getElementById('event-location')?.scrollIntoView({ behavior: 'smooth' })}>
                                    <i className="bi bi-geo-alt mr-2"></i>
                                    Xem bản đồ
                                </p>
                            </div>
                        </div>

                        {/* Thông tin ngày & giờ, địa điểm */}
                        <div className="col-lg-5 col-md-12 p-0 d-flex justify-content-end align-items-center" style={{ zIndex: 2 }}>
                            <div className="card" style={{ width: '385px' }}>
                                <div className="card-body px-4 mt-2 mb-3">
                                    <h5 className="card-title title-box">Ngày & giờ</h5>
                                    <p className="card-text m-0 text-body-secondary">
                                        <i className="bi bi-calendar2-event mr-2"></i>
                                        {event.date}
                                        <button
                                            type="button" className="btn btn-outline-dark ml-6 mt-2 mb-2 btn-date"
                                            onClick={() => document.getElementById('info-ticket')?.scrollIntoView({ behavior: 'smooth' })}
                                        >
                                            + 4 ngày khác
                                        </button>
                                    </p>
                                    <p className="card-text text-add p-0">Thêm vào lịch</p>

                                    <h5 className="card-title mt-2 title-box">Địa điểm</h5>
                                    <p className="card-text text-body-secondary mb-3">
                                        <i className="bi bi-geo-alt mr-2"></i>
                                        {event.location}
                                    </p>

                                    <hr />

                                    <div className="d-flex justify-content-center align-items-center mt-3 mb-2">
                                        <h5 className="card-title title-box text-center w-100">
                                            Giá từ
                                            <span className="ml-2 text-teal-400" style={{ cursor: "pointer" }}>
                                                350.000đ
                                                <i className="bi bi-chevron-right ml-1" style={{ fontSize: 18 }} />
                                            </span>
                                        </h5>
                                    </div>

                                    <div className="d-flex justify-content-center">
                                        <button type="button" className="btn-buy-now" onClick={() => document.getElementById('info-ticket')?.scrollIntoView({ behavior: 'smooth' })}>
                                            Mua vé ngay
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

================
File: src/app/(event)/event/components/eventDetail.tsx
================
'use client'

/* Package System */
import React from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import 'tailwindcss/tailwind.css';

/* Package Application */
import '@/styles/admin/pages/EventDetail.css';
import '@/styles/admin/pages/Dashboard.css';
import Comment from "./comment";
import Description from "./description";
import TicketDetails from "./ticketDetails";
import MoreInformation from './moreInformation';
import EventSlider from '../../../(dashboard)/components/dashboard/eventSlider';
import EventBox from './eventBox';
import { useFetchRecommendedEvents } from '@/app/(dashboard)/libs/hooks/useFetchRecommendedEvents';
import EventLoading from '../[id]/loading';
// import { useRouter } from 'next/router';

interface EventProps {
    id: number;
    title: string;
    description: string;
    date: string;
    location: string;
}

// Client component
export default function EventDetailClient({ event }: { event: EventProps }) {
    const { events, loading, error } = useFetchRecommendedEvents();

    if (loading) {
        return <EventLoading />;
    }

    if (error) {
        return <div>{error}</div>;
    }

    //const { specialEvents, trendingEvents, onlyOnEve } = events;

    // const router = useRouter();

    // const handleBuyTicket = () => {
    //     router.push(`/event/${event.id}/booking/select-ticket`);
    // }

    return (
        <div className="mt-5 mb-5">
            <EventBox event={event} />

            <div className="row align-items-start">
                <div className="col-lg-8 col-md-12 custom-col-left ">
                    <Description description={event.description} />
                    <TicketDetails />
                </div>
                <MoreInformation title={event.title} location={event.location} />
            </div>

            <Comment />

            {/* Events Section */}
            <div className="d-flex justify-center mt-8">
                <div className="w-full md:w-5/6">
                    <EventSlider
                        title="Các sự kiện khác"
                        subtitle="Bạn có thể thích"
                        events={events}
                        showViewMore={true}
                    />
                </div>
            </div>
        </div>
    );
}

================
File: src/app/(event)/event/components/moreInformation.tsx
================
'use client';

import Image from "next/image";

interface MoreInformationProps {
    title: string;
    location: string;
}

export default function MoreInformation({ title, location }: MoreInformationProps) {
    return (
        <div className="col-lg-4 col-md-12" id="event-location">
            {/* Location */}
            <div className="flex mt-8 mr-2">
                <div className="w-full md:w-5/6">
                    <h2 className="text-xl md:text-2xl font-bold mb-2">
                        Địa điểm sự kiện
                    </h2>
                    <div className="ratio ratio-16x9">
                        <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d117996.95037632967!2d-74.05953969406828!3d40.75468158321536!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c2588f046ee661%3A0xa0b3281fcecc08c!2sManhattan%2C%20Nowy%20Jork%2C%20Stany%20Zjednoczone!5e1!3m2!1spl!2spl!4v1672242444695!5m2!1spl!2spl" allowFullScreen loading="lazy" referrerPolicy="no-referrer-when-downgrade"></iframe>
                    </div>
                    <h5 className="card-title mt-2">
                        {title}
                    </h5>
                    <p className="card-text mt-2">
                        <i className="bi bi-geo-alt mr-2"></i>
                        {location}
                    </p>
                </div>
            </div>

            {/* Tags */}
            <div className="flex mt-8 mr-2">
                <div className="w-full md:w-5/6">
                    <h2 className="text-xl md:text-2xl font-bold">
                        Tags
                    </h2>
                    <div className="mt-2">
                        <a className="txt-tags mr-4" href="#">Indonesia event</a>
                        <a className="txt-tags mr-4" href="#">Seminar</a>
                        <a className="txt-tags mr-4" href="#">Hot</a>
                        <a className="txt-tags mr-4" href="#">Music</a>
                    </div>
                </div>
            </div>

            {/* Share with friends */}
            <div className="flex mt-8 mr-2">
                <div className="w-full md:w-5/6">
                    <h2 className="text-xl md:text-2xl font-bold">
                        Chia sẻ với bạn bè
                    </h2>

                    <div className="row-app mt-3">
                        <Image
                            className="img-app mr-2"
                            src='/images/detail/Facebook.png'
                            alt="facebook-icon"
                            width={32}
                            height={32}
                        />
                        <Image
                            className="img-app mr-2 ml-2"
                            src='/images/detail/WhatsApp.png'
                            alt="WhatsApp-icon"
                            width={32}
                            height={32}
                        />
                        <Image
                            className="img-app mr-2 ml-2"
                            src='/images/detail/LinkedIn.png'
                            alt="LinkedIn-icon"
                            width={32}
                            height={32}
                        />
                        <Image
                            className="img-app ml-2"
                            src='/images/detail/Twitter.png'
                            alt="Twitter-icon"
                            width={32}
                            height={32}
                        />
                    </div>
                </div>
            </div>
        </div>
    )
};

================
File: src/app/(event)/event/components/ticketDetails.tsx
================
'use client';

import { useState } from "react";

const TicketDetails = () => {
    const [isTicketInfoExpanded, setIsTicketInfoExpanded] = useState(false);
    const [isTicketNoteExpanded, setIsTicketNoteExpanded] = useState(false);

    return (
        <>
            <div className="flex justify-center mt-8 ml-2" id="info-ticket">
                <div className="w-full md:w-5/6">
                    <h2 className="text-xl md:text-2xl font-bold">
                        Thông tin vé
                    </h2>
                    <div className="card mt-3">
                        <ul className="list-group list-group-flush">
                            <li className="list-group-item li-ticket">
                                <div className="d-flex justify-content-between align-items-center">
                                    {/* Nút toggle */}
                                    <div className="d-flex text-ticket">
                                        <div className="mr-2" onClick={() => setIsTicketInfoExpanded(!isTicketInfoExpanded)}>
                                            {isTicketInfoExpanded ? (<i className="bi bi-chevron-down"></i>)
                                                : (<i className="bi bi-chevron-right"></i>)}
                                        </div>
                                        20:00 - 23:00, 25 tháng 1, 2024
                                    </div>
                                    <button type="button" className="btn-buy">Mua vé ngay</button>
                                </div>

                                {/* Phần mở rộng "Vé" */}
                                {isTicketInfoExpanded && (
                                    <ul className="ul-ticket-item">
                                        <hr></hr>
                                        <li className="list-group-item li-ticket-item p-0">
                                            <div className="d-flex justify-content-between align-items-center mt-3 mb-3">
                                                <div className="d-flex ml-4 text-ticket" >
                                                    Vé thường
                                                </div>
                                                <div className="d-flex flex-column align-items-end">
                                                    <p className="price mb-0">308.000đ</p>
                                                </div>
                                            </div>
                                        </li>
                                        <hr></hr>
                                        <li className="list-group-item li-ticket-item p-0">
                                            <div className="d-flex justify-content-between align-items-center mt-3 mb-3">
                                                <div className="d-flex ml-3 text-ticket" >
                                                    <div className="mr-2" onClick={() => setIsTicketNoteExpanded(!isTicketNoteExpanded)}>
                                                        {isTicketNoteExpanded ? (<i className="bi bi-chevron-down"></i>)
                                                            : (<i className="bi bi-chevron-right"></i>)}
                                                    </div>
                                                    Vé ưu đãi
                                                </div>
                                                <div className="d-flex flex-column align-items-end">
                                                    <p className="price mb-0">278.000đ</p>
                                                </div>
                                            </div>
                                            {/* Phần mở rộng "Vé ưu đãi" */}
                                            {isTicketNoteExpanded && (
                                                <ul className="ul-ticket-item">
                                                    <li className="list-group-item li-ticket-item p-0">
                                                        <div className="d-flex justify-content-between align-items-center mt-3 mb-3">
                                                            <p className="card-text ml-3" style={{ color: '#F4EEEE' }}>
                                                                Vé ưu đãi giảm 10% dành cho nhóm khách đăng ký trên 4 slot
                                                            </p>
                                                        </div>
                                                    </li>
                                                </ul>
                                            )}
                                        </li>
                                    </ul>
                                )}
                            </li>
                            <li className="list-group-item li-ticket">
                                <div className="d-flex justify-content-between align-items-center">
                                    <div className="d-flex mr-2 text-ticket">
                                        <i className="bi bi-chevron-right mr-2"></i>
                                        20:00 - 23:00, 25 tháng 10, 2024
                                    </div>
                                    <div className="d-flex flex-column align-items-end">
                                        <p className="price-sold-out mb-2">250.000đ</p>
                                        <button type="button" className="btn-sold-out">Hết vé</button>
                                    </div>
                                </div>
                            </li>
                            <li className="list-group-item li-ticket">
                                <div className="d-flex justify-content-between align-items-center">
                                    <div className="d-flex mr-2 text-ticket">
                                        <i className="bi bi-chevron-right mr-2"></i>
                                        20:00 - 23:00, 25 tháng 8, 2024
                                    </div>
                                    <button type="button" className="btn-disable">Vé chưa mở bán</button>
                                </div>
                            </li>
                            <li className="list-group-item li-ticket">
                                <div className="d-flex justify-content-between align-items-center">
                                    <div className="d-flex mr-2 text-ticket">
                                        <i className="bi bi-chevron-right mr-2"></i>
                                        20:00 - 23:00, 25 tháng 10, 2025
                                    </div>
                                    <button type="button" className="btn-disable">Vé ngừng bán</button>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            {/* Contact */}
            <div className="flex justify-center mt-8 ml-2">
                <div className="w-full md:w-5/6">
                    <h2 className="text-xl md:text-2xl font-bold">
                        Liên hệ người tổ chức
                    </h2>
                    <p className="card-text mt-2">
                        Vui lòng truy cập <a href="#">www.sneakypeeks.com</a> và tham khảo phần Câu hỏi thường gặp để biết thêm chi tiết
                    </p>
                </div>
            </div>
        </>
    )
};

export default TicketDetails;

================
File: src/app/(event)/layout.tsx
================
import Footer from "../(dashboard)/components/common/footer"
import NavigationBar from "../(dashboard)/components/common/navigationBar"
import { Providers } from "../provider"

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <Providers>
          <NavigationBar />
          <main>{children}</main>
          <Footer />
        </Providers>
      </body>
    </html>
  )
}

================
File: src/app/(temp)/drawSeatmap/components/seatmap.tsx
================
// import React from "react";
// import { SeatMap as SeatMapType, Section, Row, Seat } from "./seatmapType";

// interface SeatMapProps {
//   seatMap: SeatMapType;
// }

// const SeatMap: React.FC<SeatMapProps> = ({ seatMap }) => {
//   if (!seatMap) return <p>No seat map available</p>;
//   return (
//     <svg
//       width="900"
//       height="600"
//       viewBox={seatMap.viewBox}
//       xmlns="http://www.w3.org/2000/svg"
//     >
//       {seatMap.Section.map((section: Section) => (
//         <g key={section.id}>
//           {/* Render Section Elements */}
//           {section.element &&
//             Array.isArray(section.element) &&
//             section.element.map((element, index) => {
//               if (element && element.type === "path") {
//                 return (
//                   <path
//                     key={index}
//                     d={element.data}
//                     fill={element.fill}
//                     transform={`translate(${element.x}, ${element.y})`}
//                   />
//                 );
//               }
//               return null;
//             })}

//           {/* Render Rows and Seats */}
//           {section.Row &&
//             section.Row.map((row: Row) => (
//               <g key={row.id}>
//                 {/* Render Seats */}
//                 {row.Seat.map((seat: Seat) => (
//                   <circle
//                     key={seat.id}
//                     cx={seat.positionX[0]}
//                     cy={seat.positionY[0]}
//                     r={5} // Kích thước ghế (bán kính)
//                     fill={ seat.status === 1 ? "#00f" : "#f00"} // Màu ghế
//                     stroke="#000" // Viền ghế
//                     strokeWidth={1}
//                   >
//                     <title>{`${row.name}-${seat.name}`}</title>
//                   </circle>
//                 ))}
//               </g>
//             ))}
//         </g>
//       ))}
//     </svg>
//   );
// };

// export default SeatMap;

================
File: src/app/(temp)/drawSeatmap/components/seatmapType.ts
================
import { JsonValue } from "type-fest";

export interface Seat {
  id: number;
  name: string;
  rowId: number;
  position: number;
  positionX: Float32Array; // Đổi thành `number` vì dữ liệu API thường trả kiểu `number`
  positionY: Float32Array;
  createdAt: Date;
  status: number;
}

export interface Row {
  id: number;
  name: string;
  sectionId: number;
  createdAt: Date;
  Seat: Seat[];
}

export interface Section {
  id: number;
  name: string;
  seatmapId: number;
  createdAt: Date;
  isStage: boolean;
  element?: JsonValue;
  attribute: JsonValue;
  ticketTypeId?: string;
  Row?: Row[];
}

export interface SeatMap {
  id: number;
  name: string;
  createdAt: Date;
  viewBox: string;
  status: number;
  Section: Section[];
}

================
File: src/app/(temp)/drawSeatmap/page.tsx
================
"use client"

import React, { useState, useEffect } from "react";
import axios from "axios";
// import SeatMap from "./components/seatmap";
// import { SeatMap as SeatMapType } from "./components/seatmapType";

const TempPage: React.FC = () => {
  // const [seatMapData, setSeatMapData] = useState<SeatMapType | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [showingIdList, setShowingIdList] = useState<string[]>([]);
  const [selectedShowingId, setSelectedShowingId] = useState<string>("");
  useEffect(() => {
    const fetchShowingIdList = async () => {
      try {
        const result = await axios.get("http://localhost:3001/api/showing/all-showings");
        setShowingIdList(result.data.data); // Lưu dữ liệu vào state
        console.log("Showing ID list:", result.data.data);
      } catch (error) {
        console.error("Error fetching showing ID list:", error);
      }
    };

    fetchShowingIdList();
  }, []); // Chỉ chạy 1 lần khi component mount
  useEffect(() => {
    const fetchSeatMap = async () => {
      try {
        const result = await axios.get(`http://localhost:3001/api/showing/seatmap?showingId=${selectedShowingId}`);
        // setSeatMapData(result.data.data); // Lưu dữ liệu vào state
        console.log("Seat map data:", result.data.data);
      } catch (error) {
        console.error("Error fetching seat map data:", error);
      } finally {
        setLoading(false); // Tắt trạng thái loading
      }
    };

    fetchSeatMap();
  }, [selectedShowingId]); // Chỉ chạy 1 lần khi component mount

  if (loading) return <p>Loading...</p>;

  return (
    <>
    <div>
      <h1>Seat Map</h1>
      <select onChange={(e) => setSelectedShowingId(e.target.value)}>
        {showingIdList.map((showingId) => (
          <option key={showingId} value={showingId} selected={showingId === selectedShowingId}>
            {showingId}
          </option>
        ))}
      </select>
      
    </div>
    {/* <div>{seatMapData && <SeatMap seatMap={seatMapData} />}</div> */}
    </>
  );
};

export default TempPage;

================
File: src/app/(temp)/layout.tsx
================
export default function RootLayout({
    children,
  }: {
    children: React.ReactNode
  }) {
    return (
      <html lang="en">
        <body>
          <main>{children}</main>
        </body>
      </html>
    )
  }

================
File: src/app/(ticket)/layout.tsx
================
/* Package System */
import { Suspense } from "react";

/* Package Application */
import Footer from "../(dashboard)/components/common/footer";
import NavigationBar from "../(dashboard)/components/common/navigationBar";
import Loading from "./loading";
import { Providers } from "../provider";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <Providers>
          <NavigationBar />
          <Suspense fallback={<Loading />}>
            <main>{children}</main>
          </Suspense>
          <Footer />
        </Providers>
      </body>
    </html>
  );
}

================
File: src/app/(ticket)/loading.tsx
================
import 'tailwindcss/tailwind.css';

export default function Loading() {
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-teal-400"></div>
            <span className="ml-3 text-teal-400 text-xl font-semibold">Đang tải...</span>
        </div>
    );
};

================
File: src/app/(ticket)/ticket/page.tsx
================
'use client';

/* Package System */
import Image from 'next/image';
import { useState } from 'react';
import { Icon } from '@iconify/react';

/* Package Application */
import '../../../../public/styles/ticket/TicketManagement.css';
import { formatYYYYMMDDToLocaleDateString } from '@/utils/helpers';

const TicketManagement = () => {
  const [activeTab, setActiveTab] = useState('all');
  const [eventType, setEventType] = useState('upcoming'); // "upcoming" or "past"

  const locations = [
    'Hà Nội', 'Hồ Chí Minh', 'Đà Nẵng', 'Hải Phòng', 'Nha Trang', 
    'Huế', 'Cần Thơ', 'Vũng Tàu', 'Phú Quốc', 'Quảng Ninh'
  ];

  interface Ticket {
    id: number;
    title: string;
    date: string;
    price: string;
    status: string;
    location: string;
  }

  function generateTickets(existingTickets: Ticket[], count: number): Ticket[] {
    const additionalTickets: Ticket[] = [];
    for (let i = 0; i < count; i++) {
      const randomLocation = locations[Math.floor(Math.random() * locations.length)];
      const newTicket: Ticket = {
        id: existingTickets.length + i + 1,
        title: `Event ${existingTickets.length + i + 1}`,
        date: new Date(2023, Math.floor(Math.random() * 12), Math.ceil(Math.random() * 28))
          .toISOString()
          .split('T')[0],
        price: Math.random() > 0.5 ? 'Miễn phí' : `${(Math.random() * 1000000 + 500000).toFixed(0)}đ`,
        status: ['success', 'pending', 'cancelled'][Math.floor(Math.random() * 3)] as 'success' | 'pending' | 'cancelled',
        location: randomLocation
      };
      additionalTickets.push(newTicket);
    }
    return [...existingTickets, ...additionalTickets];
  }

  // Giả lập data với các ngày xen kẽ và trạng thái
  const tickets = [
    { id: 1, title: 'Nhớ Trịnh Công Sơn 3', date: '2024-10-25', price: 'Miễn phí', status: 'success', location: 'Hà Nội' },
    { id: 2, title: 'Hòa Nhạc Mùa Thu', date: '2024-11-01', price: '1.200.000đ', status: 'pending', location: 'Hồ Chí Minh' },
    { id: 3, title: 'Đêm Nhạc Phố Cổ', date: '2023-12-20', price: '950.000đ', status: 'success', location: 'Đà Nẵng' },
    { id: 4, title: 'Gala Nhạc Trịnh', date: '2023-09-15', price: 'Miễn phí', status: 'cancelled', location: 'Hải Phòng' },
    { id: 5, title: 'Live Show Bức Tường', date: '2024-09-10', price: '1.500.000đ', status: 'success', location: 'Nha Trang' },
    { id: 6, title: 'Hòa Nhạc Giao Hưởng', date: '2023-11-01', price: 'Miễn phí', status: 'pending', location: 'Huế' },
    { id: 7, title: 'Chuyến Bay Âm Nhạc', date: '2024-12-30', price: '2.000.000đ', status: 'success', location: 'Cần Thơ' },
    { id: 8, title: 'Đêm Nhạc Rock', date: '2023-08-21', price: '950.000đ', status: 'cancelled', location: 'Vũng Tàu' },
    { id: 9, title: 'Nhạc Hội Giáng Sinh', date: '2023-12-24', price: 'Miễn phí', status: 'pending', location: 'Phú Quốc' },
    { id: 10, title: 'Festival Acoustic', date: '2024-05-18', price: '850.000đ', status: 'success', location: 'Quảng Ninh' },
    { id: 11, title: 'Cảm Xúc Trịnh Ca', date: '2024-07-15', price: 'Miễn phí', status: 'success', location: 'Hà Nội' },
    { id: 12, title: 'Tình Khúc Bolero', date: '2023-10-10', price: '1.200.000đ', status: 'cancelled', location: 'Hồ Chí Minh' },
    { id: 13, title: 'Nhạc Sống Đường Phố', date: '2024-03-21', price: 'Miễn phí', status: 'pending', location: 'Đà Nẵng' },
    { id: 14, title: 'Giai Điệu Tuổi Trẻ', date: '2023-06-05', price: '750.000đ', status: 'success', location: 'Hải Phòng' },
    { id: 15, title: 'Live Show Hòa Tấu', date: '2024-01-01', price: 'Miễn phí', status: 'success', location: 'Nha Trang' },
  ];

  const ticketsWithLocations = generateTickets(tickets, 15);

  const today = new Date();

  // Lọc theo trạng thái vé và ngày
  const filteredTickets = ticketsWithLocations.filter(ticket => {
    const ticketDate = new Date(ticket.date);
    const isUpcoming = ticketDate >= today;
    const isPast = ticketDate < today;

    if (activeTab !== 'all' && ticket.status !== activeTab) return false;

    if (eventType === 'upcoming') return isUpcoming;
    if (eventType === 'past') return isPast;

    return true;
  });

  const tabs = [
    { key: 'all', label: 'Tất cả' },
    { key: 'success', label: 'Thành công' },
    { key: 'pending', label: 'Đang xử lý' },
    { key: 'cancelled', label: 'Đã hủy' },
  ];

  return (
    <div className="container mx-auto px-4">
      <h2 className="text-2xl font-bold mt-8 mb-6">Quản lý vé đã mua</h2>
      <h5 className="text-sm text-gray-700">
        Quản lý tiến trình tham gia sự kiện qua các vé
      </h5>
      {/* tôi muốn tăng độ đậm của đường gạch ngang */}
      <hr className="my-6 border-gray-700" />
      {/* Tabs */}
      <div className="flex status-tab space-x-4 mb-4">
        {tabs.map(tab => (
          <button
            key={tab.key}
            onClick={() => setActiveTab(tab.key)}
            className={`px-4 status-tab__item py-2 rounded-lg ${activeTab === tab.key
              ? 'bg-teal-500 text-white'
              : 'bg-gray-100 text-gray-500 hover:bg-gray-200'
              }`}
          >
            {tab.label}
          </button>
        ))}
      </div>

      {/* Event Type (Upcoming / Past) */}
      <div className="flex time-tab space-x-8 mb-6">
        <button
          onClick={() => setEventType('upcoming')}
          className={`pb-2 text-lg font-semibold ${eventType === 'upcoming'
              ? 'text-black border-b-3 border-teal-500'
              : 'text-gray-500'
            }`}
        >
          Sắp diễn ra
        </button>
        <button
          onClick={() => setEventType('past')}
          className={`pb-2 text-lg font-semibold ${eventType === 'past'
              ? 'text-black border-b-3 border-teal-500'
              : 'text-gray-500'
            }`}
        >
          Đã kết thúc
        </button>
      </div>

      {/* Tickets Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-7">
        {filteredTickets.map(ticket => (
          <div
            key={ticket.id}
            className="bg-white rounded-lg overflow-hidden shadow-lg border-2 hover:shadow-md transition-shadow"
          >
            <div className="relative w-full aspect-[13/9] overflow-hidden">
              <Image
                src="/images/dashboard/card_pic.png"
                alt={ticket.title}
                layout="fill"
                objectFit="cover"
                className="hover:scale-105 transition-transform duration-300"
              />
            </div>
            <div className="p-4">
              <h3 className="font-bold text-left text-base mb-3 line-clamp-2 leading-tight">
                {ticket.title}
              </h3>
              <div className="flex flex-col md:flex-row md:justify-between md:items-center gap-2 mb-2 text-sm">
                <div>
                  <Icon icon="solar:calendar-bold" className="inline mr-3 mb-1" />
                  <span style={{color:'#51DACF'}}>{formatYYYYMMDDToLocaleDateString(ticket.date)}</span>
                </div>
                <span
                  className={`rounded-lg px-4 py-1 font-medium text-center text-white ${ticket.price === 'Miễn phí' ? 'bg-emerald-400' : 'bg-sky-500'
                    }`}
                >
                  {ticket.price}
                </span>
              </div>
              <div className="flex flex-col md:flex-row md:items-center gap-3 mb-2 text-sm">
                <Icon icon='mdi:location' />
                <span>{ticket.location}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TicketManagement;

================
File: src/app/api/auth/[...nextauth]/route.ts
================
import { authOptions } from "@/lib/authOptions";
import NextAuth from "next-auth";

/* export const authOptions: AuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        try {
          const res = await axios.post("http://localhost:3001/api/user/login", {
            email: credentials?.email,
            password: credentials?.password,
          });

          const user = res.data.data;

          if (user && credentials?.email) {
            return {
              id: user.id,
              email: credentials.email, // Đảm bảo email là string
              accessToken: user.access_token,
              refreshToken: user.refresh_token,
            };
          }

          return null;
        } catch (error) {
          console.error("Error logging in:", error);
          return null;
        }
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.accessToken = user.accessToken;
        token.refreshToken = user.refreshToken;
        token.userId = user.id;
        token.email = user.email;
      }
      return token;
    },

    async session({ session, token }) {
      if (token) {
        session.user = {
          id: token.userId as string,
          email: token.email as string,
          accessToken: token.accessToken as string,
          refreshToken: token.refreshToken as string,
        };
      }
      return session;
    },
  },
  pages: {
    signIn: "/login", 
  },
  secret: process.env.NEXTAUTH_SECRET,
  cookies: {
    sessionToken: {
      name: `__Secure-next-auth.session-token`,  // Tên cookie
      options: {
        httpOnly: true,    // Đảm bảo cookie chỉ có thể được truy cập qua HTTP, không qua JavaScript
        secure: process.env.NODE_ENV === "production", // Chỉ gửi cookie qua HTTPS khi môi trường sản xuất
        sameSite: "strict", // Bảo vệ chống CSRF
        path: "/",  // Cookie này chỉ hợp lệ cho toàn bộ trang web
      },
    },
  },
}; */

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };

================
File: src/app/api/user/forgot-password/route.ts
================
import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request: Request) {
  try {
    const { email } = await request.json();

    if (!email) {
      return NextResponse.json(
        { message: 'Email là bắt buộc.' },
        { status: 400 }
      );
    }

    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_API_URL}/api/user/forgot-password`,
      { email }
    );

    return NextResponse.json(
      { 
        success: true,
        data: response.data.data,
        message: 'Email đã được gửi thành công'
      },
      { status: 200 }
    );

  } catch (error) {
    console.error('Error during password reset request:', error);
    const axiosError = error as { response?: { data?: { message?: string } } };
    return NextResponse.json(
      { 
        success: false,
        message: axiosError.response?.data?.message || 'Gửi email thất bại'
      },
      { status: 500 }
    );
  }
}

================
File: src/app/api/user/login/route.ts
================
import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request: Request) {
  try {
    const { email, password } = await request.json();

    if (!email || !password) {
      return NextResponse.json(
        { message: 'Email và mật khẩu là bắt buộc.' },
        { status: 400 }
      );
    }

    const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/api/user/login`, {
      email,
      password,
    });

    const { access_token, refresh_token } = response.data.data;

    return NextResponse.json(
      { message: 'Login successful', data: { access_token, refresh_token } },
      { status: 200 }
    );
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Error during login:', error);

      return NextResponse.json(
        { message: error.response?.data?.message || 'Đăng nhập thất bại' },
        { status: 500 }
      );
    } else {
      console.error('Unexpected error during login:', error);

      return NextResponse.json(
        { message: 'Đăng nhập thất bại' },
        { status: 500 }
      );
    }
  }
}

================
File: src/app/api/user/logout/route.ts
================
import { NextResponse, NextRequest } from 'next/server';
import axios from 'axios';
import { getToken } from 'next-auth/jwt';  // Lấy token từ session

export async function POST(request: NextRequest) {
  try {
    // Lấy token từ request header
    const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });
    
    if (!token?.accessToken) {
      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }
    console.log('accessToken:', token.accessToken);

    // Gửi yêu cầu logout đến API của backend với Bearer token
    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_API_URL}/api/user/logout`, 
      {},
      {
        headers: {
          Authorization: `Bearer ${token.accessToken}`,
        },
      }
    );

    // Kiểm tra phản hồi từ API
    if (response.status === 200) {
      // Thành công, trả về phản hồi thành công
      return NextResponse.json({ message: 'Logout successful' });
    } else {
      // Nếu có lỗi từ API
      return NextResponse.json({ message: 'Failed to logout' }, { status: response.status });
    }
  } catch (error) {
    console.error('Logout error:', error);
    return NextResponse.json({ message: 'Server error' }, { status: 500 });
  }
}

================
File: src/app/api/user/me/route.ts
================
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import apiClient from '@/services/apiClient';
import { UserInfoResponse } from '@/types/model/userInfo';
import { ErrorResponse } from '@/types/ErrorResponse';
import { authOptions } from '@/lib/authOptions';

export async function GET(): Promise<NextResponse<UserInfoResponse | ErrorResponse>> {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.accessToken) {
      return NextResponse.json(
        { statusCode: 401, message: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Type cho response từ backend
    const response = await apiClient.get<UserInfoResponse>(
      `${process.env.NEXT_PUBLIC_API_URL}/api/user/me`
    );

    return NextResponse.json(response.data);
  } catch (error) {
    console.error('Error:', error);

    // Xử lý lỗi type-safe
    // if (error instanceof Error && 'response' in error) {
    //   const axiosError = error as any; // Chỉ dùng any ở đây nếu cần thiết
    //   return NextResponse.json(
    //     {
    //       statusCode: axiosError.response?.status || 500,
    //       message: axiosError.response?.data?.message || 'Unknown error',
    //     },
    //     { status: axiosError.response?.status || 500 }
    //   );
    // }

    return NextResponse.json(
      { statusCode: 500, message: 'Internal Server Error' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/user/otps/resend-otp/route.ts
================
import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request: Request) {
  try {
    const { email, type, request_token } = await request.json();
    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_API_URL}/api/user/otps/resend-otp`,
      { email, type, request_token }
    );

    return NextResponse.json(response.data, { status: 200 });
  } catch (error) {
    console.error('Error:', error);
    return NextResponse.json(
      { message: 'Gửi lại OTP thất bại' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/user/otps/verify-otp/route.ts
================
import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request: Request) {
  try {
    const { email, otp, request_token, type } = await request.json();

    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_API_URL}/api/user/otps/verify-otp`,
      { email, otp, request_token, type }
    );

    return NextResponse.json(response.data, { status: 200 });
  } catch (error) {
    console.error('Error:', error);
    return NextResponse.json(
      { message: 'Xác thực thất bại' },
      { status: 500 }
    );
  }
}

================
File: src/app/api/user/register/route.ts
================
import { NextResponse } from 'next/server';
import axios, { AxiosError } from 'axios';

export async function POST(request: Request) {
  try {
    const { name, phone, email, password, re_password, role_id, province_id, agree } = await request.json();

    // Validate required fields
    if (!name || !phone || !email || !password || !re_password) {
      return NextResponse.json(
        { message: 'Vui lòng điền đầy đủ thông tin.' },
        { status: 400 }
      );
    }

    // Forward request to backend API
    const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/api/user/register`, {
      name,
      phone,
      email,
      password,
      re_password,
      role_id,
      province_id,
      agree
    });

    const { request_token, remaining_attempts, resend_allowed_in } = response.data.data;

    if (response.data?.statusCode && response.data.statusCode >= 400) {
      throw new Error(response.data.message || 'Đăng ký thất bại');
    }

    const responseData = response.data?.data || response.data;

    if (!responseData.request_token) {
      throw new Error('Invalid response structure from backend');
    }

    return NextResponse.json(
      {
        message: 'Registration successful',
        data: {
          request_token,
          remaining_attempts,
          resend_allowed_in
        }
      },
      { status: 200 }
    );

  } catch (error) {
    if (axios.isAxiosError(error)) {
      const axiosError = error as AxiosError<{ message?: string; errors?: string[] }>;

      if (axiosError.response?.status === 500) {
        return NextResponse.json(
          {
            status: 503,
            error: 'Service Unavailable',
            message: 'The server is currently unavailable. Please try again later.'
          },
          { status: 503 }
        );
      }

      return NextResponse.json(
        {
          message: axiosError.response?.data?.message || 'Đăng ký thất bại',
          errors: axiosError.response?.data?.errors || []
        },
        { status: axiosError.response?.status || 500 }
      );
    } else {
      console.error('Unexpected error during registration:', error);

      // return NextResponse.json(
      //   { message: 'Đăng ký thất bại' },
      //   { status: 500 }
      // );
      return NextResponse.json(
        {
          status: 503,
          error: 'Service Unavailable',
          message: 'The server is currently unavailable. Please try again later.'
        },
        { status: 503 }
      );
    }
  }
}

================
File: src/app/api/user/reset-password/route.ts
================
import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request: Request) {
  try {
    const { newPassword, confirmPassword, resetToken } = await request.json();

    if (!newPassword || !confirmPassword || !resetToken) {
      return NextResponse.json(
        { message: 'Thiếu thông tin cần thiết.' },
        { status: 400 }
      );
    }

    const response = await axios.post(
      `${process.env.NEXT_PUBLIC_API_URL}/api/user/reset-password`,
      { newPassword, confirmPassword, resetToken }
    );

    if (response.data.statusCode == 200) {
      return NextResponse.json(
        { message: 'Đổi mật khẩu thành công' },
        { status: 200 }
      );
    }

    return NextResponse.json(
      { message: 'Đổi mật khẩu thất bại' },
      { status: 500 }
    );
  } catch (error) {
    console.error('Error:', error);
    return NextResponse.json(
      { message: 'Đổi mật khẩu thất bại' },
      { status: 500 }
    );
  }
}

================
File: src/app/error.tsx
================
"use client";

import { useEffect } from "react";
import Link from "next/link";

export default function GlobalError({ error, reset }: { error: Error; reset: () => void }) {
  useEffect(() => {
    console.error("Global Error:", error);
  }, [error]);

  return (
    <div className="h-screen flex flex-col items-center justify-center text-center bg-gray-100">
      <h1 className="text-4xl font-bold text-red-600">500 - Internal Server Error</h1>
      <p className="text-lg text-gray-600 mt-2">Something went wrong. Please try again later.</p>
      <div className="mt-4">
        <button
          onClick={reset} // Retry loading the previous page
          className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        >
          Try Again
        </button>
        <Link
          href="/"
          className="ml-4 px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
        >
          Go Home
        </Link>
      </div>
    </div>
  );
}

================
File: src/app/layout.tsx
================
export default function RootLayout({ children }: { children: React.ReactNode }) {
    return (
      <html lang="en">
        <body>{children}</body>
      </html>
    );
  }

================
File: src/app/middleware.ts
================
import { withAuth } from "next-auth/middleware";

export default withAuth({
  pages: {
    signIn: "/login", // Trang chuyển hướng nếu chưa đăng nhập
  },
});

export const config = {
  matcher: ["/:path*", "/event/:path*"], // Các route cần bảo vệ
};

================
File: src/app/provider.tsx
================
'use client'

import { NextUIProvider } from '@nextui-org/react'
import { SessionProvider } from 'next-auth/react'

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <SessionProvider>
      <NextUIProvider>
        {children}
      </NextUIProvider>
    </SessionProvider>
  )
}

================
File: src/contexts/auth.context.tsx
================
import { createContext, useState, useEffect, ReactNode } from 'react';
import {jwtDecode} from 'jwt-decode';
import { useRouter } from 'next/router';
import axios, { AxiosError } from 'axios';
import apiClient from '@/services/apiClient';
import { ErrorResponse } from '@/types/ErrorResponse';

interface JwtPayload {
  id: string;
  email: string;
  role: string;
  // ... các trường khác tùy thuộc vào token của bạn
}

interface UserInfo {
  id: string;
  name: string; 
  email: string;
  role: number;
  phone: string; 
}

interface AuthContextProps {
  isAuthenticated: boolean;
  user: JwtPayload | null;
  login: (token: string, refresh_token: string) => void;
  logout: () => void;
  getUserInfo: () => Promise<UserInfo | null>;
}

export const AuthContext = createContext<AuthContextProps>({
  isAuthenticated: false,
  user: null,
  login: () => {},
  logout: () => {},
  getUserInfo: async () => null,
});

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<JwtPayload | null>(null);
  const router = useRouter();

  useEffect(() =>  {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const decodedUser = jwtDecode<JwtPayload>(token);
        setIsAuthenticated(true);
        setUser(decodedUser);
      } catch (err){
        if (axios.isAxiosError(err)) {
          const error = err as AxiosError<ErrorResponse>;
          console.error(error.response?.data?.message);
        } else {
          console.error('Invalid token');
        }
        console.error('Invalid token');
        setIsAuthenticated(false);
        setUser(null);
      }
    }
  }, []);

  const login = (token: string, refresh_token: string) => {
    localStorage.setItem('token', token);
    localStorage.setItem('refresh-token', refresh_token);

    try {
      const decodedUser = jwtDecode<JwtPayload>(token);
      setIsAuthenticated(true);
      setUser(decodedUser);
    } catch {
      console.error('Invalid token');
      setIsAuthenticated(false);
      setUser(null);
    }
  };

  const getUserInfo = async (): Promise<UserInfo | null> => {
    try {
      const response = await apiClient.get('/api/user/me');
      return response.data.data;
    } catch (error) {
      console.error('Error fetching user info:', error);
      return null;
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setIsAuthenticated(false);
    setUser(null);
    router.push('/login');
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout, getUserInfo}}>
      {children}
    </AuthContext.Provider>
  );
};

================
File: src/lib/authOptions.ts
================
// lib/authOptions.ts
import { AuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import axios from "axios";

export const authOptions: AuthOptions = {
  providers: [
    CredentialsProvider({
        name: "Credentials",
        credentials: {
          email: { label: "Email", type: "email" },
          password: { label: "Password", type: "password" },
        },
        async authorize(credentials) {
          try {
            const res = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/api/user/login`, {
              email: credentials?.email,
              password: credentials?.password,
            });
  
            const user = res.data.data;
  
            if (user && credentials?.email) {
              return {
                id: user.id,
                email: credentials.email, // Đảm bảo email là string
                accessToken: user.access_token,
                refreshToken: user.refresh_token,
              };
            }
  
            return null;
          } catch (error) {
            console.error("Error logging in:", error);
            return null;
          }
        },
      }),
  ],
  callbacks: {
    async jwt({ token, user }) {
        if (user) {
          token.accessToken = user.accessToken;
          token.refreshToken = user.refreshToken;
          token.userId = user.id;
          token.email = user.email;
        }
        return token;
      },
  
      async session({ session, token }) {
        if (token) {
          session.user = {
            id: token.userId as string,
            email: token.email as string,
            accessToken: token.accessToken as string,
            refreshToken: token.refreshToken as string,
          };
        }
        return session;
      },
  },
  pages: {
    signIn: "/login",
  },
  secret: process.env.NEXTAUTH_SECRET,
};

================
File: src/services/apiClient.ts
================
import axios, {
  AxiosError,
  AxiosHeaders,
  AxiosResponse,
  InternalAxiosRequestConfig,
} from "axios";
import { getSession, signOut } from "next-auth/react";

const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL,
});

apiClient.interceptors.request.use(
  async (config: InternalAxiosRequestConfig) => {
    const session = await getSession();
    const token = session?.user?.accessToken;
    if (token) {
      if (!config.headers) {
        config.headers = new AxiosHeaders();
      }

      // Set the Authorization header
      config.headers.set("Authorization", `Bearer ${token}`);
    }
    return config;
  },
  (error: AxiosError) => {
    return Promise.reject(error);
  }
);

apiClient.interceptors.response.use(
  (response: AxiosResponse) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as InternalAxiosRequestConfig & {
      _retry?: boolean;
    };

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        const session = await getSession();
        const refreshToken = session?.user?.refreshToken;
        if (!refreshToken) {
          throw new Error("No refresh token available");
        }

        const refreshResponse = await axios.post(
          `${process.env.NEXT_PUBLIC_API_URL}/api/user/refresh-token`,
          { refresh_token: refreshToken }
        );
        const { access_token, refresh_token } = refreshResponse.data.data;

        // Store new tokens
        console.log("New token:", access_token);

        session.user.accessToken = access_token;
        session.user.refreshToken = refresh_token;

        // Retry the original request with the new token
        if (!originalRequest.headers) {
          originalRequest.headers = new AxiosHeaders();
        }
        originalRequest.headers.set("Authorization", `Bearer ${access_token}`);
        return apiClient(originalRequest);
      } catch (refreshError) {
        console.error("Refresh token failed", refreshError);

        await signOut({
          redirect: true,
          callbackUrl: "/login",
        });

        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default apiClient;

================
File: src/styles/admin/pages/BookingQuestionForm.css
================
/* Form */
.title-page {
    font-size: 30px;
    font-weight: bold;
}

.icon-back {
    color: #0C4762;
    font-size: 2rem;
}

.red-star {
    color: red;
}

.custom-input {
    border: 2px solid black;
}

.bg-alert {
    background: rgba(81, 218, 207, 0.2) !important; /* 20% độ đậm */
}

/*---------------------------------------------------------------------------------------------------*/
/* Information of Ticket */
.title-event {
    font-weight: bold;
    font-size: 24px;
}

.custom-hr {
    border: none;
    border-top: 1px dashed #000; /* Độ dày 2px, nét đứt, màu đen */
    margin: 20px 0; /* Khoảng cách trên dưới */
}

.title-info {
    font-weight: bold;
    font-size: 20px;
}

.btn-order {
    width: 100%;
    height: 52px;
    background-color: #51DACF;
    color: #0C4762;
    border-radius: 5px;

}

.btn-order:hover {
    color: white;
    background-color: #0C4762;
}

.btn-order-disable {
    width: 100%;
    height: 52px;
    background-color: rgba(81, 218, 207, 0.5);
    color: white;
    border-radius: 5px;

}

================
File: src/styles/admin/pages/Dashboard.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 5px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }


  
  .link:hover {
    background-color: #005bb5;
  }

  .custom-swiper-button-prev,
  .custom-swiper-button-next {
    cursor: pointer;
    z-index: 10;
    transition: transform 0.2s ease-in-out;
  }

  .small-text {
    font-size: 14px;
  }

================
File: src/styles/admin/pages/Error.css
================
.container-custom {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh; 
    text-align: center;
    margin-top: 150;
    margin-bottom: 150;
}

.txt-error {
    font-weight: bold;
    font-size: 36;
}

.txt-content {
    font-size: 24;
    color:darkgray;
}

.btn-back {
    color: white;
    border-radius: 30;
    background-color: #51DACF;
    font-weight: 500;
    font-size: 18;
    padding: 10px 20px;
}

.social-icons {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 10px;
    cursor: pointer;
}

================
File: src/styles/admin/pages/EventDetail.css
================
/* Event box */
.eve-image {
    background-image: url(../../../../public/images/dashboard/presentation_pic.png);
    background-position: center;
    background-size: cover;
    height: 500px;
    width: 90%;
    border-radius: 10px;
    display: flex; /* Sử dụng flexbox */
    flex-direction: column; /* Các phần tử con xếp theo cột */
    overflow: hidden; /* Ngăn chặn nội dung vượt ra ngoài */
    position: relative;
    z-index: 0;
    justify-content: center; 
    align-items: center;
    padding: 0 10px;
}

.eve-padding{
    padding-left: 30px;
    padding-right: 30px;
}

.row, .col-lg-7, .col-lg-5 {
    margin: 0 !important;
    padding: 0 !important;
}

.mask-img {
    background-color: rgba(0, 0, 0, 0.6);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;  /* Để lớp mask ở dưới phần chữ và card */
}

.btn-buy-now {
    width: 325px;
    height: 52px;
    background-color: #51DACF;
    color: #0C4762;
    border-radius: 5px;

}

.btn-buy-now:hover {
    color: white;
    background-color: #0C4762;
}

.btn-date {
    border-radius: 5px;
    padding: 2px 12px;
}

.txt-name-event-title {
    color: white;
    font-size: 40px;
    font-weight: bold;
    white-space: normal;
    /* Cho phép chữ tự động xuống dòng */
    word-wrap: break-word;
    /* Ngắt từ dài nếu cần thiết */
}

.view-location{
    color: white;
    cursor: pointer;
}

#info-ticket, #event-location {
    scroll-margin-top: 80px; 
}

/* Nút "Quay lại" */
.back-button-wrapper {
    top: 10px; /* Khoảng cách từ trên cùng */
    left: 20px; /* Khoảng cách từ lề trái */
    z-index: 3; /* Đảm bảo nút hiển thị trên cùng */
    padding-left: 20px;
}

.btn-back {
    background-color: transparent;
    color: #0C4762;
    width: 135px;
    height: 42px;
    background-color: #51DACF;
    border: none;
    font-size: 14px;
    cursor: pointer;
    border-radius: 5px;
}
.btn-back:hover {
    color: white;
    background-color: #0C4762;
}

.title-box {
    font-weight: bold;
    font-size: 18px;
}

.text-add {
    color: #51DACF;
    font-size: 16px;
    cursor: pointer;
}

/*---------------------------------------------------------------------------------------------------*/
/* Description */
#more {
    display: none;
}

.div-more {
    background: linear-gradient(to top, #E5E5E8, #ffffff); 
    border-radius: 0px 0px 10px 10px;
    height: 35px;
    text-align: center;
    align-items: center;
}

/*---------------------------------------------------------------------------------------------------*/
/* Ticket details */
.custom-col-left {
    padding-right: 0px;
    margin-right: 0px;
}

.text-ticket {
    font-weight: 500;
}

.li-ticket {
    background-color: #0C4762 !important;
    color: white !important;
    font-size: 16px !important;
}

.li-ticket-item{
    background-color: #0C4762 !important;
    color: white !important;
    font-size: 16px !important;
    padding: 10px 15px !important;
    border: none !important;
}

.ul-ticket-item{
    margin-top: 5px;
    padding-left: 0px;
}

.btn-buy {
    width: 156px;
    height: 34px;
    background-color: #9EF5CF;
    color: #0C4762;
    border-radius: 5px;
}

.btn-buy:hover {
    background-color: white;
}

.btn-sold-out {
    width: 156px;
    height: 34px;
    background-color: #FFC9C9;
    color: #FF0000;
    border-radius: 5px;
}

.btn-disable {
    width: 156px;
    height: 34px;
    background-color: #FFFFFF;
    color: #999999;
    border-radius: 5px;

}

.price-sold-out {
    font-weight: 500;
}

.price {
    font-weight: 500;
    color: #9EF5CF;
}

/*---------------------------------------------------------------------------------------------------*/
/* Tags  */
.txt-tags {
    text-decoration: none;
    color: black;
    font-weight: 500;
}

/*---------------------------------------------------------------------------------------------------*/
/* Share with friends  */
.row-app {
    display: flex;
    align-items: center;
}

.img-app {
    width: 35px;
    height: 35px;
}

/*---------------------------------------------------------------------------------------------------*/
/* Comment  */
.btn-post {
    width: 156px;
    height: 34px;
    background-color: #0C4762;
    color: white;
    border-radius: 5px;
}

.btn-post:hover {
    background-color: #10648a;
}

.btn-cancel {
    color: #0C4762;
    background-color: white;
    border: 2px solid #0C4762;
    border-radius: 5px;
    height: 34px;
    width: 100px;
}

.btn-cancel:hover {
    background-color: #f1fafd;
}

.cmt-pad{
    padding-left: 90px;
    padding-right: 90px;
}

================
File: src/styles/admin/pages/ForgotPassword.css
================
.back-link {
  position: absolute;
  top: 20px; 
  left: 20px;
  margin-bottom: 10px;
  color: #0C4762;
  text-decoration: none;
  font-size: 14px;
}

.back-link:hover {
  text-decoration: underline;
}

h3 {
    margin-bottom: 0px !important;
  }

.container {
    text-align: center;
    margin-bottom: 30px;
  }

  .background {
    position: relative;
    background-image: url(../../../../public/images/cover.png);
    background-size: cover;
    background-position: center;
    height: 100vh;
  }
  
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(12, 71, 98, 0.3); 
    z-index: 1; 
  }
  
  .logo {
    width: 80px;
    height: 80px;
    margin: 10px;
  }
  
  .btn-login {
    width: 578px;
    height: 50px;
    background-color: #0C4762;
    color: white;
    font-size: 16px;
    font-weight: bold;
  }
  
  
  /* Phần bên trái*/
  .left-pane {
    display: flex;
    align-items: center;
    justify-content: center;
    padding-right: 0px;
    padding-left: 0px;
    padding-top: 0px;
    padding-bottom: 0px;
    background: linear-gradient(180deg, #9EF5CF 0%, #2F9098 68%, #176B87 100%);
  }
  
  .form {
    width: 100%;
  }
  
  .eye-btn {
    position: absolute;
    right: 8px;
    top: 51%;
    transform: translateY(-50%);
  }
  
  .form-control {
    margin-bottom: 15px;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    height:46px;
  }
  
  .form-control:focus {
    border-color: #0C4762;
    box-shadow: 0 0 5px #0C4762;
  }
  
  .btn-primary {
    width: 100% !important;
    background-color: #0C4762 !important;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    height:46px;
  }
  
  .btn-primary:hover {
    background-color: #082b3b;
  }

  .bold-label {
    font-weight: bold;
  }

  button:disabled {
    background-color: #d6d6d6 !important;
    color: #000000 !important;
    cursor: not-allowed;
  }

  .subheading {
    font-size: 16px;
    color: #ffffff;
    width: 80%;
    text-align: center; /* Canh giữa */;
    margin: 30 auto;
  }

  .is-invalid {
    background-image: none !important;
  }

================
File: src/styles/admin/pages/global.css
================
body {
    font-family: "Nunito Sans";
  }

================
File: src/styles/admin/pages/HomePage.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 0px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }
  
  .link:hover {
    background-color: #005bb5;
  }

================
File: src/styles/admin/pages/Login.css
================
/* Phần bên phải: Form đăng nhập */
.backdground {
  position: relative;
  background-image: url(../../../../public/images/background_login.png);
  background-size: cover; /* Phủ toàn bộ diện tích */
  background-position: center; /* Căn giữa hình ảnh */
  min-height: 100vh;  /* Điều chỉnh responsive chiều cao */
}

/* Lớp overlay */
.overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(12, 71, 98, 0.3); /* Màu overlay #0C4762 với độ mờ 30% */
  z-index: 1; /* Lớp nằm trên hình ảnh */
}

/* ---------------------------------------------------------------------------------------------------------- */

/* Phần bên trái: Form đăng nhập */
.logo {
  width: 80px;
  height: 80px;
}

.left-pane {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background: linear-gradient(180deg, #9EF5CF 0%, #2F9098 68%, #176B87 100%);
  min-height: 100%;
}

.login-form {
  width: 100%;
  text-align: left;
}

.eye-btn {
  position: absolute;
  right: 8px;
  top: 51%;
  transform: translateY(-50%);
}

.login-container {
  text-align: center;
  margin-bottom: 30px;
}

.form-control {
  margin-bottom: 15px;
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.form-control:focus {
  border-color: #0070f3;
  box-shadow: 0 0 5px rgba(0, 112, 243, 0.5);
}

.form-check {
  text-align: left;
  margin-bottom: 15px;
}

.btn-login {
  background-color: #0C4762 !important;
  color: #fff !important;
  padding: 0; /* loại bỏ padding cũ */
  padding: 10px !important;
  border: none !important;
  border-radius: 5px !important;
  cursor: pointer !important;
  height: 46px;
  width: 100%; /* Đảm bảo nút sử dụng toàn bộ chiều rộng của container */
  text-align: center;
}

.btn-login:hover {
  background-color: #082b3b !important;
}

.google-button {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: white !important;
  color: #000 !important;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  width: 100%;
  cursor: pointer;
  text-decoration: none;
  height: 46px;
}

.google-button:hover {
  background-color: #f0f0f0 !important;
}

.google-button svg {
  height: 20px;
  margin-right: 10px;
}

.font-style {
  font-weight: bold; 
  font-size: 16px;   
  text-transform: uppercase;
}

::placeholder {
  color: #687C94;          /* Màu chữ mờ */
  font-size: 12px;       /* Kích thước chữ nhỏ hơn */
  font-weight: 400;      /* Độ đậm nhẹ */
  opacity: 1;          /* Độ mờ */
}

/* Điều chỉnh chiều ngang của các trường input và button */
.short-input {
  width: 90% !important; 
  margin: 0 auto; /* Căn giữa */
}

.font-forget {
  color: white;
  font-weight: 500;
}

body, html {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

.row {
  margin: 0;
  min-height: 100vh;
}

.is-invalid {
  background-image: none !important;
}

================
File: src/styles/admin/pages/Register.css
================
html,
body {
  overflow-x: hidden;
  margin: 0;
  padding: 0;
}

.row {
  width: 100%;
  height: 100%;
}

/* Phần bên trái: nền hình ảnh và nội dung chào mừng */
.left-register-pane {
  flex-direction: column;
  text-align: center;
  padding: 20px;
  background-image: url(../../../../public/images/background_login.png);
  background-size: cover;
  background-position: center;
}

.left-register-pane h2 {
  font-size: 40px;
  margin-bottom: 50px;
  color: #fff;
}

.left-register-pane p {
  font-size: 16px;
  margin-bottom: 39px;
  color: #fff;
}

.left-register-pane .login-btn {
  background-color: rgba(255, 255, 255, 0.4);
  color: #ffffff;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.left-register-pane .login-btn:hover {
  background-color: #e6e6e6;
  color: #000;
}

.font-style {
  font-weight: bold;
  font-size: 16px;
  text-transform: uppercase;
}

::placeholder {
  color: #687C94;
  font-size: 12px;
  font-weight: 400;
  opacity: 1;
}

input {
  height: 46px;
}

/* Phần bên phải: Form đăng ký */
.right-register-pane {
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(180deg, #9EF5CF 0%, #2F9098 68%, #176B87 100%);
}

.register-form,
.verify-form {
  width: 100%;

  .register-container,
  .verify-container {
    text-align: center;
    margin-bottom: 15px;

    .verify-msg-1,
    .verify-msg-2 {
      color: #fff;
    }

    .logo {
      width: 80px;
      height: 80px;
    }
  }

  .otp-nums {
    justify-content: center;
    margin: 20px auto;
    display: flex;
    gap: 10px;

    .otp-input {
      width: 50px;
      padding: 10px;
      outline: none;
      text-align: center;
      border-radius: 10.8px;

      &:focus {
        border: 2px solid #000;
      }
    }
  }

  .eye-btn {
    position: absolute;
    right: 8px;
    top: 51%;
    z-index: 1;
    transform: translateY(-50%);
  }

  .resend-btn {
    color: #1C0098;
    cursor: pointer;

    &:hover {
      text-decoration: underline;
    }
  }

  .resend-btn.disabled {
    color: #ccc;
    cursor: not-allowed;
  }

  .otp-timer {
    font-size: 24px;
    font-weight: bold;
    margin: 20px 0;

    span {
      padding: 5px;
      background-color: #9EF5CF;
      border-radius: 4px;
    }
  }

  .form-control {
    margin-bottom: 15px;
    padding: 10px 50px 10px 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
  }

  .form-control:focus {
    border-color: #0070f3;
    box-shadow: 0 0 5px rgba(0, 112, 243, 0.5);
  }

  .form-check {
    text-align: left;
    margin-bottom: 15px;
  }

  .btn {
    width: 100%;
    background-color: #0C4762;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;

    &:active,
    &:hover {
      background-color: #082b3b;
      color: #fff;
    }
  }

  .google-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
    color: #000;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 100%;
    cursor: pointer;
  }

  .google-button:hover {
    background-color: #f0f0f0;
  }

  .google-button svg {
    height: 20px;
    margin-right: 10px;
  }
  
  .is-invalid {
    border-color: #FF0000 !important;
    background-image: none !important;
  }
}

================
File: src/styles/admin/pages/VerifyOTP.css
================
html,
body {
  overflow-x: hidden;
  margin: 0;
  padding: 0;
}

.row {
  width: 100%;
  height: 100%;
}

/* Phần bên trái: nền hình ảnh và nội dung chào mừng */
.left-register-pane {
  flex-direction: column;
  text-align: center;
  padding: 20px;
  background-image: url(../../../../public/images/background_login.png);
  background-size: cover;
  background-position: center;

  h2 {
    font-size: 40px;
    margin-bottom: 50px;
    color: #fff;
  }

  p {
    font-size: 16px;
    margin-bottom: 39px;
    color: #fff;
  }

  .login-btn {
    background-color: rgba(255, 255, 255, 0.4);
    color: #ffffff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;

    &:hover {
      background-color: #e6e6e6;
      color: #000;
    }
  }
}

.font-style {
  font-weight: bold;
  font-size: 16px;
  text-transform: uppercase;
}

::placeholder {
  color: #687C94;
  font-size: 12px;
  font-weight: 400;
  opacity: 1;
}

input {
  height: 46px;
}

/* Phần bên phải: Form đăng ký */
.right-register-pane {
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(180deg, #9EF5CF 0%, #2F9098 68%, #176B87 100%);
}

.verify-form {
  width: 100%;

  .verify-container {
    text-align: center;
    margin-bottom: 15px;

    .verify-msg-1,
    .verify-msg-2 {
      color: #fff;
    }

    .logo {
      width: 80px;
      height: 80px;
    }
  }

  .otp-nums {
    justify-content: center;
    margin: 20px auto;
    display: flex;
    gap: 10px;

    .otp-input {
      width: 50px;
      padding: 10px;
      outline: none;
      text-align: center;
      border-radius: 10.8px;

      &:focus {
        border: 2px solid #000;
      }
    }
  }

  .resend-btn {
    color: #1C0098;
    cursor: pointer;

    &:hover {
      text-decoration: underline;
    }
  }

  .resend-btn.disabled {
    color: #ccc;
    cursor: not-allowed;
  }

  .otp-timer {
    font-size: 24px;
    font-weight: bold;
    margin: 20px 0;

    span {
      padding: 5px;
      background-color: #9EF5CF;
      border-radius: 4px;
    }
  }

  .form-control {
    margin-bottom: 15px;
    padding: 10px 50px 10px 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
  }

  .form-control:focus {
    border-color: #0070f3;
    box-shadow: 0 0 5px rgba(0, 112, 243, 0.5);
  }

  .form-check {
    text-align: left;
    margin-bottom: 15px;
  }

  .btn {
    width: 100%;
    background-color: #0C4762;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;

    &:active,
    &:hover {
      background-color: #082b3b;
      color: #fff;
    }
  }
}

.custom-dialog {
  .MuiDialog-paper {
    border-radius: 12px;
    background-color: #FFFFFF;
    box-shadow: 0px 4px 16px rgba(0, 0, 0, 0.25);
    /* padding: 20px; */
    width: 100%;
    max-width: 400px;
    text-align: center;

    h2 {
      padding: 0;
    }
  }
}

.dialog-title {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #0C4762; /* Màu xanh header */
  color: #FFFFFF;
  padding: 16px 20px;
  font-size: 18px;
  font-weight: bold;
}

.close-button {
  background: transparent !important;
  border: none !important;
  color: #ffffff !important;

  &:hover {
    background-color: #ffffff !important;
    color: #0C4762 !important;
  }
}

.dialog-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 20px 0;
}

.dialog-content h3 {
  font-size: 20px;
  font-weight: bold;
  margin: 10px 0;
  color: #000000;
}

.subtext {
  font-size: 14px;
  color: #6B7280; /* Màu xám cho subtext */
}

.action-button {
  background-color: #0C4762 !important;
  color: #FFFFFF !important;
  font-size: 16px !important;
  font-weight: bold !important;
  text-transform: none !important;
  width: 60%;
  border-radius: 8px !important;
  padding: 10px !important;

  &:hover {
    background-color: #133646 !important;
  }
}

================
File: src/styles/ticket/TicketManagement.css
================
.status-tab {
  justify-content: space-between;
}

.status-tab .status-tab__item {
  width: 280px;
  border-radius: 36px;
}

.time-tab {
  justify-content: center;
}

================
File: src/types/BaseApiResponse.ts
================
export interface BaseApiResponse<T = unknown> {
  statusCode: number;
  message: string;
  data: T;
}

================
File: src/types/ErrorResponse.ts
================
export interface ErrorResponse {
    statusCode: number;
    message: string;
    details?: unknown;
  }

================
File: src/types/model/userInfo.ts
================
// types/user.ts

import { BaseApiResponse } from "../BaseApiResponse";

export interface UserInfo {
  id: string;
  name: string;
  email: string;
  phone: string;
  role: number;
}

// Response cho API /user/me
export type UserInfoResponse = BaseApiResponse<UserInfo>;

================
File: src/types/next-auth.d.ts
================
// import NextAuth from "next-auth";
import "next-auth";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      email: string;
      accessToken: string;
      refreshToken: string;
    };
  }

  interface User {
    id: string;
    email: string;
    accessToken: string;
    refreshToken: string;
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    accessToken: string;
    refreshToken: string;
    userId: string;
    email: string;
  }
}

================
File: src/utils/helpers.tsx
================
/**
 * Formats a date string into a more readable format.
 *
 * @param dateStr - The date string to format.
 * @returns The formatted date string in the format "DD MMM YYYY".
 */
export function formatYYYYMMDDToLocaleDateString(dateStr: string): string {
  const date = new Date(dateStr);
  const day = date.getDate().toString().padStart(2, '0');
  const month = date.toLocaleString('en-US', { month: 'short' }); // Get short month
  const year = date.getFullYear();

  return `${day} ${month}, ${year}`;
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
const { nextui } = require("@nextui-org/react");

const config: Config = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/pages/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/**/*.{js,jsx,ts,tsx}",
    "./node_modules/react-tailwindcss-datepicker/dist/index.esm.{js,ts}",
    "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
    fontWeight: {
      thin: "100",
      hairline: "100",
      extralight: "200",
      light: "300",
      normal: "400",
      medium: "500",
      semibold: "600",
      bold: "700",
      extrabold: "800",
      "extra-bold": "800",
      black: "900",
    },
  },
  plugins: [nextui()],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": "src/",
    "paths": {
      "@/*": ["*"],
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "src/pages/_app.tsx", "src/app/(dashboard)/components/dashboard/datePicker.tsx"],
  "exclude": ["node_modules"]
}
