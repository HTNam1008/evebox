This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-18T17:47:59.900Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.dockerignore
.eslintrc.json
.gitignore
.repomixignore
Dockerfile
next.config.ts
package.json
postcss.config.mjs
public/styles/admin/pages/Dashboard.css
public/styles/admin/pages/global.css
public/styles/admin/pages/HomePage.css
public/styles/admin/pages/Login.css
public/styles/admin/pages/Register.css
README.md
src/components/Auth/WithAuth.tsx
src/contexts/AuthContext.tsx
src/pages/_app.tsx
src/pages/[page].tsx
src/pages/components/Dashboard.tsx
src/pages/components/layout/Footer.tsx
src/pages/components/layout/NavigationBar.tsx
src/pages/components/layout/SideBar.tsx
src/pages/components/Login.tsx
src/pages/components/Register.tsx
src/pages/index.tsx
src/styles/Dashboard.module.css
src/styles/HomePage.module.css
src/styles/Login.module.css
src/styles/Register.module.css
src/types/errorResponse.ts
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .dockerignore
================
node_modules
npm-debug.log
Dockerfile
docker-compose.yml
.dockerignore
.git
.gitignore
.env

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .repomixignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: Dockerfile
================
# Use official Node.js LTS version as the base image
FROM node:18-alpine AS builder

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the Next.js application
RUN npm run build

# Production image
FROM node:18-alpine 

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install only production dependencies
RUN npm install --production

# Copy the built application from the builder stage
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/next.config.ts ./
COPY --from=builder /app/next-env.d.ts ./
COPY --from=builder /app/tsconfig.json ./
COPY --from=builder /app/src ./src

# Expose the port the app runs on
EXPOSE 3000

# Define the command to run the app
CMD ["npm", "run", "start"]

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@fontsource/nunito-sans": "^5.1.0",
    "axios": "^1.7.7",
    "formik": "^2.4.6",
    "jwt-decode": "^4.0.0",
    "lucide-react": "^0.460.0",
    "next": "15.0.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "swr": "^2.2.5",
    "yup": "^1.4.0"
  },
  "devDependencies": {
    "@types/jwt-decode": "^3.1.0",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/styles/admin/pages/Dashboard.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 5px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }


  
  .link:hover {
    background-color: #005bb5;
  }

================
File: public/styles/admin/pages/global.css
================
body {
    font-family: "Nunito Sans";
  }

================
File: public/styles/admin/pages/HomePage.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 0px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }
  
  .link:hover {
    background-color: #005bb5;
  }

================
File: public/styles/admin/pages/Login.css
================
.login-container {
  text-align: center;
  margin-top: 50px;
}

.links {
  margin-top: 20px;
}

.link {
  display: inline-block;
  margin: 0 10px;
  padding: 10px 20px;
  background-color: #0070f3;
  color: #fff;
  border-radius: 5px;
  text-decoration: none;
}

.link:hover {
  background-color: #005bb5;
}

================
File: public/styles/admin/pages/Register.css
================
.register-container {
  text-align: center;
  margin-top: 50px;
}

.links {
  margin-top: 20px;
}

.link {
  display: inline-block;
  margin: 0 10px;
  padding: 10px 20px;
  background-color: #0070f3;
  color: #fff;
  border-radius: 5px;
  text-decoration: none;
}

.link:hover {
  background-color: #005bb5;
}

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/components/Auth/WithAuth.tsx
================
// src/components/Auth/withAuth.tsx

import { useContext, useEffect } from 'react';
import { AuthContext } from '../../contexts/AuthContext';
import { useRouter } from 'next/router';

const withAuth = <P extends object>(WrappedComponent: React.ComponentType) => {
  const ComponentWithAuth = (props: P) => {
    const { isAuthenticated } = useContext(AuthContext);
    const router = useRouter();

    useEffect(() => {
      if (!isAuthenticated) {
        router.push('/login');
      }
    }, [isAuthenticated, router]);

    return isAuthenticated ? <WrappedComponent {...props} /> : null;
  };

  return ComponentWithAuth;
};

export default withAuth;

================
File: src/contexts/AuthContext.tsx
================
import { createContext, useState, useEffect, ReactNode } from 'react';
import {jwtDecode} from 'jwt-decode';
import { useRouter } from 'next/router';

interface JwtPayload {
  id: string;
  email: string;
  role: string;
  // ... các trường khác tùy thuộc vào token của bạn
}

interface AuthContextProps {
  isAuthenticated: boolean;
  user: JwtPayload | null;
  login: (token: string) => void;
  logout: () => void;
}

export const AuthContext = createContext<AuthContextProps>({
  isAuthenticated: false,
  user: null,
  login: () => {},
  logout: () => {},
});

// src/contexts/AuthContext.tsx
export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<JwtPayload | null>(null);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const decodedUser = jwtDecode<JwtPayload>(token);
        setIsAuthenticated(true);
        setUser(decodedUser);
      } catch {
        console.error('Invalid token');
        setIsAuthenticated(false);
        setUser(null);
      }
    }
  }, []);

  const login = (token: string) => {
    localStorage.setItem('token', token);
    try {
      const decodedUser = jwtDecode<JwtPayload>(token);
      setIsAuthenticated(true);
      setUser(decodedUser);
    } catch {
      console.error('Invalid token');
      setIsAuthenticated(false);
      setUser(null);
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setIsAuthenticated(false);
    setUser(null);
    router.push('/login');
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

================
File: src/pages/_app.tsx
================
// pages/_app.js

import { AppProps } from 'next/app';
import { AuthProvider } from '../contexts/AuthContext';
import '../../public/styles/admin/pages/global.css';
import "@fontsource/nunito-sans"; // Defaults to weight 400
import "@fontsource/nunito-sans/400.css"; // Specify weight
import "@fontsource/nunito-sans/400-italic.css"; // Specify weight and style


function MyApp({ Component, pageProps }: AppProps) {
  return (
    <AuthProvider>
      <Component {...pageProps} />
    </AuthProvider>
  );
}

export default MyApp;

================
File: src/pages/[page].tsx
================
import React from 'react';
import Dashboard from './components/Dashboard';
import Register from './components/Register';
import Login from './components/Login';
const DynamicPage = ({ page }: { page: string }) => {
  if (page === 'dashboard') {
    return <Dashboard />;
  }
  if (page === 'register') {
    return <Register />;
  }
  if (page === 'login') {
    return <Login />;
  }
  return <div>Trang không tồn tại</div>;
};

export async function getServerSideProps(context: any) {
  const { page } = context.params;
  return {
    props: { page }, // Truyền `page` vào props
  };
}

export default DynamicPage;

================
File: src/pages/components/Dashboard.tsx
================
// src/pages/dashboard.tsx
import {useState, useEffect } from 'react';
import '../../../public/styles/admin/pages/Dashboard.css';
import React from 'react';
import 'tailwindcss/tailwind.css';
import NavigationBar from '../../pages/components/layout/NavigationBar';
import Footer from '../../pages/components/layout/Footer';
import { ChevronDown, ChevronLeft, ChevronRight ,Search } from 'lucide-react';
const Dashboard = () => {
  //const { user, logout } = useContext(AuthContext);
  const [currentSlide, setCurrentSlide] = useState(0);

  const slides = [
    {
      image: "/images/dashboard/presentation_pic.png",
      title: "MADE FOR THOSE",
      subtitle: "WHO DO"
    },
    {
      image: "/images/dashboard/presentation_pic.png",
      title: "DISCOVER EVENTS",
      subtitle: "NEAR YOU"
    },
    {
      image: "/images/dashboard/presentation_pic.png",
      title: "JOIN THE",
      subtitle: "COMMUNITY"
    }
  ];

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % slides.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
  };

  useEffect(() => {
    const timer = setInterval(nextSlide, 5000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="min-h-screen flex flex-col">
       <NavigationBar />
      <div className="flex justify-center mt-8">
        <div className="relative w-5/6  overflow-hidden rounded-lg">
          {/* Slides */}
          <div 
            className="flex transition-transform duration-500 ease-in-out h-full"
            style={{ transform: `translateX(-${currentSlide * 100}%)` }}
          >
            {slides.map((slide, index) => (
              <div key={index} className="w-full h-full flex-shrink-0 relative">
                <img
                  src={slide.image}
                  alt={`Slide ${index + 1}`}
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-black bg-opacity-40 flex flex-col items-center justify-center text-white">
                  <h2 className="text-6xl font-bold mb-4">{slide.title}</h2>
                  <p className="text-4xl">{slide.subtitle}</p>
                </div>
              </div>
            ))}
          </div>
          <button
            onClick={prevSlide}
            className="absolute left-4 top-1/2 -translate-y-1/2 bg-white bg-opacity-30 p-2 rounded-full hover:bg-opacity-50 transition-all"
          >
            <ChevronLeft size={24} className="text-white" />
          </button>
          <button
            onClick={nextSlide}
            className="absolute right-4 top-1/2 -translate-y-1/2 bg-white bg-opacity-30 p-2 rounded-full hover:bg-opacity-50 transition-all"
          >
            <ChevronRight size={24} className="text-white" />
          </button>

          {/* Search Controls */}
          <div className="absolute bottom-0 left-0 right-0 mx-auto w-11/12 px-10">
            <div className="bg-sky-900 text-white p-6 rounded-lg shadow-lg">
              <div className="flex gap-4">
                <div className="flex-1 text-left">
                  <label className="text-sm font-medium mb-2 ">Loại sự kiện</label>
                  <div className="mt-2 relative">
                  <select className="w-full bg-white text-gray-800 rounded p-2 appearance-none pr-8">
                    <option>Chọn địa điểm</option>
                    <option>Hà Nội</option>
                    <option>TP.HCM</option>
                    <option>Đà Nẵng</option>
                  </select>
                  <ChevronDown 
                    size={16} 
                    className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500"
                  />
                </div>
                </div>
                <div className="flex-1 text-left">
                  <label className=" text-sm font-medium mb-2">Địa điểm</label>
                  <div className="mt-2 relative">
                  <select className="w-full bg-white text-gray-800 rounded p-2 appearance-none pr-8">
                    <option>Chọn địa điểm</option>
                    <option>Hà Nội</option>
                    <option>TP.HCM</option>
                    <option>Đà Nẵng</option>
                  </select>
                  <ChevronDown 
                    size={16} 
                    className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500"
                  />
                </div>
                </div>
                <div className="flex-1 text-left">
                  <label className=" text-sm font-medium mb-2">Thời gian</label>
                  <div className="mt-2 relative">
                  <select className="w-full bg-white text-gray-800 rounded p-2 appearance-none pr-8">
                    <option>Chọn ngày và giờ</option>
                    <option>Hôm nay</option>
                    <option>Tuần này</option>
                    <option>Tháng này</option>
                  </select>   
                  <ChevronDown 
                    size={16} 
                    className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500"
                  />
                  </div>
                </div>

                <div className='flex items-end'>
                <label className=" text-white text-sm block mb-2">&nbsp;</label>
                <button className="h-10 w-14 bg-teal-400 hover:bg-teal-300 rounded flex items-center justify-center">
                  <Search size={20} className="text-white" />
                </button>
              </div>
              </div>
            </div>
          </div>

        </div>
      </div>

      <div className=" flex justify-center mt-8">
      <div className="relative w-5/6 overflow-hidden rounded-lg">
        {/* Section Header */}
        <div className="flex justify-between items-center mb-8">
          <h2 className="text-2xl font-bold">
            Sự kiện <span className="text-teal-400">Đặc biệt</span>
          </h2>
          <div className="flex gap-4">
            <select className="px-4 py-2 border rounded-md text-sm">
              <option>Ngày trong tuần</option>
            </select>
            <select className="px-4 py-2 border rounded-md text-sm">
              <option>Loại sự kiện</option>
            </select>
            <select className="px-4 py-2 border rounded-md text-sm">
              <option>Thể loại</option>
            </select>
          </div>
        </div>

        {/* Event Cards Grid */}
        <div className="grid grid-cols-3 gap-7">
          {[1, 2, 3, 4, 5, 6].map((_, index) => (
            <div key={index} className="bg-white rounded-lg overflow-hidden shadow-lg border-2 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-center aspect-[13/9] overflow-hidden">
                <img 
                  src="/images/dashboard/card_pic.png" 
                  alt="Event" 
                  className="w-11/12 h-11/12 object-cover hover:scale-105 transition-transform duration-300"
                />
              </div>
              <div className="p-4">
                <h3 className="font-bold text-left text-base mb-3 line-clamp-2 leading-tight">
                  Nhớ Trịnh Công Sơn 3 - Quang Dũng - Cẩm Vân - Khắc Triệu - Cece Trường
                </h3>
                <div className="flex justify-between items-center mb-2 text-sm">
                  <time className="text-teal-500">20:00 - 23:00, 25 tháng 10, 2024</time>
                  <span className={`rounded-lg bg-emerald-200 px-4 font-medium ${index % 2 === 0 ? 'text-sky-950	' : 'text-sky-950	'}`}>
                    {index % 2 === 0 ? 'Miễn phí' : 'Từ 950.000đ'}
                  </span>
                </div>
                <p className="mt-3 text-left text-xs text-gray-400">
                  SỰ KIỆN TRỰC TUYẾN - Tham dự ở bất cứ đâu
                </p>
              </div>
            </div>
          ))}
        </div>

        {/* Load More Button */}
        <div className="flex justify-center mt-8">
          <button className="px-6 py-2 bg-teal-400 text-sky-950 rounded-md hover:bg-teal-300 transition-colors">
            Xem thêm...
          </button>
        </div>
      </div>
      </div>

      <Footer />
    </div>
  );
};

export default Dashboard;

================
File: src/pages/components/layout/Footer.tsx
================
import { Linkedin, Instagram, Facebook } from 'lucide-react';

const Footer = ()=>{
    return (
       <footer className="bg-sky-900 text-white mt-20 py-12">
       <div className="container mx-auto px-4">
         {/* Newsletter Section */}
         <div className="text-center mb-12">
           <h2 className="text-2xl font-bold mb-8">EveBox</h2>
           <div className="flex max-w-md mx-auto gap-2">
             <input 
               type="email" 
               placeholder="Nhập email của bạn" 
               className="flex-1 px-4 py-2 rounded-md text-gray-800"
             />
             <button className="bg-teal-200 text-teal-950 px-6 py-2 rounded-md hover:bg-teal-100">
               Nhận tin mới
             </button>
           </div>
         </div>

         {/* Navigation Links */}
         <div className="flex justify-center gap-8 mb-8">
           <a href="#" className="hover:text-teal-200">Trang chủ</a>
           <a href="#" className="hover:text-teal-200">Giới thiệu</a>
           <a href="#" className="hover:text-teal-200">Dịch vụ</a>
           <a href="#" className="hover:text-teal-200">Liên hệ</a>
           <a href="#" className="hover:text-teal-200">Hỏi đáp</a>
         </div>

         {/* Language and Social Links */}
         <div className="flex justify-between items-center border-t-2 border-slate-400	 pt-8">
           <div className="flex gap-4">
             <button className="bg-teal-200 text-teal-950 px-6 py-2 rounded-md">Tiếng Việt</button>
             <button className="hover:text-teal-200">English</button>
           </div>
           <div className="flex gap-6">
             <a href="#" className="hover:text-teal-200">
               <Linkedin size={24} />
             </a>
             <a href="#" className="hover:text-teal-200">
               <Instagram size={24} />
             </a>
             <a href="#" className="hover:text-teal-200">
               <Facebook size={24} />
             </a>
           </div>
           <div className="text-sm">
             Non Copyrighted © 2023 Upload by EveBox
           </div>
         </div>
       </div>
     </footer>
    )
};

export default Footer;

================
File: src/pages/components/layout/NavigationBar.tsx
================
import { useState } from 'react';
import { Menu, ChevronDown } from 'lucide-react';
import Sidebar from '../../components/layout/SideBar';

const NavigationBar = () => {
    const [isLangOpen, setIsLangOpen] = useState(false);
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    return(
      <>  
       <nav className="bg-sky-900 shadow-lg">
       <div className="mx-auto px-4 sm:px-6 lg:px-4 h-16 flex justify-between items-center">      
         <div className="flex items-center gap-2">
         <button className="text-white p-2 hover:bg-teal-700 rounded-md mr-4" onClick={() => setIsSidebarOpen(true)}>
           <Menu size={24} />
         </button>
           <div className="w-18 h-9 rounded flex items-center justify-center">
             <img src="/images/dashboard/logo-icon.png" alt="flag" className="w-18 h-9" />
           </div>
           <span className="text-white font-bold text-xl">EveBox</span>
         </div>
         
         <div className="flex items-center gap-4">
            {/* Language Selector */}
            <div className="relative">
             <button 
               className="flex items-center gap-2 text-white p-2 hover:bg-teal-700 rounded-md"
               onClick={() => setIsLangOpen(!isLangOpen)}
             >
               <img src="/images/dashboard/vietnam-icon.png" alt="flag" className="w-12 h-7 mr-2" />
               <span>VI</span>
               <ChevronDown size={16} />
             </button>
             
             {isLangOpen && (
               <div className="absolute top-full right-0 mt-1 bg-white rounded-md shadow-lg py-1 w-32">
                 <button className="flex items-center gap-2 px-3 py-2 hover:bg-gray-100 w-full">
                   <img 
                     src="/images/dashboard/vietnam-icon.png" 
                     alt="English flag" 
                     className="w-8 h-6 rounded"
                   />
                   <span className="text-gray-700">EN</span>
                 </button>
                 <button className="flex items-center gap-2 px-3 py-2 hover:bg-gray-100 w-full">
                   <img 
                     src="/images/dashboard/vietnam-icon.png" 
                     alt="Vietnamese flag" 
                     className="w-8 h-6 rounded"
                   />
                   <span className="text-gray-700">VI</span>
                 </button>
               </div>
             )}
           </div>
           <button className="text-white hover:text-teal-100">Đăng nhập</button>
           <button className="bg-teal-200 text-teal-950 px-4 py-2 rounded-md hover:bg-teal-50">
             Đăng ký
           </button>
         </div>
       </div>
       </nav>

       <Sidebar 
        isOpen={isSidebarOpen} 
        onClose={() => setIsSidebarOpen(false)} 
        />
     </>
    );
};

export default NavigationBar;

================
File: src/pages/components/layout/SideBar.tsx
================
// src/components/layout/Sidebar.tsx
import Link from 'next/link';
import { User, Ticket, Calendar, LogOut } from 'lucide-react';

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

const Sidebar = ({ isOpen, onClose }: SidebarProps) => {
  const menuItems = [
    { icon: <User size={20} />, text: 'Quản lý tài khoản', href: '/account' },
    { icon: <Ticket size={20} />, text: 'Quản lý vé', href: '/tickets' },
    { icon: <Calendar size={20} />, text: 'Tạo sự kiện', href: '/create-event' },
    { icon: <LogOut size={20} />, text: 'Đăng xuất', href: '/logout' },
  ];

  return (
    <>
      {/* Overlay */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={onClose}
        />
      )}

      {/* Sidebar */}
      <div
        className={`fixed top-0 left-0 h-full w-64 bg-sky-900 text-white transform transition-transform duration-300 ease-in-out z-50 ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        }`}
      >
        <div className="p-4">
          <h2 className="text-2xl font-bold mb-8">QUẢN LÝ</h2>
          <nav>
            <ul className="space-y-4">
              {menuItems.map((item, index) => (
                <li key={index}>
                  <Link
                    href={item.href}
                    className="flex items-center gap-3 py-2 px-4 hover:bg-sky-800 rounded-md transition-colors"
                  >
                    {item.icon}
                    <span>{item.text}</span>
                  </Link>
                </li>
              ))}
            </ul>
          </nav>
        </div>
      </div>
    </>
  );
};

export default Sidebar;

================
File: src/pages/components/Login.tsx
================
// src/pages/login/index.tsx

import { useState, useContext } from 'react';
import axios, { AxiosError } from 'axios';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useRouter } from 'next/router';
import { AuthContext } from '../../contexts/AuthContext';
import { ErrorResponse } from '@/types/errorResponse';
import '../../../public/styles/admin/pages/Login.css';
import Link from 'next/link';

const Login = () => {
  const [error, setError] = useState('');
  const router = useRouter();
  const { login } = useContext(AuthContext); // Sử dụng login từ AuthContext

  const formik = useFormik({
    initialValues: {
      email: '',
      password: '',
    },
    validationSchema: Yup.object({
      email: Yup.string().email('Email không hợp lệ').required('Yêu cầu nhập email'),
      password: Yup.string().required('Yêu cầu nhập mật khẩu'),
    }),
    onSubmit: async (values) => {
      try {
        const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/signin`, values);
        const { accessToken } = response.data;

        // Gọi phương thức login để cập nhật AuthContext
        login(accessToken);

        alert('Đăng nhập thành công!');
        router.push('/dashboard');
      } catch (err) {
        if (axios.isAxiosError(err)) {
          const error = err as AxiosError<ErrorResponse>;
          setError(error.response?.data?.message || 'Đăng nhập thất bại');
        } else {
          setError('Đăng nhập thất bại');
        }
      }
    },
  });

  return (
    <div className='login-container'>
      <h1>Đăng nhập</h1>
      <form onSubmit={formik.handleSubmit}>
        <div className="">
          <label>Email:</label>
          <input type="email" {...formik.getFieldProps('email')} />
          {formik.touched.email && formik.errors.email ? (
            <div className="">{formik.errors.email}</div>
          ) : null}
        </div>
        <div className="">
          <label>Mật khẩu:</label>
          <input type="password" {...formik.getFieldProps('password')} />
          {formik.touched.password && formik.errors.password ? (
            <div className="">{formik.errors.password}</div>
          ) : null}
        </div>
        {error && <div className="">{error}</div>}
        <button type="submit" className="">
          Đăng nhập
        </button>
      </form>
      <div className='links'>
        <Link href="/register" className='link'>
          Đăng ký
        </Link>
      </div>
    </div>
  );
};

export default Login;

================
File: src/pages/components/Register.tsx
================
// src/pages/register/index.tsx

import { useState } from 'react';
import axios, { AxiosError } from 'axios';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useRouter } from 'next/router';
import { ErrorResponse } from '@/types/errorResponse';
import Link from 'next/link';
import '../../../public/styles/admin/pages/Register.css'

const Register = () => {
  const [error, setError] = useState('');
  const router = useRouter();

  const formik = useFormik({
    initialValues: {
      email: '',
      password: '',
      role: 'CUSTOMER',
    },
    validationSchema: Yup.object({
      email: Yup.string().email('Email không hợp lệ').required('Yêu cầu nhập email'),
      password: Yup.string().min(6, 'Mật khẩu tối thiểu 6 ký tự').required('Yêu cầu nhập mật khẩu'),
    }),
    onSubmit: async (values) => {
      console.log('{process.env.NEXT_PUBLIC_API_URL', process.env.NEXT_PUBLIC_API_URL);
      try {
        await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/auth/signup`, values);
        // await axios.post(`http://172.18.0.3/auth/signup`, values);
        alert('Đăng ký thành công!');
        router.push('/login');
      } catch (err) {
        if (axios.isAxiosError(err)) {
          const error = err as AxiosError<ErrorResponse>;
          setError(error.response?.data?.message || 'Đăng ký thất bại');
        } else {
          setError('Đăng ký thất bại');
        }
      }
    },
  });

  return (
    <div className='register-container'>
      <h1>Đăng ký</h1>
      <form onSubmit={formik.handleSubmit}>
        <div>
          <label>Email:</label>
          <input type="email" {...formik.getFieldProps('email')} />
          {formik.touched.email && formik.errors.email ? <div style={{ color: 'red' }}>{formik.errors.email}</div> : null}
        </div>
        <div>
          <label>Mật khẩu:</label>
          <input type="password" {...formik.getFieldProps('password')} />
          {formik.touched.password && formik.errors.password ? <div style={{ color: 'red' }}>{formik.errors.password}</div> : null}
        </div>
        <div>
          <label>Vai trò:</label>
          <select {...formik.getFieldProps('role')}>
            <option value="CUSTOMER">Khách hàng</option>
            <option value="ADMIN">Quản trị viên</option>
          </select>
        </div>
        {error && <div style={{ color: 'red' }}>{error}</div>}
        <button type="submit">Đăng ký</button>
      </form>
      <div className='links'>
        <Link href="/login" className='link'>
          Đăng nhập
        </Link>
      </div>
    </div>
  );
};

// const styles = {
//   container: {
//     textAlign: 'center' as const,
//     marginTop: '50px',
//   },
//   links: {
//     marginTop: '20px',
//   },
//   link: {
//     display: 'inline-block',
//     margin: '0 10px',
//     padding: '10px 20px',
//     backgroundColor: '#0070f3',
//     color: '#fff',
//     borderRadius: '5px',
//     textDecoration: 'none',
//   },
// };

export default Register;

================
File: src/pages/index.tsx
================
/* Package application */
import React, { useContext } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import useSWR from 'swr';
import axios from 'axios';
import Dashboard from './components/Dashboard';


/* Package system */
import { AuthContext } from '../contexts/AuthContext';
import '../../public/styles/admin/pages/HomePage.css';

const fetcher = (url: string) => axios.get(url).then(res => res.data);

const HomePage = () => {
  const { isAuthenticated, user } = useContext(AuthContext);

  // Ví dụ: Lấy số lượng người dùng từ API
  const { data, error } = useSWR('/api/users/count', fetcher);

  return (
    <div className="container">
      {!isAuthenticated ? (
        // <>
        //   <h1>Chào mừng trở lại, {user?.email}!</h1>
        //   <p>Khám phá dashboard của bạn.</p>
        //   <Link href="/dashboard" className="link">
        //     Vào Dashboard
        //   </Link>
        //   {data ? (
        //     <p>Số lượng người dùng hiện tại: {data.count}</p>
        //   ) : error ? (
        //     <p>Không thể lấy thông tin người dùng.</p>
        //   ) : (
        //     <p>Đang tải số lượng người dùng...</p>
        //   )}
        // </>
        <Dashboard />
      ) : (
        <>
          <h1>Chào mừng đến với EveBox!</h1>
          <p>Ứng dụng quản lý người dùng hiệu quả và bảo mật.</p>
          <div className="links">
            <Link href="/register" className="link">
              Đăng ký
            </Link>
            <Link href="/login" className="link">
              Đăng nhập
            </Link>
          </div>
        </>
      )}
    </div>
  );
};

export default HomePage;

================
File: src/styles/Dashboard.module.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 50px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }
  
  .link:hover {
    background-color: #005bb5;
  }

================
File: src/styles/HomePage.module.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 50px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }
  
  .link:hover {
    background-color: #005bb5;
  }

================
File: src/styles/Login.module.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 50px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }
  
  .link:hover {
    background-color: #005bb5;
  }

================
File: src/styles/Register.module.css
================
/* src/styles/HomePage.module.css */

.container {
    text-align: center;
    margin-top: 50px;
  }
  
  .links {
    margin-top: 20px;
  }
  
  .link {
    display: inline-block;
    margin: 0 10px;
    padding: 10px 20px;
    background-color: #0070f3;
    color: #fff;
    border-radius: 5px;
    text-decoration: none;
  }
  
  .link:hover {
    background-color: #005bb5;
  }

================
File: src/types/errorResponse.ts
================
// types/ErrorResponse.ts

export interface ErrorResponse {
    statusCode: number;
    message: string;
    error: string;
  }

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/pages/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/**/*.{js,jsx,ts,tsx}"
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
    fontWeight: {
      thin: '100',
      hairline: '100',
      extralight: '200',
      light: '300',
      normal: '400',
      medium: '500',
      semibold: '600',
      bold: '700',
      extrabold: '800',
      'extra-bold': '800',
      black: '900',
    }
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "src/pages/_app.tsx"],
  "exclude": ["node_modules"]
}
