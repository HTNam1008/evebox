generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @db.VarChar(255)
  name          String         @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  phone         String         @db.VarChar(10)
  password      String         @db.VarChar(255)
  role_id       Int?
  created_at    DateTime       @default(now())
  Events        Events[]
  refreshTokens RefreshToken[]
  userProvince  UserProvince[]
  role          Role?          @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Role {
  id        Int    @id
  role_name String @db.VarChar(50)
  users     User[]

  @@map("role")
}

model Province {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  created_at   DateTime       @default(now())
  districts    districts[]
  userProvince UserProvince[]

  @@map("province")
}

model UserProvince {
  userId     String
  provinceId Int
  province   Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, provinceId])
  @@map("user_provinces")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Otp {
  id           String   @id
  email        String
  otp          String
  type         OTPType
  expiresAt    DateTime
  isUsed       Boolean  @default(false)
  createdAt    DateTime @default(now())
  attempts     Int
  requestToken String   @unique

  @@index([email])
  @@index([otp])
  @@map("otps")
}

model Categories {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  createdAt       DateTime          @default(now())
  EventCategories EventCategories[]
}

model EventCategories {
  id         Int        @id @default(autoincrement())
  eventId    Int
  categoryId Int
  isSpecial  Boolean    @default(false)
  Categories Categories @relation(fields: [categoryId], references: [id])
  Events     Events     @relation(fields: [eventId], references: [id])

  @@index([categoryId])
  @@index([eventId])
}

model Events {
  id                                Int               @id @default(autoincrement())
  title                             String            @db.VarChar(255)
  description                       String?
  startDate                         DateTime
  endDate                           DateTime
  organizerId                       String?
  status                            String            @db.VarChar(55)
  locationId                        Int
  venue                             String?           @db.VarChar(100)
  imgLogoId                         Int?
  imgPosterId                       Int?
  createdAt                         DateTime          @default(now())
  minTicketPrice                    Int               @default(0)
  isOnlyOnEve                       Boolean           @default(false)
  isSpecial                         Boolean           @default(false)
  lastScore                         Decimal           @db.Decimal(10, 2)
  totalClicks                       Int               @default(0)
  weekClicks                        Int               @default(0)
  EventCategories                   EventCategories[]
  Images_Events_imgLogoIdToImages   Images?           @relation("Events_imgLogoIdToImages", fields: [imgLogoId], references: [id])
  Images_Events_imgPosterIdToImages Images?           @relation("Events_imgPosterIdToImages", fields: [imgPosterId], references: [id])
  locations                         locations         @relation(fields: [locationId], references: [id])
  users                             User?             @relation(fields: [organizerId], references: [id])
  Showing                           Showing[]
}

model Images {
  id                                Int      @id @default(autoincrement())
  imageUrl                          String   @db.VarChar(255)
  Events_Events_imgLogoIdToImages   Events[] @relation("Events_imgLogoIdToImages")
  Events_Events_imgPosterIdToImages Events[] @relation("Events_imgPosterIdToImages")
}

model districts {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  provinceId Int
  createdAt  DateTime    @default(now())
  province   Province    @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  locations  locations[]
}

model locations {
  id         Int       @id @default(autoincrement())
  street     String    @db.VarChar(255)
  ward       String    @db.VarChar(100)
  districtId Int
  createdAt  DateTime  @default(now())
  Events     Events[]
  districts  districts @relation(fields: [districtId], references: [id], onDelete: Cascade)
}

model Row {
  id        Int      @id @default(autoincrement())
  name      String
  sectionId Int
  createdAt DateTime @default(now())
  Section   Section  @relation(fields: [sectionId], references: [id])
  Seat      Seat[]
}

model Seat {
  id        Int      @id @default(autoincrement())
  name      String
  rowId     Int
  positionX Float
  positionY Float
  createdAt DateTime @default(now())
  position  Int
  Row       Row      @relation(fields: [rowId], references: [id])
  Ticket    Ticket[]
}

model Seatmap {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  viewBox   String
  status    Int
  Section   Section[]
  Showing   Showing[]
}

model Section {
  id           Int      @id @default(autoincrement())
  name         String
  seatmapId    Int
  isStage      Boolean
  element      Json
  attribute    Json
  createdAt    DateTime @default(now())
  ticketTypeId String
  Row          Row[]
  Seatmap      Seatmap  @relation(fields: [seatmapId], references: [id])
}

model Showing {
  id                    String       @id
  eventId               Int
  status                String
  isFree                Boolean
  isSalable             Boolean
  isPresale             Boolean
  seatMapId             Int
  startTime             DateTime
  endTime               DateTime
  isEnabledQueueWaiting Boolean
  showAllSeats          Boolean
  Events                Events       @relation(fields: [eventId], references: [id])
  Seatmap               Seatmap      @relation(fields: [seatMapId], references: [id])
  Ticket                Ticket[]
  TicketType            TicketType[]

  @@index([eventId])
}

model Ticket {
  id           String     @id @default(uuid())
  seatId       Int
  showingId    String
  ticketTypeId String
  status       Int
  price        Int
  userId       Int?
  purchasedAt  DateTime?
  qrCode       String?
  Seat         Seat       @relation(fields: [seatId], references: [id])
  Showing      Showing    @relation(fields: [showingId], references: [id])
  TicketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  @@index([seatId])
  @@index([showingId])
  @@index([ticketTypeId])
}

model TicketType {
  id             String    @id
  showingId      String
  name           String
  description    String
  color          String
  isFree         Boolean
  price          Int
  originalPrice  Int
  maxQtyPerOrder Int
  minQtyPerOrder Int
  effectiveFrom  DateTime
  effectiveTo    DateTime?
  position       Int
  status         String
  imageUrl       String
  isHidden       Boolean   @default(false)
  Ticket         Ticket[]
  Showing        Showing   @relation(fields: [showingId], references: [id])

  @@index([showingId])
}

enum OTPType {
  FORGOT_PASSWORD
  REGISTER
}
