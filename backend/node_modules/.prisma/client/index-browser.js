
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.4.1
 * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
 */
Prisma.prismaVersion = {
  client: "6.4.1",
  engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  role_id: 'role_id',
  created_at: 'created_at'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  role_name: 'role_name'
};

exports.Prisma.ProvinceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.UserProvinceScalarFieldEnum = {
  userId: 'userId',
  provinceId: 'provinceId'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  revoked: 'revoked',
  expiresAt: 'expiresAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  type: 'type',
  expiresAt: 'expiresAt',
  isUsed: 'isUsed',
  createdAt: 'createdAt',
  attempts: 'attempts',
  requestToken: 'requestToken'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.EventCategoriesScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  categoryId: 'categoryId',
  isSpecial: 'isSpecial'
};

exports.Prisma.EventsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  organizerId: 'organizerId',
  status: 'status',
  locationId: 'locationId',
  venue: 'venue',
  imgLogoId: 'imgLogoId',
  imgPosterId: 'imgPosterId',
  createdAt: 'createdAt',
  minTicketPrice: 'minTicketPrice',
  isOnlyOnEve: 'isOnlyOnEve',
  isSpecial: 'isSpecial',
  lastScore: 'lastScore',
  totalClicks: 'totalClicks',
  weekClicks: 'weekClicks'
};

exports.Prisma.ImagesScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl'
};

exports.Prisma.DistrictsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  provinceId: 'provinceId',
  createdAt: 'createdAt'
};

exports.Prisma.LocationsScalarFieldEnum = {
  id: 'id',
  street: 'street',
  ward: 'ward',
  districtId: 'districtId',
  createdAt: 'createdAt'
};

exports.Prisma.RowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sectionId: 'sectionId',
  createdAt: 'createdAt'
};

exports.Prisma.SeatScalarFieldEnum = {
  id: 'id',
  name: 'name',
  rowId: 'rowId',
  positionX: 'positionX',
  positionY: 'positionY',
  createdAt: 'createdAt',
  position: 'position'
};

exports.Prisma.SeatmapScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  viewBox: 'viewBox',
  status: 'status'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  seatmapId: 'seatmapId',
  isStage: 'isStage',
  element: 'element',
  attribute: 'attribute',
  createdAt: 'createdAt',
  ticketTypeId: 'ticketTypeId'
};

exports.Prisma.ShowingScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  status: 'status',
  isFree: 'isFree',
  isSalable: 'isSalable',
  isPresale: 'isPresale',
  seatMapId: 'seatMapId',
  startTime: 'startTime',
  endTime: 'endTime',
  isEnabledQueueWaiting: 'isEnabledQueueWaiting',
  showAllSeats: 'showAllSeats'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  seatId: 'seatId',
  showingId: 'showingId',
  ticketTypeId: 'ticketTypeId',
  status: 'status',
  price: 'price',
  userId: 'userId',
  purchasedAt: 'purchasedAt',
  qrCode: 'qrCode'
};

exports.Prisma.TicketTypeScalarFieldEnum = {
  id: 'id',
  showingId: 'showingId',
  name: 'name',
  description: 'description',
  color: 'color',
  isFree: 'isFree',
  price: 'price',
  originalPrice: 'originalPrice',
  maxQtyPerOrder: 'maxQtyPerOrder',
  minQtyPerOrder: 'minQtyPerOrder',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  position: 'position',
  status: 'status',
  imageUrl: 'imageUrl',
  isHidden: 'isHidden'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.OTPType = exports.$Enums.OTPType = {
  FORGOT_PASSWORD: 'FORGOT_PASSWORD',
  REGISTER: 'REGISTER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Province: 'Province',
  UserProvince: 'UserProvince',
  RefreshToken: 'RefreshToken',
  Otp: 'Otp',
  Categories: 'Categories',
  EventCategories: 'EventCategories',
  Events: 'Events',
  Images: 'Images',
  districts: 'districts',
  locations: 'locations',
  Row: 'Row',
  Seat: 'Seat',
  Seatmap: 'Seatmap',
  Section: 'Section',
  Showing: 'Showing',
  Ticket: 'Ticket',
  TicketType: 'TicketType'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
