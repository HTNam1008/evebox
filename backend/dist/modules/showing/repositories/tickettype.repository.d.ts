import { PrismaService } from "../../../infrastructure/database/prisma/prisma.service";
import { CreateTicketTypeDto } from '../commands/tickettype/create-tickettype.dto';
import { Prisma } from "@prisma/client";
export declare class TicketTypeRepository {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(data: CreateTicketTypeDto): Promise<{
        id: string;
        description: string;
        status: string;
        name: string;
        imageUrl: string;
        color: string;
        isFree: boolean;
        price: number;
        originalPrice: number;
        maxQtyPerOrder: number;
        minQtyPerOrder: number;
        effectiveFrom: Date;
        effectiveTo: Date | null;
        position: number;
        isHidden: boolean;
        showingId: string;
    }>;
    getAllTicketType(): Promise<{
        id: string;
        description: string;
        status: string;
        name: string;
        imageUrl: string;
        color: string;
        isFree: boolean;
        price: number;
        originalPrice: number;
        maxQtyPerOrder: number;
        minQtyPerOrder: number;
        effectiveFrom: Date;
        effectiveTo: Date | null;
        position: number;
        isHidden: boolean;
        showingId: string;
    }[]>;
    findTicketTypeById(id: string): Promise<{
        id: string;
        description: string;
        status: string;
        name: string;
        imageUrl: string;
        color: string;
        isFree: boolean;
        price: number;
        originalPrice: number;
        maxQtyPerOrder: number;
        minQtyPerOrder: number;
        effectiveFrom: Date;
        effectiveTo: Date | null;
        position: number;
        isHidden: boolean;
        showingId: string;
    }>;
    update(id: string, data: Prisma.TicketTypeUpdateInput): Promise<{
        id: string;
        description: string;
        status: string;
        name: string;
        imageUrl: string;
        color: string;
        isFree: boolean;
        price: number;
        originalPrice: number;
        maxQtyPerOrder: number;
        minQtyPerOrder: number;
        effectiveFrom: Date;
        effectiveTo: Date | null;
        position: number;
        isHidden: boolean;
        showingId: string;
    }>;
    delete(id: string): Promise<{
        id: string;
        description: string;
        status: string;
        name: string;
        imageUrl: string;
        color: string;
        isFree: boolean;
        price: number;
        originalPrice: number;
        maxQtyPerOrder: number;
        minQtyPerOrder: number;
        effectiveFrom: Date;
        effectiveTo: Date | null;
        position: number;
        isHidden: boolean;
        showingId: string;
    }>;
}
